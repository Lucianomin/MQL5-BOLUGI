#property copyright "MindaLucian"
#property link      "MindaLucian"
#property version   "1.00"

//+------------------------------------------------------------------+
//| Includes                                                         |
//+------------------------------------------------------------------+
#include <Trade/Trade.mqh>

//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
input group "---->General Inputs<----";

input long InpMagicNumber=181105;

enum LOT_MODE_ENUM
  {
   LOT_MODE_FIXED, //Fixed Lots
   LOT_MODE_ADDITION, //Additional Lots
   LOT_MODE_PERCENT //Percent Lots
  };
input LOT_MODE_ENUM InpLotMode = LOT_MODE_FIXED; //Lot Mode
input double InpLots=0.01; //fixed/additional lots/percent

input group "---->Range Inputs(Complementare)<----";

enum COMPLEMENTARE_MODE
        {
         COMPLEMENTARE_BUY,
         COMPLEMENTARE_SELL,
         COMPLEMENTARE_BUY_SELL
        };
        
input COMPLEMENTARE_MODE InpComplementareMode= COMPLEMENTARE_BUY; //Complementare Mode
//stop loss mode
enum SL_MODE_ENUM
  {
   SL_MODE_FIXED, 
   SL_MODE_PERCENT
  };
  
input SL_MODE_ENUM InpSlMode = SL_MODE_FIXED; //StopLoss Mode

input int InpStopLoss=100; // InpStopLoss (pips / percent)
input int InpStepC=100; // InpStepC (pips)
input bool TrailMode=true; //TrailMode (true/false)
input int InpTrailStop=20; //InpTrailStop (pips)


input group "---->Range Inputs(Mediere)<----";
enum MEDIERE_MODE
        {
         MEDIERE_BUY,
         MEDIERE_SELL
        };
        
input MEDIERE_MODE InpMediereMode= MEDIERE_BUY; //Mediere Mode

/*enum STEP_MODE
  {
   STEP_FIXED,
   STEP_PERCENT
  };

input STEP_MODE InpStepModeM= STEP_FIXED; //Step Mode

input int InpStepM=100; //InpStepM (pips / percent)*/
//+------------------------------------------------------------------+
//| Global D                                                        |
//+------------------------------------------------------------------+
MqlRates PriceInfo[];
MqlTick currTick;
CTrade trade;
string signal="";
int PositionNumber=0;
int PositionBuyNumber=0;
int PositionSellNumber=0;
int TotalBuyPositions=0;
int TotalSellPositions=0;
double MaxClose=0;
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   if(!CheckInputs())
   {return INIT_PARAMETERS_INCORRECT;}
   return(INIT_SUCCEEDED);
  }
  
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   if(InpComplementareMode==COMPLEMENTARE_BUY)
     {
      Complementare_Buy();
     }
     if(InpComplementareMode==COMPLEMENTARE_SELL)
       {
        Complementare_Sell();
       }
       if(InpComplementareMode==COMPLEMENTARE_BUY_SELL)
       {
         Complementare_Buy_Sell();
       
    }
  }
 
//+-----------------------------------------------------------------+
//| function                                                         |
//+------------------------------------------------------------------+

 //check for inputs
   bool CheckInputs()
{
  
   if(InpMagicNumber<=0)
   {
   Alert("Magic Number <=0");
   return false;
   }
   
   if(InpLotMode==LOT_MODE_FIXED &&(InpLots<=0 || InpLots >10))
     {
      Alert("lots<=0 or lots>10" );
      return false;
     }
     
     if(InpLotMode==LOT_MODE_ADDITION &&(InpLots<=0 || InpLots >1000))
     {
      Alert("lots<=0 or lots>1000" );
      return false;
     }
     if(InpLotMode==LOT_MODE_PERCENT &&(InpLots<=0 || InpLots >5))
     {
      Alert("lots<=0 or lots>5%" );
      return false;
     }
     
     if((InpLotMode==LOT_MODE_PERCENT || InpLotMode==LOT_MODE_ADDITION) && InpStopLoss==0)
     {
      Alert("selected mode needs a stop loss" );
      return false;
     }
   if(InpSlMode==SL_MODE_FIXED && (InpStopLoss<=0 || InpStopLoss>=1000))
     {
      Alert("Stop Loss lower than 0 or greater than 1000");
      return false;
     }
     if(InpSlMode==SL_MODE_PERCENT && (InpStopLoss<=0 || InpStopLoss>5))
     {
      Alert("Stop Loss lower than 0 or greater than 5%");
      return false;
     }
     /*if(InpStepModeM==STEP_FIXED && (InpStepM<=0 || InpStepM>=1000))
     {
      Alert("Step Mediere lower than 0 or greater than 1000 pips");
      return false;
     }
     if(InpStepModeM==STEP_PERCENT && (InpStepM<=0 || InpStepM>=5))
     {
      Alert("Step Mediere lower than 0 or greater than 5%");
      return false;
     }
     if(InpStepM<=0)
     {
     Alert("Step Mediere <=0");
      return false;
   }
     */
     if(InpStepC<=0)
     {
     Alert("InpStepC <=0");
     return false;
     }
     
  return true;
}
//Check entry signal
string CheckEntrySignal()
{
   if(PriceInfo[1].close>PriceInfo[1].open)
   {
   signal="buy";
   }
   if(PriceInfo[1].close<PriceInfo[1].open)
     {
      signal="sell";
     }
   return signal;
}

//CloseAllPOsitions
void CloseAllPositions()
{
   for(int i=PositionsTotal()-1;i>=0;i--)
   {
   ulong ticket=PositionGetTicket(i);//get ticket
   trade.PositionClose(ticket,i);//close
   PositionNumber=PositionNumber+2;
   
   }

}
//CloseBuyPos
void CloseBuyPositions()
{
   for(int i=PositionsTotal()-1;i>=0;i--)
   {
   ulong ticket=PositionGetTicket(i);//get ticket
      if(PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY)
         {
         trade.PositionClose(ticket,i);//close
         PositionBuyNumber=PositionBuyNumber+2;
         }
   
   }

}
void CloseSellPositions()
{
   for(int i=PositionsTotal()-1;i>=0;i--)
   {
   ulong ticket=PositionGetTicket(i);//get ticket
   if(PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_SELL)
   {
   trade.PositionClose(ticket,i);//close
   PositionSellNumber=PositionSellNumber+2;
   }
   
   }

}

//calculatelots
double CalculateLots(double lots){

   lots=0.0;
   if(InpLotMode==LOT_MODE_FIXED)
     {
      lots=InpLots;
     }
      if(InpLotMode==LOT_MODE_PERCENT)
        {
         double tickSize=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE);
         double tickValue=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_VALUE);
         double volumeStep=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP);
         Print("TICKsize", tickSize,"tickValue",tickValue,"volumestep",volumeStep);
         if(tickSize==0 || tickValue==0 || volumeStep==0)
         {
         Print(__FUNCTION__,"Can not calculate ticksize tickvalue volumestep");
         return 0;
         }
         double riskMoney=AccountInfoDouble(ACCOUNT_BALANCE)*InpLots*0.01;
         Print("risk Money",riskMoney);
         // pentru complementare
         if(InpComplementareMode==COMPLEMENTARE_BUY || InpComplementareMode==COMPLEMENTARE_SELL || InpComplementareMode==COMPLEMENTARE_BUY_SELL)
         {
            double moneyVolumeStep= ((1250*_Point)/tickSize) * tickValue *volumeStep;
            lots=MathFloor(riskMoney/moneyVolumeStep)*volumeStep;
         }
         
         return lots;
         //lots=MathFloor(riskMoney/moneyVolumeStep)*volumeStep;
        }
        
        return lots;
        
}

//Complementare function
void Complementare_Buy()
{
   
  //static next buy price
  static double NextBuyPrice;
  
  double ask =NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
  //sort
  ArraySetAsSeries(PriceInfo,true);
  int PriceData= CopyRates(_Symbol,_Period,0,3,PriceInfo);
 
 
   if(PositionsTotal()==0)
   {NextBuyPrice=0;}
   
   signal=CheckEntrySignal();
   
   if(ask>=NextBuyPrice)
   {
   if(signal=="buy")
   {
      //double sl=ask-InpStepC*_Point;
      double Lots= CalculateLots(InpLots);
      trade.Buy(Lots,NULL,ask,0,0,NULL);
      NextBuyPrice=ask+InpStepC*_Point;
   
   }
   }
   //chart output
   Comment("Ask",ask,"\n","NextBuyPrice: ",NextBuyPrice);
  // Print("Ask",ask);
   // range condition not static
   if(PositionsTotal()>=4)
   {
   //RangeCondition=true;
   //Print("Ask",ask);
   int totalPositions = PositionsTotal();
   double RangePrice = 0.0; // Initialize with a default value
   Print("---->",PositionNumber);
   
   int OpenBuySellTrades=PositionNumber;

      for (int i = OpenBuySellTrades; i<OpenBuySellTrades+totalPositions+2; i++) //testat optim??? putem si mai departe aprox 180 de complementari
      { 
      //Alert("ticket",i);
         if (PositionSelectByTicket(i)) 
         {
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) 
               {
                  
                  RangePrice = NormalizeDouble(PositionGetDouble(POSITION_PRICE_OPEN),_Digits);
                  //Print("RangePrice                   ",RangePrice);
               }
         }
         
      }
      double TrailPrice=RangePrice+InpTrailStop*_Point;
      NormalizeDouble(TrailPrice,_Digits);
      double ClosePrice=RangePrice-InpStopLoss*_Point; //calculeaza nivelul de stop loss
      NormalizeDouble(ClosePrice,_Digits);
      //Print("RangePricebeforeTRail ",RangePrice);
       
       //Print("RangePricebefore->>> ",ClosePrice);
      if(TrailMode==true)
      {
         while(ask>=TrailPrice)
	      {
	       ClosePrice=ClosePrice+InpTrailStop*_Point;
		    TrailPrice=TrailPrice+InpTrailStop*_Point; 
		    if(ClosePrice>=MaxClose){MaxClose=ClosePrice;}
		     //Print("print ---->",ask);
           
	      }
	     Print("MaxClose   ",MaxClose);
      }
      if(ask<=MaxClose)
         {
          CloseAllPositions();// inchide toate pozitiile cand
          
          }
      Print("TrailPrice ",TrailPrice);
    Print("ClosePrice ",ClosePrice);
  // Print("RangePrice ",RangePrice);
   //Comment("ClosePrice ",ClosePrice);
  
      // daca atinge stop loss-ul
      
      }
      
}
void Complementare_Sell()
{
   
  //static next buy price
  static double NextSellPrice;
  
  double bid =NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
  //sort
  
  ArraySetAsSeries(PriceInfo,true);
  int PriceData= CopyRates(_Symbol,_Period,0,3,PriceInfo);
 
 
   if(PositionsTotal()==0)
   {NextSellPrice=0;}
   
   signal=CheckEntrySignal();
  // Alert("sell");
   if((bid<=NextSellPrice) || NextSellPrice==0)
  
   if(signal=="sell")
   {
   
      //double sl=ask-InpStepC*_Point;
      double Lots= CalculateLots(InpLots);
      trade.Sell(Lots,NULL,bid,0,0,NULL);
      NextSellPrice=bid-InpStepC*_Point;
      Print("NextSellPrice",NextSellPrice);
   }
   
   //chart output
   Comment("Bid",bid,"\n","NextBuyPrice: ",NextSellPrice);
   
   // range condition not static
   if(PositionsTotal()>=4)
   {
   //RangeCondition=true;
   //Print("Ask",ask);
   int totalPositions = PositionsTotal();
   double RangePrice = 0.0; // Initialize with a default value
   Print("---->",PositionNumber);
   
   int OpenBuySellTrades=PositionNumber;

      for (int i = OpenBuySellTrades; i<OpenBuySellTrades+totalPositions+2; i++) //testat optim??? putem si mai departe aprox 180 de complementari
      { 
      //Alert("ticket",i);
         if (PositionSelectByTicket(i)) 
         {
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) 
               {
                  
                  RangePrice = NormalizeDouble(PositionGetDouble(POSITION_PRICE_OPEN),_Digits);
                  //Print("RangePrice                   ",RangePrice);
               }
         }
         
      }
   
   Print("RangePrice ",RangePrice);
   double ClosePrice=RangePrice+InpStopLoss*_Point; //calculeaza nivelul de stop loss
   Comment("ClosePrice ",ClosePrice);
   Print("ClosePrice ",ClosePrice);
      // daca atinge stop loss-ul
      if(bid==ClosePrice)
         {
          CloseAllPositions();// inchide toate pozitiile cand
          
          }
          
      }
      
}

//Complementare_BUY_SELL
void Complementare_Buy_Sell()
{
static double NextBuyPrice,NextSellPrice;
  
         double ask =NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
         double bid =NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
         //sort
         ArraySetAsSeries(PriceInfo,true);
         int PriceData= CopyRates(_Symbol,_Period,0,3,PriceInfo);
 
 
         if(PositionsTotal()==0)
         {NextBuyPrice=0;
         NextSellPrice=0;
         }
   
         signal=CheckEntrySignal();
   
         if(ask>=NextBuyPrice)
         {
          if(signal=="buy")
            {
         double Lots=CalculateLots(InpLots);
         trade.Buy(Lots,NULL,ask,0,0,NULL);
         NextBuyPrice=ask+InpStepC*_Point;
         TotalBuyPositions++;
            }
         }
         if((bid<=NextSellPrice) || NextSellPrice==0)
  
         if(signal=="sell")
         {
         double Lots=CalculateLots(InpLots);
         trade.Sell(Lots,NULL,bid,0,0,NULL);
         NextSellPrice=bid-InpStepC*_Point;
         TotalSellPositions++;
         }
  
         Comment("Ask",ask,"\n","NextBuyPrice: ",NextBuyPrice);
         Comment("Bid",bid,"\n","NextBuyPrice: ",NextSellPrice);
      
    
      int OpenBuySellTrades=PositionBuyNumber+PositionSellNumber;

      //buy positons
   if(TotalBuyPositions>=4)
   {
   
   int totalPositions = PositionsTotal();
   double RangeBuyPrice = 0.0; // Initialize with a default value
   
   
   

      for (int i = OpenBuySellTrades; i<OpenBuySellTrades+totalPositions+3; i++) //testat optim??? putem si mai departe aprox 180 de complementari
      { 
     
         if (PositionSelectByTicket(i)) 
         {
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) 
               {
                  
                  RangeBuyPrice = NormalizeDouble(PositionGetDouble(POSITION_PRICE_OPEN),_Digits);
                 
               }
             
         }
         
      }
   
   double CloseBuyPrice=RangeBuyPrice-InpStopLoss*_Point; //calculeaza nivelul de stop loss
   
      // daca atinge stop loss-ul
      if(ask<=CloseBuyPrice)
         {
         
          CloseBuyPositions();// inchide toate pozitiile cand
          TotalBuyPositions=0;
         
          }
          
      }
       
       ///sell posiitons
       if(TotalSellPositions>=4)
   {
   
   int totalPositions = PositionsTotal();
   double RangeSellPrice = 0.0; // Initialize with a default value
   
   
   int OpenBuySellTrades=PositionSellNumber+PositionBuyNumber;

      for (int i = OpenBuySellTrades; i<OpenBuySellTrades+totalPositions+3; i++) //testat optim??? putem si mai departe aprox 180 de complementari
      { 
      
         if (PositionSelectByTicket(i)) 
         {
            if (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) 
               {
                  
                  RangeSellPrice = NormalizeDouble(PositionGetDouble(POSITION_PRICE_OPEN),_Digits);
                 
               }
             
         }
         
      }

   double CloseSellPrice=RangeSellPrice+InpStopLoss*_Point; //calculeaza nivelul de stop loss
   

      // daca atinge stop loss-ul
      if(bid>=CloseSellPrice)
         {
          CloseSellPositions();// inchide toate pozitiile cand
          TotalSellPositions=0;
          }
          
      }

}
