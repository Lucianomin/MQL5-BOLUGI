//+------------------------------------------------------------------+
//|                                                                  |
//|                    Copyright 2023, BOLUGI                        |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "MindaLucian"
#property link      "MindaLucian"
#property version   "25.00"
#property description " "
#property description "X-Close all positions on Bolugi."
#property description "S-Close all posiitons on all instruments."
#property description "H-Half the volumes on Bolugi."
#property description "Send Notifications pt TP All & SL All"
#property description "TP MUltiplicator."
#property description "Note: The InpDate is used in Chronological order."
//+------------------------------------------------------------------+
//| Includes                                                         |
//+------------------------------------------------------------------+
#include <Trade/Trade.mqh>

//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
input group "----------------------------->General Inputs<-----------------------------";

input long InpMagicNumber=181105;
enum TRADING_INSTRUMENT
  {
   TRADING_FOREX,
   TRADING_INDICES,
   TRADING_COMMODITIES,
   TRADING_CRYPTO
  };
enum LOT_MODE_ENUM
  {
   LOT_MODE_FIXED,
   LOT_MODE_PERCENT,
   LOT_MODE_MONEY

  };
enum STOP_LOSS_ENUM
  {
   STOP_LOSS_NONE,
   STOP_LOSS_PERCENT,
   STOP_LOSS_MONEY
  };
enum TAKE_PROFIT_ENUM
  {
   TAKE_PROFIT_NONE,
   TAKE_PROFIT_PERCENT,
   TAKE_PROFIT_MONEY
  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
input group "----------------------------->Tip Robot<--------------------------------";
enum BOLUGI_MODE
  {
   BOLUGI_LONG_SHORT
  };
input BOLUGI_MODE InpBotMode= BOLUGI_LONG_SHORT; //BOLUGI_MODE
input TRADING_INSTRUMENT InpTradingInstrument=TRADING_INDICES;
input LOT_MODE_ENUM InpLotMode = LOT_MODE_FIXED; //Lot Mode
input double InpLots=0.01; //fixed/additional lots/percent
input double InpLotAddition=0.01;
input double InpNumberComplementareAddition=3;
input group "---------------------------->Time Filter<------------------------------";
input bool InpTimeFilter=true;
input int InpTimeStartHour = 7;
input int InpTimeStartMin  = 0;
input int InpTimeEndHour   = 12;
input int InpTimeEndMin    = 0;
input double InpMaxDrawdownAllowed = 25; //Money <= CLOSE
//input group "---->Comision<----";
//input double InpComisionLot=7.0;
input group "----------------------------->News Filter<-------------------------------";
input group "-------------->Date1"
input bool InpDateYear1=false;//False - All Day
input datetime InpDate1=D'01.01.2004';
input string InpStopTimeDate1="15:45";
input string InpRestartTimeDate1="18:00";
input group "-------------->Date2"
input bool InpDateYear2=false;//False - All Day
input datetime InpDate2=D'01.01.2004';
input string InpStopTimeDate2="15:45";
input string InpRestartTimeDate2="18:00";
input group "-------------->Date3"
input bool InpDateYear3=false;//False - All Day
input datetime InpDate3=D'01.01.2004';
input string InpStopTimeDate3="15:45";
input string InpRestartTimeDate3="18:00";
input group "-------------->Date4"
input bool InpDateYear4=false;//False - All Day
input datetime InpDate4=D'01.01.2004';
input string InpStopTimeDate4="15:45";
input string InpRestartTimeDate4="18:00";
input group "-------------->Date5"
input bool InpDateYear5=false;//False - All Day
input datetime InpDate5=D'01.01.2004';
input string InpStopTimeDate5="15:45";
input string InpRestartTimeDate5="18:00";
input group "-------------->Date6"
input bool InpDateYear6=false;//False - All Day
input datetime InpDate6=D'01.01.2004';
input string InpStopTimeDate6="15:45";
input string InpRestartTimeDate6="18:00";
input group "-------------->Date7"
input bool InpDateYear7=false;//False - All Day
input datetime InpDate7=D'01.01.2004';
input string InpStopTimeDate7="15:45";
input string InpRestartTimeDate7="18:00";
input group "-------------->Date8"
input bool InpDateYear8=false;//False - All Day
input datetime InpDate8=D'01.01.2004';
input string InpStopTimeDate8="15:45";
input string InpRestartTimeDate8="18:00";
input group "-------------->Date9"
input bool InpDateYear9=false;//False - All Day
input datetime InpDate9=D'01.01.2004';
input string InpStopTimeDate9="15:45";
input string InpRestartTimeDate9="18:00";
input group "-------------->Date10"
input bool InpDateYear10=false;//False - All Day
input datetime InpDate10=D'01.01.2004';
input string InpStopTimeDate10="15:45";
input string InpRestartTimeDate10="18:00";
input group "-------------->Date11"
input bool InpDateYear11=false;//False - All Day
input datetime InpDate11=D'01.01.2004';
input string InpStopTimeDate11="15:45";
input string InpRestartTimeDate11="18:00";
input group "-------------->Date12"
input bool InpDateYear12=false;//False - All Day
input datetime InpDate12=D'01.01.2004';
input string InpStopTimeDate12="15:45";
input string InpRestartTimeDate12="18:00";
input group "-------------->Date13"
input bool InpDateYear13=false;//False - All Day
input datetime InpDate13=D'01.01.2004';
input string InpStopTimeDate13="15:45";
input string InpRestartTimeDate13="18:00";
input group "-------------->Date14"
input bool InpDateYear14=false;//False - All Day
input datetime InpDate14=D'01.01.2004';
input string InpStopTimeDate14="15:45";
input string InpRestartTimeDate14="18:00";
input group "-------------->Date15"
input bool InpDateYear15=false;//False - All Day
input datetime InpDate15=D'01.01.2004';
input string InpStopTimeDate15="15:45";
input string InpRestartTimeDate15="18:00";
input group "-------------->Date16"
input bool InpDateYear16=false;//False - All Day
input datetime InpDate16=D'01.01.2004';
input string InpStopTimeDate16="15:45";
input string InpRestartTimeDate16="18:00";
input group "-------------->Date17"
input bool InpDateYear17=false;//False - All Day
input datetime InpDate17=D'01.01.2004';
input string InpStopTimeDate17="15:45";
input string InpRestartTimeDate17="18:00";
input group "-------------->Date18"
input bool InpDateYear18=false;//False - All Day
input datetime InpDate18=D'01.01.2004';
input string InpStopTimeDate18="15:45";
input string InpRestartTimeDate18="18:00";
input group "-------------->Date19"
input bool InpDateYear19=false;//False - All Day
input datetime InpDate19=D'01.01.2004';
input string InpStopTimeDate19="15:45";
input string InpRestartTimeDate19="18:00";
input group "-------------->Date20"
input bool InpDateYear20=false;//False - All Day
input datetime InpDate20=D'01.01.2004';
input string InpStopTimeDate20="15:45";
input string InpRestartTimeDate20="18:00";
input group "---------------------------->Notifications<------------------------------";
input bool InpNotifications=true;
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
input group "--------------------------->MaxStopLossAll<--------------------------------";
input STOP_LOSS_ENUM InpStopLossMode=STOP_LOSS_NONE;//StopLossAll Mode(None/Money/Percent of Balance)
input double InpStopLossAll=100;//MaxStopLossAll(Percent of Balance/Money)*See Above
input bool InpStopAfterLoss=false;//Stop after the MasStopLossAll Hit(ReStart on TimeF Settings)
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
input group "---------------------------->MaxProfitAll<----------------------------------";
input TAKE_PROFIT_ENUM InpTakeProfitMode=TAKE_PROFIT_NONE; //True-activate ProfitAll/ False-Dezactivate
input double InpTakeProfitAll=150; //TakeProfitAll(dollars/euros)(Profit>=Input=>CloseAllPositions)
input bool InpStopAfterTakeProfit=false;
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+

//input group "---->Range Inputs(Complementare-LONG)<----";
int InpStopLoss=100; // InpStopLoss (pips / percent)
int InpStepC=100; // InpStepC (pips)
bool InpTrailMode=false; //TrailMode (true/false)
int InpTrailStop=20; //InpTrailStop (pips)
//input group "--NumarComplemenatri(LONG)--";
int InpNumberComplementariLong=3; //1 sau 2 sau 3
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
input group "------------------------->Range Inputs(Mediere-LONG)<---------------------------";
input int InpRangeM=1000;//InpRangeM (pips)
input double InpZTP=2;//InpZTP (pips)(InpDistTakeProfit/ZTP, ZTP>=1)
input int InpDistTakeProfit=150;//InpDistTakeProfit (pips)
input bool InpTPMode=true; //Multiplicator(true/false)
input double InpTPMultiplicator=1.1;//InpTPMultiplicator
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
//group "---->(Mediere-LONG), FIBONACCI LEVELS<----";
bool InpLevel1=true;
bool InpLevel2=true;
bool InpLevel3=true;
bool InpLevel4=true;
bool InpLevel5=true;
bool InpLevel6=true;
bool InpLevel7=true;
bool InpLevel8=true;
bool InpLevel9=true;
bool InpLevel10=true;
bool InpLevel11=true;
bool InpLevel12=true;
bool InpLevel13=true;
bool InpLevel14=true;
bool InpLevel15=true;
bool InpLevel16=true;
bool InpLevel17=true;
bool InpLevel18=true;
bool InpLevel19=true;
//input group "---->Range Inputs(Complementare-SHORT)<----";

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int InpStopLossS=100; // InpStopLoss (pips / percent)
int InpStepCS=100; // InpStepC (pips)
bool InpTrailModeS=false; //TrailMode (true/false)
int InpTrailStopS=20; //InpTrailStop (pips)
//input group "--NumarComplemenatri(SHORT)--";
int InpNumberComplementariShort=3;// 1 sau 2 sau 3
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
input group "------------------------>Range Inputs(Mediere-SHORT)<----------------------";
input int InpRangeMS=1000;//InpRangeM (pips)
input double InpZTPS=2;//InpZTP (pips)(InpDistTakeProfit/ZTP, ZTP>=1)
input int InpDistTakeProfitS=150;//InpDistTakeProfit (pips)
input bool InpTPSMode=true; //Multiplicator(true/false)
input double InpTPSMultiplicator=1.1;//InpTPMultiplicator
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
//input group "---->(Mediere-SHORT), FIBONACCI LEVELS<----";
bool InpLevel1S=true;
bool InpLevel2S=true;
bool InpLevel3S=true;
bool InpLevel4S=true;
bool InpLevel5S=true;
bool InpLevel6S=true;
bool InpLevel7S=true;
bool InpLevel8S=true;
bool InpLevel9S=true;
bool InpLevel10S=true;
bool InpLevel11S=true;
bool InpLevel12S=true;
bool InpLevel13S=true;
bool InpLevel14S=true;
bool InpLevel15S=true;
bool InpLevel16S=true;
bool InpLevel17S=true;
bool InpLevel18S=true;
bool InpLevel19S=true;


//+------------------------------------------------------------------+
//| Global D                                                        |
//+------------------------------------------------------------------+
MqlTick prevTick, lastTick;
#define KEY_X 88
#define KEY_E 69
#define KEY_H 72
#define KEY_S 83

CTrade trade;

int      ContorM=0;
bool     medierebuy=false;
bool     complementarebuy=false;

bool     medieresell=false;
bool     complementaresell=true;
//LEVEL MEDIERE BUY
bool Level1=false,
     Level2=false,
     Level3=false,
     Level4=false,
     Level5=false,
     Level6=false,
     Level7=false,
     Level8=false,
     Level9=false,
     Level10=false,
     Level11=false,
     Level12=false,
     Level13=false,
     Level14=false,
     Level15=false,
     Level16=false,
     Level17=false,
     Level18=false,
     Level19=false,
     Level20=false;
//LEVELE MEDIERE SELL
bool LevelS1=false,
     LevelS2=false,
     LevelS3=false,
     LevelS4=false,
     LevelS5=false,
     LevelS6=false,
     LevelS7=false,
     LevelS8=false,
     LevelS9=false,
     LevelS10=false,
     LevelS11=false,
     LevelS12=false,
     LevelS13=false,
     LevelS14=false,
     LevelS15=false,
     LevelS16=false,
     LevelS17=false,
     LevelS18=false,
     LevelS19=false,
     LevelS20=false;
//TICKET BUY
ulong    TicketNumber=-1;
ulong    TicketNumber1=-1;
//TICKET SELL
ulong    TicketNumberS=-1;
ulong    TicketNumberS1=-1;
//VAriable LONG
double RangeMB0=0.0;
int CONTOR=0;
int contorTPB=0;
int contorTP1=0;
//VARIABLE SHORT
double RangeMS0=0.0;
int CONTORS=0;
int contorTPS=0;
int contorTP=0;
//+------------------------------------------------------------------+
//+VOLUME                                           |
//+------------------------------------------------------------------+
double Lots=0.0,
       Lots1=0.0,
       Lots2=0.0,
       Lots3=0.0,
       Lots4=0.0,
       Lots5=0.0,
       Lots6=0.0,
       Lots7=0.0,
       Lots8=0.0,
       Lots9=0.0,
       Lots10=0.0,
       Lots11=0.0,
       Lots12=0.0,
       Lots13=0.0,
       Lots14=0.0,
       Lots15=0.0,
       Lots16=0.0,
       Lots17=0.0,
       Lots18=0.0,
       Lots19=0.0,
       Lots20=0.0;
double LotsS=0.0,
       Lots1S=0.0,
       Lots2S=0.0,
       Lots3S=0.0,
       Lots4S=0.0,
       Lots5S=0.0,
       Lots6S=0.0,
       Lots7S=0.0,
       Lots8S=0.0,
       Lots9S=0.0,
       Lots10S=0.0,
       Lots11S=0.0,
       Lots12S=0.0,
       Lots13S=0.0,
       Lots14S=0.0,
       Lots15S=0.0,
       Lots16S=0.0,
       Lots17S=0.0,
       Lots18S=0.0,
       Lots19S=0.0,
       Lots20S=0.0;

//LOSS BUUY
double  Loss1=0.0,
        Loss2=0.0,
        Loss3=0.0,
        Loss4=0.0,
        Loss5=0.0,
        Loss6=0.0,
        Loss7=0.0,
        Loss8=0.0,
        Loss9=0.0,
        Loss10=0.0,
        Loss11=0.0,
        Loss12=0.0,
        Loss13=0.0,
        Loss14=0.0,
        Loss15=0.0,
        Loss16=0.0,
        Loss17=0.0,
        Loss18=0.0,
        Loss19=0.0,
        Loss20=0.0;

//LOSS SELL
double Loss1S=0.0,
       Loss2S=0.0,
       Loss3S=0.0,
       Loss4S=0.0,
       Loss5S=0.0,
       Loss6S=0.0,
       Loss7S=0.0,
       Loss8S=0.0,
       Loss9S=0.0,
       Loss10S=0.0,
       Loss11S=0.0,
       Loss12S=0.0,
       Loss13S=0.0,
       Loss14S=0.0,
       Loss15S=0.0,
       Loss16S=0.0,
       Loss17S=0.0,
       Loss18S=0.0,
       Loss19S=0.0,
       Loss20S=0.0;

//VOLUME BUY
double   Vl1=0.0,
         Vl2=0.0,
         Vl3=0.0,
         Vl4=0.0,
         Vl5=0.0,
         Vl6=0.0,
         Vl7=0.0,
         Vl8=0.0,
         Vl9=0.0,
         Vl10=0.0,
         Vl11=0.0,
         Vl12=0.0,
         Vl13=0.0,
         Vl14=0.0,
         Vl15=0.0,
         Vl16=0.0,
         Vl17=0.0,
         Vl18=0.0,
         Vl19=0.0,
         Vl20=0.0;

//VOLUME SELL
double Vl1S=0.0,
       Vl2S=0.0,
       Vl3S=0.0,
       Vl4S=0.0,
       Vl5S=0.0,
       Vl6S=0.0,
       Vl7S=0.0,
       Vl8S=0.0,
       Vl9S=0.0,
       Vl10S=0.0,
       Vl11S=0.0,
       Vl12S=0.0,
       Vl13S=0.0,
       Vl14S=0.0,
       Vl15S=0.0,
       Vl16S=0.0,
       Vl17S=0.0,
       Vl18S=0.0,
       Vl19S=0.0,
       Vl20S=0.0;

//PRICELEVELS BUY
double PL1,
       PL2,
       PL3,
       PL4,
       PL5,
       PL6,
       PL7,
       PL8,
       PL9,
       PL10,
       PL11,
       PL12,
       PL13,
       PL14,
       PL15,
       PL16,
       PL17,
       PL18,
       PL19,
       PL20;
//PRICELEVELS SELL
double   PL1S,
         PL2S,
         PL3S,
         PL4S,
         PL5S,
         PL6S,
         PL7S,
         PL8S,
         PL9S,
         PL10S,
         PL11S,
         PL12S,
         PL13S,
         PL14S,
         PL15S,
         PL16S,
         PL17S,
         PL18S,
         PL19S,
         PL20S;
//ADDITION LONG
double Addition1 = 0.0;
double Addition2 = 0.0;
double Addition3 = 0.0;
double Addition4 = 0.0;
double Addition5 = 0.0;
double Addition6 = 0.0;
double Addition7 = 0.0;
double Addition8 = 0.0;
double Addition9 = 0.0;
double Addition10 = 0.0;
double Addition11 = 0.0;
double Addition12 = 0.0;
double Addition13 = 0.0;
double Addition14 = 0.0;
double Addition15 = 0.0;
double Addition16 = 0.0;
double Addition17 = 0.0;
double Addition18 = 0.0;
double Addition19 = 0.0;
double Addition20 = 0.0;
//ADDITION SHORT
double Addition1S = 0.0;
double Addition2S = 0.0;
double Addition3S = 0.0;
double Addition4S = 0.0;
double Addition5S = 0.0;
double Addition6S = 0.0;
double Addition7S = 0.0;
double Addition8S = 0.0;
double Addition9S = 0.0;
double Addition10S = 0.0;
double Addition11S = 0.0;
double Addition12S = 0.0;
double Addition13S = 0.0;
double Addition14S = 0.0;
double Addition15S = 0.0;
double Addition16S = 0.0;
double Addition17S = 0.0;
double Addition18S = 0.0;
double Addition19S = 0.0;
double Addition20S = 0.0;


int decimalPlace=2;
//LONG VARIABLEs
double TZ=InpDistTakeProfit/InpZTP*_Point;
double TZ1=TZ*InpTPMultiplicator;
double TZ2=TZ1*InpTPMultiplicator;
double TZ3=TZ2*InpTPMultiplicator;
double TZ4=TZ3*InpTPMultiplicator;
double TZ5=TZ4*InpTPMultiplicator;
double TZ6=TZ5*InpTPMultiplicator;
double TZ7=TZ6*InpTPMultiplicator;
double TZ8=TZ7*InpTPMultiplicator;
double TZ9=TZ8*InpTPMultiplicator;
double TZ10=TZ9*InpTPMultiplicator;
double TZ11=TZ10*InpTPMultiplicator;
double TZ12=TZ11*InpTPMultiplicator;
double TZ13=TZ12*InpTPMultiplicator;
double TZ14=TZ13*InpTPMultiplicator;
double TZ15=TZ14*InpTPMultiplicator;
double TZ16=TZ15*InpTPMultiplicator;
double TZ17=TZ16*InpTPMultiplicator;
double TZ18=TZ17*InpTPMultiplicator;
double TZ19=TZ18*InpTPMultiplicator;
//TP
double TP1=InpDistTakeProfit;
double TP2=TP1*InpTPMultiplicator;
double TP3=TP2*InpTPMultiplicator;
double TP4=TP3*InpTPMultiplicator;
double TP5=TP4*InpTPMultiplicator;
double TP6=TP5*InpTPMultiplicator;
double TP7=TP6*InpTPMultiplicator;
double TP8=TP7*InpTPMultiplicator;
double TP9=TP8*InpTPMultiplicator;
double TP10=TP9*InpTPMultiplicator;
double TP11=TP10*InpTPMultiplicator;
double TP12=TP11*InpTPMultiplicator;
double TP13=TP12*InpTPMultiplicator;
double TP14=TP13*InpTPMultiplicator;
double TP15=TP14*InpTPMultiplicator;
double TP16=TP15*InpTPMultiplicator;
double TP17=TP16*InpTPMultiplicator;
double TP18=TP17*InpTPMultiplicator;
double TP19=TP18*InpTPMultiplicator;
double TP20=TP19*InpTPMultiplicator;
double step2=(InpStepC/2)*_Point;
double step3=InpStepC*_Point;
double PL0;
//SHORT VARIABLES
double TZS=InpDistTakeProfitS/InpZTPS*_Point;
double TZS1=TZS*InpTPSMultiplicator;
double TZS2=TZS1*InpTPSMultiplicator;
double TZS3=TZS2*InpTPSMultiplicator;
double TZS4=TZS3*InpTPSMultiplicator;
double TZS5=TZS4*InpTPSMultiplicator;
double TZS6=TZS5*InpTPSMultiplicator;
double TZS7=TZS6*InpTPSMultiplicator;
double TZS8=TZS7*InpTPSMultiplicator;
double TZS9=TZS8*InpTPSMultiplicator;
double TZS10=TZS9*InpTPSMultiplicator;
double TZS11=TZS10*InpTPSMultiplicator;
double TZS12=TZS11*InpTPSMultiplicator;
double TZS13=TZS12*InpTPSMultiplicator;
double TZS14=TZS13*InpTPSMultiplicator;
double TZS15=TZS14*InpTPSMultiplicator;
double TZS16=TZS15*InpTPSMultiplicator;
double TZS17=TZS16*InpTPSMultiplicator;
double TZS18=TZS17*InpTPSMultiplicator;
double TZS19=TZS18*InpTPSMultiplicator;
//TPs
double TPS1=InpDistTakeProfitS;
double TPS2=TPS1*InpTPSMultiplicator;
double TPS3=TPS2*InpTPSMultiplicator;
double TPS4=TPS3*InpTPSMultiplicator;
double TPS5=TPS4*InpTPSMultiplicator;
double TPS6=TPS5*InpTPSMultiplicator;
double TPS7=TPS6*InpTPSMultiplicator;
double TPS8=TPS7*InpTPSMultiplicator;
double TPS9=TPS8*InpTPSMultiplicator;
double TPS10=TPS9*InpTPSMultiplicator;
double TPS11=TPS10*InpTPSMultiplicator;
double TPS12=TPS11*InpTPSMultiplicator;
double TPS13=TPS12*InpTPSMultiplicator;
double TPS14=TPS13*InpTPSMultiplicator;
double TPS15=TPS14*InpTPSMultiplicator;
double TPS16=TPS15*InpTPSMultiplicator;
double TPS17=TPS16*InpTPSMultiplicator;
double TPS18=TPS17*InpTPSMultiplicator;
double TPS19=TPS18*InpTPSMultiplicator;
double TPS20=TPS19*InpTPSMultiplicator;
double step2S=(InpStepCS/2)*_Point;
double step3S=InpStepCS*_Point;
double PL0S;
//ROBOT STATUS
bool robotStatus=true ;
bool lossStatus=false;
bool winStatus=false;
bool lossDate1=false;
bool lossDate2=false;
bool lossDate3=false;
bool lossDate4=false;
bool lossDate5=false;
bool lossDate6=false;
bool lossDate7=false;
bool lossDate8=false;
bool lossDate9=false;
bool lossDate10=false;
bool lossDate11=false;
bool lossDate12=false;
bool lossDate13=false;
bool lossDate14=false;
bool lossDate15=false;
bool lossDate16=false;
bool lossDate17=false;
bool lossDate18=false;
bool lossDate19=false;
bool lossDate20=false;

int OnInit()

  {
   if(!CheckInputs())
     {
      return INIT_PARAMETERS_INCORRECT;
     }
   trade.SetExpertMagicNumber(InpMagicNumber);
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {


  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {
   prevTick=lastTick;
   SymbolInfoTick(_Symbol,lastTick);
   datetime LocalTime=TimeLocal();

   MqlDateTime DateTimeStructure,date1,date2,date3,date4,date5,date6,date7,date8,date9,date10,
               date11,date12,date13,date14,date15,date16,date17,date18,date19,date20;
   TimeCurrent(DateTimeStructure);
   DateTimeStructure.sec=0;
   TimeToStruct(LocalTime,DateTimeStructure);
   int DayOfTheYear=DateTimeStructure.day_of_year;

   TimeToStruct(InpDate1,date1);
   TimeToStruct(InpDate2,date2);
   TimeToStruct(InpDate3,date3);
   TimeToStruct(InpDate4,date4);
   TimeToStruct(InpDate5,date5);
   TimeToStruct(InpDate6,date6);
   TimeToStruct(InpDate7,date7);
   TimeToStruct(InpDate8,date8);
   TimeToStruct(InpDate9,date9);
   TimeToStruct(InpDate10,date10);
   TimeToStruct(InpDate11,date11);
   TimeToStruct(InpDate12,date12);
   TimeToStruct(InpDate13,date13);
   TimeToStruct(InpDate14,date14);
   TimeToStruct(InpDate15,date15);
   TimeToStruct(InpDate16,date16);
   TimeToStruct(InpDate17,date17);
   TimeToStruct(InpDate18,date18);
   TimeToStruct(InpDate19,date19);
   TimeToStruct(InpDate20,date20);
   Print(" DayCurrent",DayOfTheYear,"\n");
//Comment("date1 ",date1.day_of_year);
   datetime timeStopDate1=StringToTime(InpStopTimeDate1);
   datetime timeRestartDate1=StringToTime(InpRestartTimeDate1);

   datetime timeStopDate2=StringToTime(InpStopTimeDate2);
   datetime timeRestartDate2=StringToTime(InpRestartTimeDate2);

   datetime timeStopDate3=StringToTime(InpStopTimeDate3);
   datetime timeRestartDate3=StringToTime(InpRestartTimeDate3);

   datetime timeStopDate4=StringToTime(InpStopTimeDate4);
   datetime timeRestartDate4=StringToTime(InpRestartTimeDate4);

   datetime timeStopDate5=StringToTime(InpStopTimeDate5);
   datetime timeRestartDate5=StringToTime(InpRestartTimeDate5);

   datetime timeStopDate6=StringToTime(InpStopTimeDate6);
   datetime timeRestartDate6=StringToTime(InpRestartTimeDate6);

   datetime timeStopDate7=StringToTime(InpStopTimeDate7);
   datetime timeRestartDate7=StringToTime(InpRestartTimeDate7);

   datetime timeStopDate8=StringToTime(InpStopTimeDate8);
   datetime timeRestartDate8=StringToTime(InpRestartTimeDate8);

   datetime timeStopDate9=StringToTime(InpStopTimeDate9);
   datetime timeRestartDate9=StringToTime(InpRestartTimeDate9);

   datetime timeStopDate10=StringToTime(InpStopTimeDate10);
   datetime timeRestartDate10=StringToTime(InpRestartTimeDate10);

   datetime timeStopDate11 = StringToTime(InpStopTimeDate11);
   datetime timeRestartDate11 = StringToTime(InpRestartTimeDate11);

   datetime timeStopDate12 = StringToTime(InpStopTimeDate12);
   datetime timeRestartDate12 = StringToTime(InpRestartTimeDate12);

   datetime timeStopDate13 = StringToTime(InpStopTimeDate13);
   datetime timeRestartDate13 = StringToTime(InpRestartTimeDate13);

   datetime timeStopDate14 = StringToTime(InpStopTimeDate14);
   datetime timeRestartDate14 = StringToTime(InpRestartTimeDate14);

   datetime timeStopDate15 = StringToTime(InpStopTimeDate15);
   datetime timeRestartDate15 = StringToTime(InpRestartTimeDate15);

   datetime timeStopDate16 = StringToTime(InpStopTimeDate16);
   datetime timeRestartDate16 = StringToTime(InpRestartTimeDate16);

   datetime timeStopDate17 = StringToTime(InpStopTimeDate17);
   datetime timeRestartDate17 = StringToTime(InpRestartTimeDate17);

   datetime timeStopDate18 = StringToTime(InpStopTimeDate18);
   datetime timeRestartDate18 = StringToTime(InpRestartTimeDate18);

   datetime timeStopDate19 = StringToTime(InpStopTimeDate19);
   datetime timeRestartDate19 = StringToTime(InpRestartTimeDate19);

   datetime timeStopDate20 = StringToTime(InpStopTimeDate20);
   datetime timeRestartDate20 = StringToTime(InpRestartTimeDate20);

//TIMEFILTER

   DateTimeStructure.hour=InpTimeStartHour;
   DateTimeStructure.min=InpTimeStartMin;
   datetime timeStart=StructToTime(DateTimeStructure);

   DateTimeStructure.hour=InpTimeEndHour;
   DateTimeStructure.min=InpTimeEndMin;
   datetime timeEnd=StructToTime(DateTimeStructure);
   bool isTime = TimeCurrent() >timeStart && TimeCurrent() <timeEnd; //se afla in range
   if(lossStatus==true)
     {
      if(TimeCurrent()>timeEnd)
        {
         lossStatus=false;
        }
     }
   if(winStatus==true)
     {
      if(TimeCurrent()>timeEnd)
        {
         winStatus=false;
        }
     }
     Print("winStatus",winStatus);
   if(InpTimeFilter==true)
     {
      if(isTime==true && lossStatus==false && winStatus==false)
        {
         robotStatus=true;
         if(InpBotMode==BOLUGI_LONG_SHORT)
           {
            Bolugi_Long_Short();
           }
        }
      //Day of the Year Filter
      //Date1 Filter
      if(InpDateYear1==true && DayOfTheYear==date1.day_of_year)
        {

         if(TimeCurrent() > timeStopDate1 && lossDate1==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date1");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossDate1=true;
               lossDate5=false;
               lossStatus=true;
              }

           }
         if(TimeCurrent()>timeRestartDate1)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
               winStatus=false;
              }
            // }
           }
        }

      //Date2 news filter
      if(InpDateYear2==true && DayOfTheYear==date2.day_of_year)
        {
         if(TimeCurrent() > timeStopDate2 && lossDate2==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date2");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossStatus=true;
               lossDate2=true;
               //lossMonday=false;
               lossDate1=false;

              }
           }
         if(TimeCurrent()>timeRestartDate2)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
               winStatus=false;
              }
            // }
           }
        }
      //Date3
      if(InpDateYear3==true && DayOfTheYear==date3.day_of_year)
        {
         if(TimeCurrent() > timeStopDate3 && lossDate3==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date3");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossStatus=true;
               lossDate3=true;
               lossDate2=false;

              }
           }
         if(TimeCurrent()>timeRestartDate3)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }
            // }
           }
        }
      //Date4 news filter
      if(InpDateYear4==true && DayOfTheYear==date4.day_of_year)
        {
         if(TimeCurrent() > timeStopDate4 && lossDate4==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date4");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossDate4=true;
               lossDate3=false;
               lossStatus=true;
              }
           }
         if(TimeCurrent()>timeRestartDate4)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }
            // }
           }
        }
      //Date5 news filter
      if(InpDateYear5==true && DayOfTheYear==date5.day_of_year)
        {
         if(TimeCurrent() > timeStopDate5 && lossDate5==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date5");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossDate5=true;
               lossDate4=false;
               lossStatus=true;
              }
           }
         if(TimeCurrent()>timeRestartDate5)
           {

            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }

           }
        }
      //Date6 news filter
      if(InpDateYear6==true && DayOfTheYear==date6.day_of_year)
        {
         if(TimeCurrent() > timeStopDate6 && lossDate6==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date6");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossDate6=true;
               lossDate10=false;
               lossStatus=true;
              }
           }
         if(TimeCurrent()>timeRestartDate6)
           {

            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }

           }
        }
      //Date7 news filter
      if(InpDateYear7==true && DayOfTheYear==date7.day_of_year)
        {
         if(TimeCurrent() > timeStopDate7 && lossDate7==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date7");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossStatus=true;
               lossDate7=true;
               //lossMonday=false;
               lossDate6=false;

              }
           }
         if(TimeCurrent()>timeRestartDate7)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }
            // }
           }
        }
      //Date8
      if(InpDateYear8==true && DayOfTheYear==date8.day_of_year)
        {
         if(TimeCurrent() > timeStopDate8 && lossDate8==false) //2>8 4>8 8>8
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date8");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossStatus=true;
               lossDate8=true;
               lossDate7=false;

              }
           }
         if(TimeCurrent()>timeRestartDate8)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }
            // }
           }
        }
      //Date9 news filter
      if(InpDateYear9==true && DayOfTheYear==date9.day_of_year)
        {
         if(TimeCurrent() > timeStopDate9 && lossDate9==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date9");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossDate9=true;
               lossDate8=false;
               lossStatus=true;
              }
           }
         if(TimeCurrent()>timeRestartDate9)
           {
            //if(lossStatus==true)
            //{
            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }
            // }
           }
        }
      //Date10 news filter
      if(InpDateYear10==true && DayOfTheYear==date10.day_of_year)
        {
         if(TimeCurrent() > timeStopDate10 && lossDate10==false) //2>3 4>3 8>3
           {
            if(InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date10");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               //Stop Robot
               robotStatus=false;
               lossDate10=true;
               lossDate9=false;
               lossStatus=true;
              }
           }
         if(TimeCurrent()>timeRestartDate10)
           {

            if(InpBotMode==BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus=false;
              }

           }
        }
      //Date11 filter
      if(InpDateYear11 == true && DayOfTheYear == date11.day_of_year)
        {
         if(TimeCurrent() > timeStopDate11 && lossDate11 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date11");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate11 = true;
               lossDate20 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate11)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date12 Filter
      if(InpDateYear12 == true && DayOfTheYear == date12.day_of_year)
        {
         if(TimeCurrent() > timeStopDate12 && lossDate12 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date12");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate12 = true;
               lossDate11 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate12)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date13 Filter
      if(InpDateYear13 == true && DayOfTheYear == date13.day_of_year)
        {
         if(TimeCurrent() > timeStopDate13 && lossDate13 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date13");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate13 = true;
               lossDate12 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate13)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date14 Filter
      if(InpDateYear14 == true && DayOfTheYear == date14.day_of_year)
        {
         if(TimeCurrent() > timeStopDate14 && lossDate14 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date14");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate14 = true;
               lossDate13 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate14)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date15 Filter
      if(InpDateYear15 == true && DayOfTheYear == date15.day_of_year)
        {
         if(TimeCurrent() > timeStopDate15 && lossDate15 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date15");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate15 = true;
               lossDate14 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate15)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date16 FIlter
      if(InpDateYear16 == true && DayOfTheYear == date16.day_of_year)
        {
         if(TimeCurrent() > timeStopDate16 && lossDate16 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date16");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate16 = true;
               lossDate15 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate16)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date17 Filter
      if(InpDateYear17 == true && DayOfTheYear == date17.day_of_year)
        {
         if(TimeCurrent() > timeStopDate17 && lossDate17 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date17");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate17 = true;
               lossDate16 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate17)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date18 Filter
      if(InpDateYear18 == true && DayOfTheYear == date18.day_of_year)
        {
         if(TimeCurrent() > timeStopDate18 && lossDate18 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date18");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate18 = true;
               lossDate17 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate18)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date19 TimeFIlter
      if(InpDateYear19 == true && DayOfTheYear == date19.day_of_year)
        {
         if(TimeCurrent() > timeStopDate19 && lossDate19 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date19");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate19 = true;
               lossDate18 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate19)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //Date20 Filter
      if(InpDateYear20 == true && DayOfTheYear == date20.day_of_year)
        {
         if(TimeCurrent() > timeStopDate20 && lossDate20 == false)
           {
            if(InpMaxDrawdownAllowed * (-1) <= AccountInfoDouble(ACCOUNT_PROFIT))
              {
               Print("Am inchis in Date20");
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR = 0;
               medierebuy = false;
               Level1 = false;
               Level2 = false;
               Level3 = false;
               Level4 = false;
               Level5 = false;
               Level6 = false;
               Level7 = false;
               Level8 = false;
               Level9 = false;
               Level10 = false;
               Level11 = false;
               Level12 = false;
               Level13 = false;
               Level14 = false;
               Level15 = false;
               Level16 = false;
               Level17 = false;
               Level18 = false;
               Level19 = false;
               Level20 = false;
               CONTORS = 0;
               medieresell = false;
               LevelS1 = false;
               LevelS2 = false;
               LevelS3 = false;
               LevelS4 = false;
               LevelS5 = false;
               LevelS6 = false;
               LevelS7 = false;
               LevelS8 = false;
               LevelS9 = false;
               LevelS10 = false;
               LevelS11 = false;
               LevelS12 = false;
               LevelS13 = false;
               LevelS14 = false;
               LevelS15 = false;
               LevelS16 = false;
               LevelS17 = false;
               LevelS18 = false;
               LevelS19 = false;
               LevelS20 = false;
               // Stop Robot
               robotStatus = false;
               lossDate20 = true;
               lossDate19 = false;
               lossStatus = true;
              }
           }
         if(TimeCurrent() > timeRestartDate20)
           {
            if(InpBotMode == BOLUGI_LONG_SHORT)
              {
               Bolugi_Long_Short();
               lossStatus = false;
              }
           }
        }
      //time filter
      //Comment(AccountInfoDouble(ACCOUNT_PROFIT));
      if(isTime==false && InpMaxDrawdownAllowed*(-1)<=AccountInfoDouble(ACCOUNT_PROFIT))
        {
         //Close Positions
         CloseBuyPositions();
         CloseSellPositions();
         CONTOR=0;
         medierebuy=false;
         Level1=false;
         Level2=false;
         Level3=false;
         Level4=false;
         Level5=false;
         Level6=false;
         Level7=false;
         Level8=false;
         Level9=false;
         Level10=false;
         Level11=false;
         Level12=false;
         Level13=false;
         Level14=false;
         Level15=false;
         Level16=false;
         Level17=false;
         Level18=false;
         Level19=false;
         Level20=false;
         CONTORS=0;
         medieresell=false;
         LevelS1=false;
         LevelS2=false;
         LevelS3=false;
         LevelS4=false;
         LevelS5=false;
         LevelS6=false;
         LevelS7=false;
         LevelS8=false;
         LevelS9=false;
         LevelS10=false;
         LevelS11=false;
         LevelS12=false;
         LevelS13=false;
         LevelS14=false;
         LevelS15=false;
         LevelS16=false;
         LevelS17=false;
         LevelS18=false;
         LevelS19=false;
         LevelS20=false;
         //Stop Robot
         robotStatus=false;

        }

     }
   else
     {
      if(InpBotMode==BOLUGI_LONG_SHORT)
        {
         Bolugi_Long_Short();
        }
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void  OnChartEvent(const int       id,       const long&     lparam,    const double&   dparam,   const string&   sparam)
  {
   if(id==CHARTEVENT_KEYDOWN)
     {
      Print(id, lparam, dparam);
      if(lparam==KEY_X)
        {
         CloseBuyPositions();
         CloseSellPositions();
         CONTOR=0;
         medierebuy=false;
         Level1=false;
         Level2=false;
         Level3=false;
         Level4=false;
         Level5=false;
         Level6=false;
         Level7=false;
         Level8=false;
         Level9=false;
         Level10=false;
         Level11=false;
         Level12=false;
         Level13=false;
         Level14=false;
         Level15=false;
         Level16=false;
         Level17=false;
         Level18=false;
         Level19=false;
         Level20=false;
         CONTORS=0;
         medieresell=false;
         LevelS1=false;
         LevelS2=false;
         LevelS3=false;
         LevelS4=false;
         LevelS5=false;
         LevelS6=false;
         LevelS7=false;
         LevelS8=false;
         LevelS9=false;
         LevelS10=false;
         LevelS11=false;
         LevelS12=false;
         LevelS13=false;
         LevelS14=false;
         LevelS15=false;
         LevelS16=false;
         LevelS17=false;
         LevelS18=false;
         LevelS19=false;
         LevelS20=false;
        }
     }

   if(id==CHARTEVENT_KEYDOWN)
     {
      if(lparam==KEY_S)
        {
         CloseAllPositions();
         CONTOR=0;
         medierebuy=false;
         Level1=false;
         Level2=false;
         Level3=false;
         Level4=false;
         Level5=false;
         Level6=false;
         Level7=false;
         Level8=false;
         Level9=false;
         Level10=false;
         Level11=false;
         Level12=false;
         Level13=false;
         Level14=false;
         Level15=false;
         Level16=false;
         Level17=false;
         Level18=false;
         Level19=false;
         Level20=false;
         CONTORS=0;
         medieresell=false;
         LevelS1=false;
         LevelS2=false;
         LevelS3=false;
         LevelS4=false;
         LevelS5=false;
         LevelS6=false;
         LevelS7=false;
         LevelS8=false;
         LevelS9=false;
         LevelS10=false;
         LevelS11=false;
         LevelS12=false;
         LevelS13=false;
         LevelS14=false;
         LevelS15=false;
         LevelS16=false;
         LevelS17=false;
         LevelS18=false;
         LevelS19=false;
         LevelS20=false;
        }
     }
   if(id==CHARTEVENT_KEYDOWN)
     {
      //Print(lparam);
      if(lparam==KEY_H)
        {
         for(int i=0; i<CountOpenPositions(); i++)
           {
            ulong currticket=PositionGetTicket(i);
            ulong magicnumber=PositionGetInteger(POSITION_MAGIC);
            if(PositionSelectByTicket(currticket))
              {
               if(PositionGetDouble(POSITION_VOLUME)>0.01)
                 {
                  if(InpMagicNumber==magicnumber)
                    {
                     double currvolume=PositionGetDouble(POSITION_VOLUME);
                     double halfvolume=NormalizeDouble((currvolume/2),2);
                     trade.PositionClosePartial(currticket,halfvolume,-1);
                    }
                 }
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| Functions                                                        |
//+------------------------------------------------------------------+
//check for inputs
bool CheckInputs()
  {

   if(InpMagicNumber<=0)
     {
      Alert("Magic Number <=0");
      return false;
     }

   if(InpLotMode==LOT_MODE_FIXED &&(InpLots<=0 || InpLots >10))
     {
      Alert("lots<=0 or lots>10");
      return false;
     }

   if(InpLotMode==LOT_MODE_PERCENT &&(InpLots<=0 || InpLots >5))
     {
      Alert("lots<=0 or lots>5%");
      return false;
     }

   if((InpLotMode==LOT_MODE_PERCENT) && InpStopLoss==0)
     {
      Alert("selected mode needs a stop loss");
      return false;
     }
   if(InpRangeM<=0)
     {
      Alert("Step Mediere lower than 0 pips");
      return false;
     }
   if(InpDistTakeProfit<=0)
     {
      Alert("Distance from TP FIBO to Z lower than 0 ");
      return false;
     }
   if(InpZTP<=0)
     {
      Alert("input ZTp  <=0");
      return false;
     }

   if(InpStepC<=0)
     {
      Alert("InpStepCS <=0");
      return false;
     }
   if(InpRangeMS<=0)
     {
      Alert("Step Mediere lower than 0 pips");
      return false;
     }
   if(InpDistTakeProfitS<=0)
     {
      Alert("Distance from TP FIBO to Z lower than 0 ");
      return false;
     }
   if(InpZTPS<=0)
     {
      Alert("input ZTp  <=0");
      return false;
     }

   if(InpStepCS<=0)
     {
      Alert("InpStepC <=0");
      return false;
     }
   return true;
  }
//close all positions
void CloseAllPositions()
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      //magicnumber
      //ulong magicnumber;
      //PositionGetInteger(POSITION_MAGIC,magicnumber);
      ulong ticket=PositionGetTicket(i);//get ticket
      // if(InpMagicNumber==magicnumber)
      //  {
      trade.PositionClose(ticket,i);//close
      // }
     }

  }
//CloseBuyPos
void CloseBuyPositions()
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      ulong ticket=PositionGetTicket(i);//get ticket
      ulong magicnumber;
      PositionGetInteger(POSITION_MAGIC,magicnumber);
      if(PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY)
        {
         if(InpMagicNumber==magicnumber)
           {
            trade.PositionClose(ticket,i);//close
           }

        }

     }
   CONTOR=0;
  }
//Close Sell Pos
void CloseSellPositions()
  {
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      ulong ticket=PositionGetTicket(i);//get ticket
      ulong magicnumber;
      PositionGetInteger(POSITION_MAGIC,magicnumber);
      if(PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_SELL)
        {
         if(InpMagicNumber==magicnumber)
           {
            trade.PositionClose(ticket,i);//close
           }

        }

     }
   CONTORS=0;
  }

//calculatelots
double CalculateLots(double &lots, double slDistance)
  {

   lots=0.0;
   if(InpLotMode==LOT_MODE_FIXED)
     {
      lots=InpLots;
     }
   else
     {

      double tickSize=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE);
      double tickValue=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_VALUE);
      double volumeStep=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP);

      double riskMoney= InpLotMode==LOT_MODE_MONEY ? InpLots : AccountInfoDouble(ACCOUNT_BALANCE)*InpLots*0.01;
      double moneyVolumeStep= (slDistance/tickSize) * tickValue *volumeStep;

      lots=MathFloor(riskMoney/moneyVolumeStep)*volumeStep;
     }
   if(InpTradingInstrument==TRADING_FOREX)
     {
      lots=NormalizeDouble(lots,2);
     }
   if(InpTradingInstrument==TRADING_INDICES)
     {
      lots=NormalizeDouble(lots,1);
     }
   return lots;

  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
//Bolugi Long_Short function
void Bolugi_Long_Short()
  {
   if(robotStatus==true)
     {
      static double NextBuyPrice,NextSellPrice;

      // double Lots;
      CalculateLots(Lots,InpDistTakeProfit*_Point);

      if(CONTOR==0)
        {
         NextBuyPrice=0;
         if(trade.Buy(Lots,NULL,lastTick.ask,0,0,"COMPLEMENTARE BUY"))
           {
            TicketNumber1=trade.ResultOrder();
            RangeMB0=lastTick.ask;
            CONTOR=1;
            NextBuyPrice=RangeMB0+InpStepC*_Point;
            Alert("BUY 1");
           }
         //Sleep(150);
        }
      //double Lots;
      CalculateLots(LotsS,InpDistTakeProfitS*_Point);
      if(CONTORS==0)
        {
         NextSellPrice=0;
         if(trade.Sell(LotsS,NULL,lastTick.bid,0,0,"COMPLEMENTARE SELL"))
           {
            TicketNumberS1=trade.ResultOrder();
            RangeMS0=lastTick.bid;
            CONTORS=1;
            NextSellPrice=RangeMS0-InpStepC*_Point;
            Alert("SELL 1");
           }
         //Sleep(150);
        }


      //SELECT PL0 FOR BUY
      for(int i=0; i<CountOpenPositions(); i++)
        {
         ulong currTicket=PositionGetTicket(i);
         if(currTicket!=TicketNumber1)
           {
            Print("ticket!=TicketNumber1",currTicket);
           }
         else
           {
            if(!PositionSelectByTicket(TicketNumber1))
              {
               Print("Cannot get ticket number1!");
              }
            else
              {
               PL0=PositionGetDouble(POSITION_PRICE_OPEN);
              }
           }

        }
      //SELECT PLS0 FOR SELL
      for(int i=0; i<CountOpenPositions(); i++)
        {
         ulong currTicket=PositionGetTicket(i);
         if(currTicket!=TicketNumberS1)
           {
            Print("ticket!=TicketNumberS1",currTicket);
           }
         else
           {
            if(!PositionSelectByTicket(TicketNumberS1))
              {
               Print("Cannot get ticket number1!");
              }
            else
              {
               PL0S=PositionGetDouble(POSITION_PRICE_OPEN);
              }
           }

        }

      //+------------------------------------------------------------------+
      //| LEVELE FIBONACCI                                             |
      //+------------------------------------------------------------------+
      //LONG
      if(InpTPMode==true)
        {
         PL1=NormalizeDouble(PL0-((23.6*InpRangeM)/100*_Point+TP1*_Point),_Digits);
         PL2=NormalizeDouble(PL0-((38.2*InpRangeM)/100*_Point+TP2*_Point),_Digits);
         PL3=NormalizeDouble(PL0-((50*InpRangeM)/100*_Point+TP3*_Point),_Digits);
         PL4=NormalizeDouble(PL0-((61.8*InpRangeM)/100*_Point+TP4*_Point),_Digits);
         PL5=NormalizeDouble(PL0-((78.6*InpRangeM)/100*_Point+TP5*_Point),_Digits);
         PL6=NormalizeDouble(PL0-((88.2*InpRangeM)/100*_Point+TP6*_Point),_Digits);
         PL7=NormalizeDouble(PL0-(InpRangeM*_Point+TP7*_Point),_Digits);
         PL8=NormalizeDouble(PL0-((127.2*InpRangeM)/100*_Point+TP8*_Point),_Digits);
         PL9=NormalizeDouble(PL0-((161.8*InpRangeM)/100*_Point+TP9*_Point),_Digits);
         PL10=NormalizeDouble(PL0-((200*InpRangeM)/100*_Point+TP10*_Point),_Digits);
         PL11=NormalizeDouble(PL0-((227.2*InpRangeM)/100*_Point+TP11*_Point),_Digits);
         PL12=NormalizeDouble(PL0-((261.8*InpRangeM)/100*_Point+TP12*_Point),_Digits);
         PL13=NormalizeDouble(PL0-((300*InpRangeM)/100*_Point+TP13*_Point),_Digits);
         PL14=NormalizeDouble(PL0-((327.2*InpRangeM)/100*_Point+TP14*_Point),_Digits);
         PL15=NormalizeDouble(PL0-((361.8*InpRangeM)/100*_Point+TP15*_Point),_Digits);
         PL16=NormalizeDouble(PL0-((400*InpRangeM)/100*_Point+TP16*_Point),_Digits);
         PL17=NormalizeDouble(PL0-((427.2*InpRangeM)/100*_Point+TP17*_Point),_Digits);
         PL18=NormalizeDouble(PL0-((461.8*InpRangeM)/100*_Point+TP18*_Point),_Digits);
         PL19=NormalizeDouble(PL0-((500*InpRangeM)/100*_Point+TP19*_Point),_Digits);
         PL20=NormalizeDouble(PL0-((527.2*InpRangeM)/100*_Point+TP20*_Point),_Digits);
        }
      else
        {
         PL1=NormalizeDouble(PL0-((23.6*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL2=NormalizeDouble(PL0-((38.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL3=NormalizeDouble(PL0-((50*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL4=NormalizeDouble(PL0-((61.8*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL5=NormalizeDouble(PL0-((78.6*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL6=NormalizeDouble(PL0-((88.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL7=NormalizeDouble(PL0-(InpRangeM*_Point+InpDistTakeProfit*_Point),_Digits);
         PL8=NormalizeDouble(PL0-((127.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL9=NormalizeDouble(PL0-((161.8*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL10=NormalizeDouble(PL0-((200*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL11=NormalizeDouble(PL0-((227.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL12=NormalizeDouble(PL0-((261.8*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL13=NormalizeDouble(PL0-((300*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL14=NormalizeDouble(PL0-((327.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL15=NormalizeDouble(PL0-((361.8*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL16=NormalizeDouble(PL0-((400*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL17=NormalizeDouble(PL0-((427.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL18=NormalizeDouble(PL0-((461.8*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL19=NormalizeDouble(PL0-((500*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
         PL20=NormalizeDouble(PL0-((527.2*InpRangeM)/100*_Point+InpDistTakeProfit*_Point),_Digits);
        }
      //SHORT PL0S
      if(InpTPSMode==true)
        {
         PL1S=NormalizeDouble(PL0S+((23.6*InpRangeMS)/100*_Point+TPS1*_Point),_Digits);
         PL2S=NormalizeDouble(PL0S+((38.2*InpRangeMS)/100*_Point+TPS2*_Point),_Digits);
         PL3S=NormalizeDouble(PL0S+((50*InpRangeMS)/100*_Point+TPS3*_Point),_Digits);
         PL4S=NormalizeDouble(PL0S+((61.8*InpRangeMS)/100*_Point+TPS4*_Point),_Digits);
         PL5S=NormalizeDouble(PL0S+((78.6*InpRangeMS)/100*_Point+TPS5*_Point),_Digits);
         PL6S=NormalizeDouble(PL0S+((88.2*InpRangeMS)/100*_Point+TPS6*_Point),_Digits);
         PL7S=NormalizeDouble(PL0S+(InpRangeMS*_Point+TPS7*_Point),_Digits);
         PL8S=NormalizeDouble(PL0S+((127.2*InpRangeMS)/100*_Point+TPS8*_Point),_Digits);
         PL9S=NormalizeDouble(PL0S+((161.8*InpRangeMS)/100*_Point+TPS9*_Point),_Digits);
         PL10S=NormalizeDouble(PL0S+((200*InpRangeMS)/100*_Point+TPS10*_Point),_Digits);
         PL11S=NormalizeDouble(PL0S+((227.2*InpRangeMS)/100*_Point+TPS11*_Point),_Digits);
         PL12S=NormalizeDouble(PL0S+((261.8*InpRangeMS)/100*_Point+TPS12*_Point),_Digits);
         PL13S=NormalizeDouble(PL0S+((300*InpRangeMS)/100*_Point+TPS13*_Point),_Digits);
         PL14S=NormalizeDouble(PL0S+((327.2*InpRangeMS)/100*_Point+TPS14*_Point),_Digits);
         PL15S=NormalizeDouble(PL0S+((361.8*InpRangeMS)/100*_Point+TPS15*_Point),_Digits);
         PL16S=NormalizeDouble(PL0S+((400*InpRangeMS)/100*_Point+TPS16*_Point),_Digits);
         PL17S=NormalizeDouble(PL0S+((427.2*InpRangeMS)/100*_Point+TPS17*_Point),_Digits);
         PL18S=NormalizeDouble(PL0S+((461.8*InpRangeMS)/100*_Point+TPS18*_Point),_Digits);
         PL19S=NormalizeDouble(PL0S+((500*InpRangeMS)/100*_Point+TPS19*_Point),_Digits);
         PL20S=NormalizeDouble(PL0S+((527.2*InpRangeMS)/100*_Point+TPS20*_Point),_Digits);
        }
      else
        {
         PL1S=NormalizeDouble(PL0S+((23.6*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL2S=NormalizeDouble(PL0S+((38.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL3S=NormalizeDouble(PL0S+((50*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL4S=NormalizeDouble(PL0S+((61.8*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL5S=NormalizeDouble(PL0S+((78.6*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL6S=NormalizeDouble(PL0S+((88.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL7S=NormalizeDouble(PL0S+(InpRangeMS*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL8S=NormalizeDouble(PL0S+((127.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL9S=NormalizeDouble(PL0S+((161.8*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL10S=NormalizeDouble(PL0S+((200*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL11S=NormalizeDouble(PL0S+((227.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL12S=NormalizeDouble(PL0S+((261.8*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL13S=NormalizeDouble(PL0S+((300*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL14S=NormalizeDouble(PL0S+((327.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL15S=NormalizeDouble(PL0S+((361.8*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL16S=NormalizeDouble(PL0S+((400*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL17S=NormalizeDouble(PL0S+((427.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL18S=NormalizeDouble(PL0S+((461.8*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL19S=NormalizeDouble(PL0S+((500*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
         PL20S=NormalizeDouble(PL0S+((527.2*InpRangeMS)/100*_Point+InpDistTakeProfitS*_Point),_Digits);
        }


      //LONG FUNCTION
      if(InpTPMode==true)
        {
         Calculate_V1();
         Calculate_V2M();
         Calculate_V3M();
         Calculate_V4M();
         Calculate_V5M();
         Calculate_V6M();
         Calculate_V7M();
         Calculate_V8M();
         Calculate_V9M();
         Calculate_V10M();
         Calculate_V11M();
         Calculate_V12M();
         Calculate_V13M();
         Calculate_V14M();
         Calculate_V15M();
         Calculate_V16M();
         Calculate_V17M();
         Calculate_V18M();
         Calculate_V19M();
         Calculate_V20M();
        }
      else
        {
         Calculate_V1();
         Calculate_V2();
         Calculate_V3();
         Calculate_V4();
         Calculate_V5();
         Calculate_V6();
         Calculate_V7();
         Calculate_V8();
         Calculate_V9();
         Calculate_V10();
         Calculate_V11();
         Calculate_V12();
         Calculate_V13();
         Calculate_V14();
         Calculate_V15();
         Calculate_V16();
         Calculate_V17();
         Calculate_V18();
         Calculate_V19();
         Calculate_V20();
        }
      if(InpTPMode==false)
        {
         TP2=TP1;
         TP3=TP1;
         TP4=TP1;
         TP5=TP1;
         TP6=TP1;
         TP7=TP1;
         TP8=TP1;
         TP9=TP1;
         TP10=TP1;
         TP11=TP1;
         TP12=TP1;
         TP13=TP1;
         TP14=TP1;
         TP15=TP1;
         TP16=TP1;
         TP17=TP1;
         TP18=TP1;
         TP19=TP1;
         TP20=TP1;
        }
      //LOTS COMPLEMEMTARE LONG
      CalculateLots(Lots1,TP1*_Point);
      CalculateLots(Lots2,TP2*_Point);
      CalculateLots(Lots3,TP3*_Point);
      CalculateLots(Lots4,TP4*_Point);
      CalculateLots(Lots5,TP5*_Point);
      CalculateLots(Lots6,TP6*_Point);
      CalculateLots(Lots7,TP7*_Point);
      CalculateLots(Lots8,TP8*_Point);
      CalculateLots(Lots9,TP9*_Point);
      CalculateLots(Lots10,TP10*_Point);
      CalculateLots(Lots11,TP11*_Point);
      CalculateLots(Lots12,TP12*_Point);
      CalculateLots(Lots13,TP13*_Point);
      CalculateLots(Lots14,TP14*_Point);
      CalculateLots(Lots15,TP15*_Point);
      CalculateLots(Lots16,TP16*_Point);
      CalculateLots(Lots17,TP17*_Point);
      CalculateLots(Lots18,TP18*_Point);
      CalculateLots(Lots19,TP19*_Point);
      CalculateLots(Lots20,TP20*_Point);
      //SHORT FUNCITON
      if(InpTPSMode==true)
        {
         Calculate_V1S();
         Calculate_V2MS();
         Calculate_V3MS();
         Calculate_V4MS();
         Calculate_V5MS();
         Calculate_V6MS();
         Calculate_V7MS();
         Calculate_V8MS();
         Calculate_V9MS();
         Calculate_V10MS();
         Calculate_V11MS();
         Calculate_V12MS();
         Calculate_V13MS();
         Calculate_V14MS();
         Calculate_V15MS();
         Calculate_V16MS();
         Calculate_V17MS();
         Calculate_V18MS();
         Calculate_V19MS();
         Calculate_V20MS();
        }
      else
        {
         Calculate_V1S();
         Calculate_V2S();
         Calculate_V3S();
         Calculate_V4S();
         Calculate_V5S();
         Calculate_V6S();
         Calculate_V7S();
         Calculate_V8S();
         Calculate_V9S();
         Calculate_V10S();
         Calculate_V11S();
         Calculate_V12S();
         Calculate_V13S();
         Calculate_V14S();
         Calculate_V15S();
         Calculate_V16S();
         Calculate_V17S();
         Calculate_V18S();
         Calculate_V19S();
         Calculate_V20S();

        }
      if(InpTPSMode==false)
        {
         TPS2=TPS1;
         TPS3=TPS1;
         TPS4=TPS1;
         TPS5=TPS1;
         TPS6=TPS1;
         TPS7=TPS1;
         TPS8=TPS1;
         TPS9=TPS1;
         TPS11=TPS1;
         TPS12=TPS1;
         TPS13=TPS1;
         TPS14=TPS1;
         TPS15=TPS1;
         TPS16=TPS1;
         TPS17=TPS1;
         TPS18=TPS1;
         TPS19=TPS1;
         TPS20=TPS1;
        }
      //LOTS COMPLEMEMTARE SHORT
      CalculateLots(Lots1S,TPS1*_Point);
      CalculateLots(Lots2S,TPS2*_Point);
      CalculateLots(Lots3S,TPS3*_Point);
      CalculateLots(Lots4S,TPS4*_Point);
      CalculateLots(Lots5S,TPS5*_Point);
      CalculateLots(Lots6S,TPS6*_Point);
      CalculateLots(Lots7S,TPS7*_Point);
      CalculateLots(Lots8S,TPS8*_Point);
      CalculateLots(Lots9S,TPS9*_Point);
      CalculateLots(Lots10S,TPS10*_Point);
      CalculateLots(Lots11S,TPS11*_Point);
      CalculateLots(Lots12S,TPS12*_Point);
      CalculateLots(Lots13S,TPS13*_Point);
      CalculateLots(Lots14S,TPS14*_Point);
      CalculateLots(Lots15S,TPS15*_Point);
      CalculateLots(Lots16S,TPS16*_Point);
      CalculateLots(Lots17S,TPS17*_Point);
      CalculateLots(Lots18S,TPS18*_Point);
      CalculateLots(Lots19S,TPS19*_Point);
      CalculateLots(Lots20S,TPS20*_Point);
      //Normalize Indices Volumes
      if(InpTradingInstrument==TRADING_INDICES)
        {
         //Long
         Vl1=NormalizeDouble(Vl1,1);
         Vl2=NormalizeDouble(Vl2,1);
         Vl3=NormalizeDouble(Vl3,1);
         Vl4=NormalizeDouble(Vl4,1);
         Vl5=NormalizeDouble(Vl5,1);
         Vl6=NormalizeDouble(Vl6,1);
         Vl7=NormalizeDouble(Vl7,1);
         Vl8=NormalizeDouble(Vl8,1);
         Vl9=NormalizeDouble(Vl9,1);
         Vl10=NormalizeDouble(Vl10,1);
         Vl11=NormalizeDouble(Vl11,1);
         Vl12=NormalizeDouble(Vl12,1);
         Vl13=NormalizeDouble(Vl13,1);
         Vl14=NormalizeDouble(Vl14,1);
         Vl15=NormalizeDouble(Vl15,1);
         Vl16=NormalizeDouble(Vl16,1);
         Vl17=NormalizeDouble(Vl17,1);
         Vl18=NormalizeDouble(Vl18,1);
         Vl19=NormalizeDouble(Vl19,1);
         Vl20=NormalizeDouble(Vl20,1);
         //Short
         Vl1S = NormalizeDouble(Vl1S, 1);
         Vl2S = NormalizeDouble(Vl2S, 1);
         Vl3S = NormalizeDouble(Vl3S, 1);
         Vl4S = NormalizeDouble(Vl4S, 1);
         Vl5S = NormalizeDouble(Vl5S, 1);
         Vl6S = NormalizeDouble(Vl6S, 1);
         Vl7S = NormalizeDouble(Vl7S, 1);
         Vl8S = NormalizeDouble(Vl8S, 1);
         Vl9S = NormalizeDouble(Vl9S, 1);
         Vl10S = NormalizeDouble(Vl10S, 1);
         Vl11S = NormalizeDouble(Vl11S, 1);
         Vl12S = NormalizeDouble(Vl12S, 1);
         Vl13S = NormalizeDouble(Vl13S, 1);
         Vl14S = NormalizeDouble(Vl14S, 1);
         Vl15S = NormalizeDouble(Vl15S, 1);
         Vl16S = NormalizeDouble(Vl16S, 1);
         Vl17S = NormalizeDouble(Vl17S, 1);
         Vl18S = NormalizeDouble(Vl18S, 1);
         Vl19S = NormalizeDouble(Vl19S, 1);
         Vl20=NormalizeDouble(Vl20S,1);

        }

      //LONG
      Print("PL0  ",PL0);
      Print("PL1  ",PL1);
      Print("PL2  ",PL2);
      Print("PL3  ",PL3);
      Print("PL4  ",PL4);
      Print("PL5  ",PL5);
      Print("PL6  ",PL6);
      Print("PL7  ",PL7);
      Print("PL8  ",PL8);
      Print("PL9  ",PL9);
      Print("PL10  ",PL10);
      Print("PL11  ",PL11);
      Print("PL12  ",PL12);
      Print("PL13  ",PL13);
      Print("PL14  ",PL14);
      Print("PL15  ",PL15);
      Print("PL16  ",PL16);
      Print("PL17  ",PL17);
      Print("PL18  ",PL18);
      Print("PL19  ",PL19);
      Print("PL20  ",PL20);
      //SHORT
      Print("PL0S  ",PL0S);
      Print("PL1S ", PL1S);
      Print("PL2S ", PL2S);
      Print("PL3S ", PL3S);
      Print("PL4S ", PL4S);
      Print("PL5S ", PL5S);
      Print("PL6S ", PL6S);
      Print("PL7S ", PL7S);
      Print("PL8S ", PL8S);
      Print("PL9S ", PL9S);
      Print("PL10S  ",PL10S);
      Print("PL11S ", PL11S);
      Print("PL12S ", PL12S);
      Print("PL13S ", PL13S);
      Print("PL14S ", PL14S);
      Print("PL15S ", PL15S);
      Print("PL16S ", PL16S);
      Print("PL17S ", PL17S);
      Print("PL18S ", PL18S);
      Print("PL19S ", PL19S);
      Print("PL20S ", PL20S);

      if(PL0==0.0)
        {
         Alert("Atentie PL0 e 0.0");
        }

      if(PL0S==0.0)
        {
         Alert("Atentie PLS0 e 0.0");
        }
      //
      CheckAddition();
      //mediere buy
      if(Level1==false && InpLevel1==true) ///LEVEL 1 Fibonacci
        {

         if(lastTick.ask<=PL1)
           {

            if(trade.Buy(Vl1,NULL,lastTick.ask,0,lastTick.ask+TP1*_Point,"Order1 & TP1"))
              {
               Level1=true;
               medierebuy=true;
               //complementarebuy=false;
               TicketNumber=trade.ResultOrder();
               Alert("A intrat mediere 1");
              }
            else
              {
               SendNotification("ERROR, Check Volume!!!");
              }
            if(Level1==true && trade.Sell(Lots+Addition1S,NULL,lastTick.bid,lastTick.ask+TP1*_Point,0,"COMPLEMENTARE SELL"))
              {
               //a deschis poziti
               RangeMS0=lastTick.bid;
               NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
               TicketNumberS=trade.ResultOrder();
               CONTORS++;
               Alert("Ajunge in OPEN SELL");
               //Level1=true;
               medierebuy=true;
              }
           }

        }
      else
         if(Level2==false && InpLevel2==true)///LEVEL 2 Fibonacci
           {
            if(lastTick.ask<=PL2)
              {

               if(trade.Buy(Vl2,NULL,lastTick.ask,0,lastTick.ask+TP2*_Point,"Order2 & TP2"))
                 {
                  medierebuy=true;
                  Level2=true;
                  ContorM=2;
                  TicketNumber=trade.ResultOrder();
                 }
               else
                 {
                  SendNotification("ERROR, Check Volume!!!");
                 }
               if(Level2==true && trade.Sell(Lots+Addition2S,NULL,lastTick.bid,lastTick.ask+TP2*_Point,0,"COMPLEMENTARE SELL"))
                 {
                  //a deschis poziti
                  RangeMS0=lastTick.bid;
                  NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                  TicketNumberS=trade.ResultOrder();
                  CONTORS++;
                  Alert("Ajunge in OPEN SELL");
                  medierebuy=true;
                  //Level2=true;
                 }
              }
           }

         else
            if(Level3==false && InpLevel3==true)///LEVEL 3 Fibonacci
              {

               if(lastTick.ask<=PL3)
                 {

                  if(trade.Buy(Vl3,NULL,lastTick.ask,0,lastTick.ask+TP3*_Point,"Order3 &Tp3"))
                    {
                     medierebuy=true;
                     Level3=true;
                     ContorM=3;
                     TicketNumber=trade.ResultOrder();
                    }
                  else
                    {
                     SendNotification("ERROR, Check Volume!!!");
                    }
                  if(Level3==true &&trade.Sell(Lots+Addition3S,NULL,lastTick.bid,lastTick.ask+TP3*_Point,0,"COMPLEMENTARE SELL"))
                    {
                     //a deschis poziti
                     RangeMS0=lastTick.bid;
                     NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                     TicketNumberS=trade.ResultOrder();
                     CONTORS++;
                     Alert("Ajunge in OPEN SELL");
                     medierebuy=true;
                     //Level3=true;
                    }
                 }

              }
            else
               if(Level4==false && InpLevel4==true)///LEVEL 4 Fibonacci
                 {


                  if(lastTick.ask<=PL4)
                    {

                     if(trade.Buy(Vl4,NULL,lastTick.ask,0,lastTick.ask+TP4*_Point,"Order4 &Tp4"))
                       {
                        medierebuy=true;
                        Level4=true;
                        ContorM=4;
                        TicketNumber=trade.ResultOrder();
                       }
                     else
                       {
                        SendNotification("ERROR, Check Volume!!!");
                       }
                     if(Level4==true &&trade.Sell(Lots+Addition4S,NULL,lastTick.bid,lastTick.ask+TP4*_Point,0,"COMPLEMENTARE SELL"))
                       {
                        //a deschis poziti
                        RangeMS0=lastTick.bid;
                        NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                        TicketNumberS=trade.ResultOrder();
                        CONTORS++;
                        Alert("Ajunge in OPEN SELL");
                        medierebuy=true;
                        //Level4=true;
                       }
                    }

                 }
               else
                  if(Level5==false && InpLevel5==true)///LEVEL 5 Fibonacci
                    {


                     if(lastTick.ask<=PL5)
                       {

                        if(trade.Buy(Vl5,NULL,lastTick.ask,0,lastTick.ask+TP5*_Point,"Order5 &Tp5"))
                          {
                           medierebuy=true;
                           Level5=true;
                           ContorM=5;
                           TicketNumber=trade.ResultOrder();
                          }
                        else
                          {
                           SendNotification("ERROR, Check Volume!!!");
                          }
                        if(Level5==true && trade.Sell(Lots+Addition5S,NULL,lastTick.bid,lastTick.ask+TP5*_Point,0,"COMPLEMENTARE SELL"))
                          {
                           //a deschis poziti
                           RangeMS0=lastTick.bid;
                           NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                           TicketNumberS=trade.ResultOrder();
                           CONTORS++;
                           Alert("Ajunge in OPEN SELL");
                           medierebuy=true;
                           // Level5=true;
                          }
                       }


                    }
                  else
                     if(Level6==false && InpLevel6==true)///LEVEL 6 Fibonacci
                       {

                        if(lastTick.ask<=PL6)
                          {

                           if(trade.Buy(Vl6,NULL,lastTick.ask,0,lastTick.ask+TP6*_Point,"Order6 &Tp6"))
                             {
                              medierebuy=true;
                              Level6=true;
                              ContorM=6;
                              TicketNumber=trade.ResultOrder();
                             }
                           else
                             {
                              SendNotification("ERROR, Check Volume!!!");
                             }
                           if(Level6==true &&trade.Sell(Lots+Addition6S,NULL,lastTick.bid,lastTick.ask+TP6*_Point,0,"COMPLEMENTARE SELL"))
                             {
                              //a deschis poziti
                              RangeMS0=lastTick.bid;
                              NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                              TicketNumberS=trade.ResultOrder();
                              CONTORS++;
                              Alert("Ajunge in OPEN SELL");
                              medierebuy=true;
                              //Level6=true;//ba e nevoie
                             }
                          }

                       }
                     else
                        if(Level7==false && InpLevel7==true)///LEVEL 7 Fibonacci
                          {


                           if(lastTick.ask<=PL7)
                             {

                              if(trade.Buy(Vl7,NULL,lastTick.ask,0,lastTick.ask+TP7*_Point,"Order7 &Tp7"))
                                {
                                 medierebuy=true;
                                 Level7=true;
                                 ContorM=7;
                                 TicketNumber=trade.ResultOrder();
                                }
                              else
                                {
                                 SendNotification("ERROR, Check Volume!!!");
                                }
                              if(Level7==true &&trade.Sell(Lots+Addition7S,NULL,lastTick.bid,lastTick.ask+TP7*_Point,0,"COMPLEMENTARE SELL"))
                                {
                                 //a deschis poziti
                                 RangeMS0=lastTick.bid;
                                 NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                 TicketNumberS=trade.ResultOrder();
                                 CONTORS++;
                                 Alert("Ajunge in OPEN SELL");
                                 medierebuy=true;
                                 //Level7=true;
                                }
                             }

                          }
                        else
                           if(Level8==false && InpLevel8==true)///LEVEL 7 Fibonacci
                             {


                              if(lastTick.ask<=PL8)
                                {

                                 if(trade.Buy(Vl8,NULL,lastTick.ask,0,lastTick.ask+TP8*_Point,"Order8 &Tp8"))
                                   {
                                    medierebuy=true;
                                    Level8=true;
                                    ContorM=8;
                                    TicketNumber=trade.ResultOrder();
                                   }
                                 else
                                   {
                                    SendNotification("ERROR, Check Volume!!!");
                                   }
                                 if(Level8==true &&trade.Sell(Lots+Addition8S,NULL,lastTick.bid,lastTick.ask+TP8*_Point,0,"COMPLEMENTARE SELL"))
                                   {
                                    //a deschis poziti
                                    RangeMS0=lastTick.bid;
                                    NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                    TicketNumberS=trade.ResultOrder();
                                    CONTORS++;
                                    Alert("Ajunge in OPEN SELL");
                                    medierebuy=true;
                                    //Level8=true;
                                   }
                                }

                             }
                           else
                              if(Level9==false && InpLevel9==true)///LEVEL 7 Fibonacci
                                {


                                 if(lastTick.ask<=PL9)
                                   {

                                    if(trade.Buy(Vl9,NULL,lastTick.ask,0,lastTick.ask+TP9*_Point,"Order9 &Tp9"))
                                      {
                                       medierebuy=true;
                                       Level9=true;
                                       ContorM=9;
                                       TicketNumber=trade.ResultOrder();
                                      }
                                    else
                                      {
                                       SendNotification("ERROR, Check Volume!!!");
                                      }
                                    if(Level9==true &&trade.Sell(Lots+Addition9S,NULL,lastTick.bid,lastTick.ask+TP9*_Point,0,"COMPLEMENTARE SELL"))
                                      {
                                       //a deschis poziti
                                       RangeMS0=lastTick.bid;
                                       NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                       TicketNumberS=trade.ResultOrder();
                                       CONTORS++;
                                       Alert("Ajunge in OPEN SELL");
                                       medierebuy=true;
                                       Level9=true;
                                      }
                                   }

                                }
                              else
                                 if(Level10==false && InpLevel10==true)///LEVEL 10 Fibonacci
                                   {


                                    if(lastTick.ask<=PL10)
                                      {

                                       if(trade.Buy(Vl10,NULL,lastTick.ask,0,lastTick.ask+TP10*_Point,"Order10 &Tp10"))
                                         {
                                          medierebuy=true;
                                          Level10=true;//ba e nevoie
                                          ContorM=10;
                                          TicketNumber=trade.ResultOrder();
                                         }
                                       else
                                         {
                                          SendNotification("ERROR, Check Volume!!!");
                                         }
                                       if(Level10==true &&trade.Sell(Lots+Addition10S,NULL,lastTick.bid,lastTick.ask+TP10*_Point,0,"COMPLEMENTARE SELL"))
                                         {
                                          //a deschis poziti
                                          RangeMS0=lastTick.bid;
                                          NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                          TicketNumberS=trade.ResultOrder();
                                          CONTORS++;
                                          Alert("Ajunge in OPEN SELL");
                                          medierebuy=true;
                                          Level10=true;
                                         }
                                      }

                                   }
                                 else
                                    if(Level11==false && InpLevel11==true)///LEVEL 11 Fibonacci
                                      {


                                       if(lastTick.ask<=PL11)
                                         {

                                          if(trade.Buy(Vl11,NULL,lastTick.ask,0,lastTick.ask+TP11*_Point,"Order11 &Tp11"))
                                            {
                                             medierebuy=true;
                                             Level11=true;//ba e nevoie
                                             ContorM=11;
                                             TicketNumber=trade.ResultOrder();
                                            }
                                          else
                                            {
                                             SendNotification("ERROR, Check Volume!!!");
                                            }
                                          if(Level11==true &&trade.Sell(Lots+Addition11S,NULL,lastTick.bid,lastTick.ask+TP11*_Point,0,"COMPLEMENTARE SELL"))
                                            {
                                             //a deschis poziti
                                             RangeMS0=lastTick.bid;
                                             NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                             TicketNumberS=trade.ResultOrder();
                                             CONTORS++;
                                             Alert("Ajunge in OPEN SELL");
                                             medierebuy=true;
                                             Level11=true;
                                            }
                                         }

                                      }
                                    else
                                       if(Level12==false && InpLevel12==true)///LEVEL 7 Fibonacci
                                         {


                                          if(lastTick.ask<=PL12)
                                            {

                                             if(trade.Buy(Vl12,NULL,lastTick.ask,0,lastTick.ask+TP12*_Point,"Order12 &Tp12"))
                                               {
                                                medierebuy=true;
                                                Level12=true;//ba e nevoie
                                                ContorM=12;
                                                TicketNumber=trade.ResultOrder();
                                               }
                                             else
                                               {
                                                SendNotification("ERROR, Check Volume!!!");
                                               }
                                             if(Level12==true &&trade.Sell(Lots+Addition12S,NULL,lastTick.bid,lastTick.ask+TP12*_Point,0,"COMPLEMENTARE SELL"))
                                               {
                                                //a deschis poziti
                                                RangeMS0=lastTick.bid;
                                                NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                TicketNumberS=trade.ResultOrder();
                                                CONTORS++;
                                                Alert("Ajunge in OPEN SELL");
                                                medierebuy=true;
                                                Level12=true;
                                               }
                                            }

                                         }
                                       else
                                          if(Level13==false && InpLevel13==true)///LEVEL 7 Fibonacci
                                            {


                                             if(lastTick.ask<=PL13)
                                               {

                                                if(trade.Buy(Vl13,NULL,lastTick.ask,0,lastTick.ask+TP13*_Point,"Order13 &Tp13"))
                                                  {
                                                   medierebuy=true;
                                                   Level13=true;//ba e nevoie
                                                   ContorM=13;
                                                   TicketNumber=trade.ResultOrder();
                                                  }
                                                else
                                                  {
                                                   SendNotification("ERROR, Check Volume!!!");
                                                  }
                                                if(Level13==true &&trade.Sell(Lots+Addition13S,NULL,lastTick.bid,lastTick.ask+TP13*_Point,0,"COMPLEMENTARE SELL"))
                                                  {
                                                   //a deschis poziti
                                                   RangeMS0=lastTick.bid;
                                                   NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                   TicketNumberS=trade.ResultOrder();
                                                   CONTORS++;
                                                   Alert("Ajunge in OPEN SELL");
                                                   medierebuy=true;
                                                   Level13=true;
                                                  }
                                               }

                                            }

                                          else
                                             if(Level14==false && InpLevel14==true)///LEVEL 7 Fibonacci
                                               {


                                                if(lastTick.ask<=PL14)
                                                  {

                                                   if(trade.Buy(Vl14,NULL,lastTick.ask,0,lastTick.ask+TP14*_Point,"Order14 &Tp14"))
                                                     {
                                                      medierebuy=true;
                                                      Level14=true;//ba e nevoie
                                                      ContorM=14;
                                                      TicketNumber=trade.ResultOrder();
                                                     }
                                                   else
                                                     {
                                                      SendNotification("ERROR, Check Volume!!!");
                                                     }
                                                   if(Level14==true &&trade.Sell(Lots+Addition14S,NULL,lastTick.bid,lastTick.ask+TP14*_Point,0,"COMPLEMENTARE SELL"))
                                                     {
                                                      //a deschis poziti
                                                      RangeMS0=lastTick.bid;
                                                      NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                      TicketNumberS=trade.ResultOrder();
                                                      CONTORS++;
                                                      Alert("Ajunge in OPEN SELL");
                                                      medierebuy=true;
                                                      Level14=true;
                                                     }
                                                  }

                                               }
                                             else
                                                if(Level15==false && InpLevel15==true)///LEVEL 7 Fibonacci
                                                  {


                                                   if(lastTick.ask<=PL15)
                                                     {

                                                      if(trade.Buy(Vl15,NULL,lastTick.ask,0,lastTick.ask+TP15*_Point,"Order15 &Tp15"))
                                                        {
                                                         medierebuy=true;
                                                         Level15=true;//ba e nevoie
                                                         ContorM=15;
                                                         TicketNumber=trade.ResultOrder();
                                                        }
                                                      else
                                                        {
                                                         SendNotification("ERROR, Check Volume!!!");
                                                        }
                                                      if(Level15==true &&trade.Sell(Lots+Addition15S,NULL,lastTick.bid,lastTick.ask+TP15*_Point,0,"COMPLEMENTARE SELL"))
                                                        {
                                                         //a deschis poziti
                                                         RangeMS0=lastTick.bid;
                                                         NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                         TicketNumberS=trade.ResultOrder();
                                                         CONTORS++;
                                                         Alert("Ajunge in OPEN SELL");
                                                         medierebuy=true;
                                                         Level15=true;
                                                        }
                                                     }

                                                  }
                                                else
                                                   if(Level16==false && InpLevel16==true)///LEVEL 7 Fibonacci
                                                     {


                                                      if(lastTick.ask<=PL16)
                                                        {

                                                         if(trade.Buy(Vl16,NULL,lastTick.ask,0,lastTick.ask+TP16*_Point,"Order16 &Tp16"))
                                                           {
                                                            medierebuy=true;
                                                            Level16=true;//ba e nevoie
                                                            ContorM=16;
                                                            TicketNumber=trade.ResultOrder();
                                                           }
                                                         else
                                                           {
                                                            SendNotification("ERROR, Check Volume!!!");
                                                           }
                                                         if(Level16==true &&trade.Sell(Lots+Addition16S,NULL,lastTick.bid,lastTick.ask+TP16*_Point,0,"COMPLEMENTARE SELL"))
                                                           {
                                                            //a deschis poziti
                                                            RangeMS0=lastTick.bid;
                                                            NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                            TicketNumberS=trade.ResultOrder();
                                                            CONTORS++;
                                                            Alert("Ajunge in OPEN SELL");
                                                            medierebuy=true;
                                                            Level16=true;
                                                           }
                                                        }

                                                     }
                                                   else
                                                      if(Level17==false && InpLevel17==true)///LEVEL 7 Fibonacci
                                                        {


                                                         if(lastTick.ask<=PL17)
                                                           {

                                                            if(trade.Buy(Vl17,NULL,lastTick.ask,0,lastTick.ask+TP17*_Point,"Order17 &Tp17"))
                                                              {
                                                               medierebuy=true;
                                                               Level17=true;//ba e nevoie
                                                               ContorM=17;
                                                               TicketNumber=trade.ResultOrder();
                                                              }
                                                            else
                                                              {
                                                               SendNotification("ERROR, Check Volume!!!");
                                                              }
                                                            if(Level17==true &&trade.Sell(Lots+Addition17S,NULL,lastTick.bid,lastTick.ask+TP17*_Point,0,"COMPLEMENTARE SELL"))
                                                              {
                                                               //a deschis poziti
                                                               RangeMS0=lastTick.bid;
                                                               NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                               TicketNumberS=trade.ResultOrder();
                                                               CONTORS++;
                                                               Alert("Ajunge in OPEN SELL");
                                                               medierebuy=true;
                                                               Level17=true;
                                                              }
                                                           }

                                                        }
                                                      else
                                                         if(Level18==false && InpLevel18==true)///LEVEL 7 Fibonacci
                                                           {


                                                            if(lastTick.ask<=PL18)
                                                              {

                                                               if(trade.Buy(Vl18,NULL,lastTick.ask,0,lastTick.ask+TP18*_Point,"Order18 &Tp18"))
                                                                 {
                                                                  medierebuy=true;
                                                                  Level18=true;//ba e nevoie
                                                                  ContorM=18;
                                                                  TicketNumber=trade.ResultOrder();
                                                                 }
                                                               else
                                                                 {
                                                                  SendNotification("ERROR, Check Volume!!!");
                                                                 }
                                                               if(Level18==true &&trade.Sell(Lots+Addition18S,NULL,lastTick.bid,lastTick.ask+TP18*_Point,0,"COMPLEMENTARE SELL"))
                                                                 {
                                                                  //a deschis poziti
                                                                  RangeMS0=lastTick.bid;
                                                                  NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                                  TicketNumberS=trade.ResultOrder();
                                                                  CONTORS++;
                                                                  Alert("Ajunge in OPEN SELL");
                                                                  medierebuy=true;
                                                                  Level18=true;
                                                                 }
                                                              }

                                                           }
                                                         else
                                                            if(Level19==false && InpLevel19==true)///LEVEL 7 Fibonacci
                                                              {


                                                               if(lastTick.ask<=PL19)
                                                                 {

                                                                  if(trade.Buy(Vl19,NULL,lastTick.ask,0,lastTick.ask+TP19*_Point,"Order19 &Tp19"))
                                                                    {
                                                                     medierebuy=true;
                                                                     Level19=true;//ba e nevoie
                                                                     ContorM=179;
                                                                     TicketNumber=trade.ResultOrder();
                                                                    }
                                                                  else
                                                                    {
                                                                     SendNotification("ERROR, Check Volume!!!");
                                                                    }
                                                                  if(Level19==true &&trade.Sell(Lots+Addition19S,NULL,lastTick.bid,lastTick.ask+TP19*_Point,0,"COMPLEMENTARE SELL"))
                                                                    {
                                                                     //a deschis poziti
                                                                     RangeMS0=lastTick.bid;
                                                                     NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                                     TicketNumberS=trade.ResultOrder();
                                                                     CONTORS++;
                                                                     Alert("Ajunge in OPEN SELL");
                                                                     medierebuy=true;
                                                                     Level19=true;
                                                                    }
                                                                 }

                                                              }
                                                            else
                                                               if(Level20==false)///LEVEL 7 Fibonacci
                                                                 {


                                                                  if(lastTick.ask<=PL20)
                                                                    {

                                                                     if(trade.Buy(Vl20,NULL,lastTick.ask,0,lastTick.ask+TP20*_Point,"Order20 &Tp20"))
                                                                       {
                                                                        medierebuy=true;
                                                                        Level20=true;//ba e nevoie
                                                                        ContorM=179;
                                                                        TicketNumber=trade.ResultOrder();
                                                                       }
                                                                     else
                                                                       {
                                                                        SendNotification("ERROR, Check Volume!!!");
                                                                       }
                                                                     if(Level20==true && trade.Sell(Lots+Addition20S,NULL,lastTick.bid,lastTick.ask+TP20*_Point,0,"COMPLEMENTARE SELL"))
                                                                       {
                                                                        //a deschis poziti
                                                                        RangeMS0=lastTick.bid;
                                                                        NextSellPrice=RangeMS0-InpStepCS*_Point;// averificat range
                                                                        TicketNumberS=trade.ResultOrder();
                                                                        CONTORS++;
                                                                        Alert("Ajunge in OPEN SELL");
                                                                        medierebuy=true;
                                                                        Level20=true;
                                                                       }
                                                                    }

                                                                 }
      double ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
      double bid=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
      if(medierebuy==true)
        {
         static double lastBuyTakeProfit;
         if(PositionSelectByTicket(TicketNumber))
           {
            ulong magicnumber=PositionGetInteger(POSITION_MAGIC);
            if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
              {
               if(magicnumber==InpMagicNumber)
                 {
                  lastBuyTakeProfit = PositionGetDouble(POSITION_TP);
                 }
              }

           }
         if(lastBuyTakeProfit-(ask-bid)<=lastTick.ask)
           {
            CloseBuyPositions();
            CloseSellPositions();
            CONTOR=0;
            CONTORS=0;
            //Alert("A intrat sa inchida mediere Buy");
            medierebuy=false;
            Level1=false;
            Level2=false;
            Level3=false;
            Level4=false;
            Level5=false;
            Level6=false;
            Level7=false;
            Level8=false;
            Level9=false;
            Level10=false;
            Level11=false;
            Level12=false;
            Level13=false;
            Level14=false;
            Level15=false;
            Level16=false;
            Level17=false;
            Level18=false;
            Level19=false;
            Level20=false;
           }

        }

      //medieresell
      if(LevelS1==false && InpLevel1S==true) ///LEVEL 1 Fibonacci
        {

         if(lastTick.bid>=PL1S)
           {

            if(trade.Sell(Vl1S,NULL,lastTick.bid,0,lastTick.bid-TPS1*_Point,"Order1 & TP1 SELL"))
              {
               LevelS1=true;
               medieresell=true;
               complementaresell=false;
               TicketNumberS=trade.ResultOrder();
              }
            else
              {
               SendNotification("ERROR, Check Volume!!!");
              }
            if(LevelS1==true &&trade.Buy(Lots+Addition1,_Symbol,lastTick.ask,lastTick.bid-TPS1*_Point,0,"COMPLEMENTARE BUY"))
              {
               RangeMB0=lastTick.ask;
               NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
               TicketNumber=trade.ResultOrder();
               CONTOR++;
               Alert("Ajunge in OPEN BUY");
               LevelS1=true;
               medieresell=true;
              }
           }

        }
      else
         if(LevelS2==false &&InpLevel2S==true)///LEVEL 2 Fibonacci
           {
            if(lastTick.bid>=PL2S)
              {

               if(trade.Sell(Vl2S,NULL,lastTick.bid,0,lastTick.bid-TPS2*_Point,"Order2 & TP2 SELL"))
                 {
                  LevelS2=true;
                  medieresell=true;
                  ContorM=2;
                  TicketNumberS=trade.ResultOrder();
                 }
               else
                 {
                  SendNotification("ERROR, Check Volume!!!");
                 }
               if(LevelS2==true &&trade.Buy(Lots+Addition2,_Symbol,lastTick.ask,lastTick.bid-TPS2*_Point,0,"COMPLEMENTARE BUY"))
                 {
                  RangeMB0=lastTick.ask;
                  NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                  TicketNumber=trade.ResultOrder();
                  CONTOR++;
                  Alert("Ajunge in OPEN BUY");
                  LevelS2=true;
                  medieresell=true;
                 }
              }
           }

         else
            if(LevelS3==false &&InpLevel3S==true)///LEVEL 3 Fibonacci
              {

               if(lastTick.bid>=PL3S)
                 {


                  if(trade.Sell(Vl3S,NULL,lastTick.bid,0,lastTick.bid-TPS3*_Point,"Order3 &Tp3 SELL"))
                    {
                     LevelS3=true;
                     medieresell=true;
                     ContorM=3;
                     TicketNumberS=trade.ResultOrder();
                    }
                  else
                    {
                     SendNotification("ERROR, Check Volume!!!");
                    }
                  if(LevelS3==true &&trade.Buy(Lots+Addition3,_Symbol,lastTick.ask,lastTick.bid-TPS3*_Point,0,"COMPLEMENTARE BUY"))
                    {
                     RangeMB0=lastTick.ask;
                     NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                     TicketNumber=trade.ResultOrder();
                     CONTOR++;
                     Alert("Ajunge in OPEN BUY");
                     LevelS3=true;
                     medieresell=true;
                    }
                 }

              }
            else
               if(LevelS4==false && InpLevel4S==true)///LEVEL 4 Fibonacci
                 {


                  if(lastTick.bid>=PL4S)
                    {

                     if(trade.Sell(Vl4S,NULL,lastTick.bid,0,lastTick.bid-TPS4*_Point,"Order4 &Tp4 SELL"))
                       {
                        LevelS4=true;
                        medieresell=true;
                        ContorM=4;
                        TicketNumberS=trade.ResultOrder();
                       }
                     else
                       {
                        SendNotification("ERROR, Check Volume!!!");
                       }
                     if(LevelS4==true &&trade.Buy(Lots+Addition4,_Symbol,lastTick.ask,lastTick.bid-TPS4*_Point,0,"COMPLEMENTARE BUY"))
                       {
                        RangeMB0=lastTick.ask;
                        NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                        TicketNumber=trade.ResultOrder();
                        CONTOR++;
                        Alert("Ajunge in OPEN BUY");
                        LevelS4=true;
                        medieresell=true;
                       }
                    }

                 }
               else
                  if(LevelS5==false && InpLevel5S==true)///LEVEL 5 Fibonacci
                    {


                     if(lastTick.bid>=PL5S)
                       {

                        if(trade.Sell(Vl5S,NULL,lastTick.bid,0,lastTick.bid-TPS5*_Point,"Order5 &Tp5 SELL"))
                          {
                           medieresell=true;
                           LevelS5=true;
                           ContorM=5;
                           TicketNumberS=trade.ResultOrder();
                          }
                        else
                          {
                           SendNotification("ERROR, Check Volume!!!");
                          }
                        if(LevelS5==true &&trade.Buy(Lots+Addition5,_Symbol,lastTick.ask,lastTick.bid-TPS5*_Point,0,"COMPLEMENTARE BUY"))
                          {
                           RangeMB0=lastTick.ask;
                           NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                           TicketNumber=trade.ResultOrder();
                           CONTOR++;
                           Alert("Ajunge in OPEN BUY");
                           LevelS5=true;
                           medieresell=true;
                          }
                       }


                    }
                  else
                     if(LevelS6==false && InpLevel6S==true)///LEVEL 6 Fibonacci
                       {

                        if(lastTick.bid>=PL6S)
                          {

                           if(trade.Sell(Vl6S,NULL,lastTick.bid,0,lastTick.bid-TPS6*_Point,"Order6 &Tp6 SELL"))
                             {
                              medieresell=true;
                              LevelS6=true;
                              ContorM=6;
                              TicketNumberS=trade.ResultOrder();
                             }
                           else
                             {
                              SendNotification("ERROR, Check Volume!!!");
                             }
                           if(LevelS6==true &&trade.Buy(Lots+Addition6,_Symbol,lastTick.ask,lastTick.bid-TPS6*_Point,0,"COMPLEMENTARE BUY"))
                             {
                              RangeMB0=lastTick.ask;
                              NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                              TicketNumber=trade.ResultOrder();
                              CONTOR++;
                              Alert("Ajunge in OPEN BUY");
                              LevelS6=true;
                              medieresell=true;
                             }
                          }

                       }
                     else
                        if(LevelS7==false && InpLevel7S==true)///LEVEL 7 Fibonacci
                          {


                           if(lastTick.bid>=PL7S)
                             {

                              if(trade.Sell(Vl7S,NULL,lastTick.bid,0,lastTick.bid-TPS7*_Point,"Order7 &Tp7 SELL"))
                                {
                                 medieresell=true;
                                 LevelS7=true;//ba e nevoie
                                 ContorM=7;
                                 TicketNumberS=trade.ResultOrder();
                                }
                              else
                                {
                                 SendNotification("ERROR, Check Volume!!!");
                                }
                              if(LevelS7==true &&trade.Buy(Lots+Addition7,_Symbol,lastTick.ask,lastTick.bid-TPS7*_Point,0,"COMPLEMENTARE BUY"))
                                {
                                 RangeMB0=lastTick.ask;
                                 NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                 TicketNumber=trade.ResultOrder();
                                 CONTOR++;
                                 Alert("Ajunge in OPEN BUY");
                                 LevelS7=true;
                                 medieresell=true;
                                }
                             }

                          }
                        else
                           if(LevelS8==false && InpLevel8S==true) ///LEVEL 7 Fibonacci
                             {


                              if(lastTick.bid>=PL8S)
                                {

                                 if(trade.Sell(Vl8S,NULL,lastTick.bid,0,lastTick.bid-TPS8*_Point,"Order8 &Tp8 SELL"))
                                   {
                                    medieresell=true;
                                    LevelS8=true;//ba e nevoie
                                    ContorM=8;
                                    TicketNumberS=trade.ResultOrder();
                                   }
                                 else
                                   {
                                    SendNotification("ERROR, Check Volume!!!");
                                   }
                                 if(LevelS8==true && trade.Buy(Lots+Addition8,_Symbol,lastTick.ask,lastTick.bid-TPS8*_Point,0,"COMPLEMENTARE BUY"))
                                   {
                                    RangeMB0=lastTick.ask;
                                    NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                    TicketNumber=trade.ResultOrder();
                                    CONTOR++;
                                    Alert("Ajunge in OPEN BUY");
                                    LevelS8=true;
                                    medieresell=true;
                                   }
                                }

                             }
                           else
                              if(LevelS9==false && InpLevel9S==true)///LEVEL 7 Fibonacci
                                {


                                 if(lastTick.bid>=PL9S)
                                   {

                                    if(trade.Sell(Vl9S,NULL,lastTick.bid,0,lastTick.bid-TPS9*_Point,"Order9 &Tp9 SELL"))
                                      {
                                       medieresell=true;
                                       LevelS9=true;//ba e nevoie
                                       ContorM=9;
                                       TicketNumberS=trade.ResultOrder();
                                      }
                                    else
                                      {
                                       SendNotification("ERROR, Check Volume!!!");
                                      }
                                    if(LevelS9==true && trade.Buy(Lots+Addition9,_Symbol,lastTick.ask,lastTick.bid-TPS9*_Point,0,"COMPLEMENTARE BUY"))
                                      {
                                       RangeMB0=lastTick.ask;
                                       NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                       TicketNumber=trade.ResultOrder();
                                       CONTOR++;
                                       Alert("Ajunge in OPEN BUY");
                                       LevelS9=true;
                                       medieresell=true;
                                      }
                                   }

                                }
                              else
                                 if(LevelS10==false && InpLevel10S==true)///LEVEL 7 Fibonacci
                                   {


                                    if(lastTick.bid>=PL10S)
                                      {

                                       if(trade.Sell(Vl10S,NULL,lastTick.bid,0,lastTick.bid-TPS10*_Point,"Order10 &Tp10 SELL"))
                                         {
                                          medieresell=true;
                                          LevelS10=true;//ba e nevoie
                                          ContorM=10;
                                          TicketNumberS=trade.ResultOrder();
                                         }
                                       else
                                         {
                                          SendNotification("ERROR, Check Volume!!!");
                                         }
                                       if(LevelS10==true &&trade.Buy(Lots+Addition10,_Symbol,lastTick.ask,lastTick.bid-TPS10*_Point,0,"COMPLEMENTARE BUY"))
                                         {
                                          RangeMB0=lastTick.ask;
                                          NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                          TicketNumber=trade.ResultOrder();
                                          CONTOR++;
                                          Alert("Ajunge in OPEN BUY");
                                          LevelS10=true;
                                          medieresell=true;
                                         }
                                      }

                                   }
                                 else
                                    if(LevelS11==false && InpLevel11S==true)///LEVEL 7 Fibonacci
                                      {


                                       if(lastTick.bid>=PL11S)
                                         {

                                          if(trade.Sell(Vl11S,NULL,lastTick.bid,0,lastTick.bid-TPS11*_Point,"Order11 &Tp11 SELL"))
                                            {
                                             medieresell=true;
                                             LevelS11=true;//ba e nevoie
                                             ContorM=11;
                                             TicketNumberS=trade.ResultOrder();
                                            }
                                          else
                                            {
                                             SendNotification("ERROR, Check Volume!!!");
                                            }
                                          if(LevelS11==true &&trade.Buy(Lots+Addition11,_Symbol,lastTick.ask,lastTick.bid-TPS11*_Point,0,"COMPLEMENTARE BUY"))
                                            {
                                             RangeMB0=lastTick.ask;
                                             NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                             TicketNumber=trade.ResultOrder();
                                             CONTOR++;
                                             Alert("Ajunge in OPEN BUY");
                                             LevelS11=true;
                                             medieresell=true;
                                            }
                                         }

                                      }
                                    else
                                       if(LevelS12==false && InpLevel12S==true)///LEVEL 7 Fibonacci
                                         {


                                          if(lastTick.bid>=PL12S)
                                            {

                                             if(trade.Sell(Vl12S,NULL,lastTick.bid,0,lastTick.bid-TPS12*_Point,"Order12 &Tp12 SELL"))
                                               {
                                                medieresell=true;
                                                LevelS12=true;//ba e nevoie
                                                ContorM=12;
                                                TicketNumberS=trade.ResultOrder();
                                               }
                                             else
                                               {
                                                SendNotification("ERROR, Check Volume!!!");
                                               }
                                             if(LevelS12==true &&trade.Buy(Lots+Addition12,_Symbol,lastTick.ask,lastTick.bid-TPS12*_Point,0,"COMPLEMENTARE BUY"))
                                               {
                                                RangeMB0=lastTick.ask;
                                                NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                TicketNumber=trade.ResultOrder();
                                                CONTOR++;
                                                Alert("Ajunge in OPEN BUY");
                                                LevelS12=true;
                                                medieresell=true;
                                               }
                                            }

                                         }
                                       else
                                          if(LevelS13==false && InpLevel13S==true)///LEVEL 7 Fibonacci
                                            {


                                             if(lastTick.bid>=PL13S)
                                               {

                                                if(trade.Sell(Vl13S,NULL,lastTick.bid,0,lastTick.bid-TPS13*_Point,"Order13 &Tp13 SELL"))
                                                  {
                                                   medieresell=true;
                                                   LevelS13=true;//ba e nevoie
                                                   ContorM=13;
                                                   TicketNumberS=trade.ResultOrder();
                                                  }
                                                else
                                                  {
                                                   SendNotification("ERROR, Check Volume!!!");
                                                  }
                                                if(LevelS13==true && trade.Buy(Lots+Addition13,_Symbol,lastTick.ask,lastTick.bid-TPS13*_Point,0,"COMPLEMENTARE BUY"))
                                                  {
                                                   RangeMB0=lastTick.ask;
                                                   NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                   TicketNumber=trade.ResultOrder();
                                                   CONTOR++;
                                                   Alert("Ajunge in OPEN BUY");
                                                   LevelS13=true;
                                                   medieresell=true;
                                                  }
                                               }

                                            }

                                          else
                                             if(LevelS14==false && InpLevel14S==true)///LEVEL 7 Fibonacci
                                               {


                                                if(lastTick.bid>=PL14S)
                                                  {

                                                   if(trade.Sell(Vl14S,NULL,lastTick.bid,0,lastTick.bid-TPS14*_Point,"Order14 &Tp14 SELL"))
                                                     {
                                                      medieresell=true;
                                                      LevelS14=true;//ba e nevoie
                                                      ContorM=14;
                                                      TicketNumberS=trade.ResultOrder();
                                                     }
                                                   else
                                                     {
                                                      SendNotification("ERROR, Check Volume!!!");
                                                     }
                                                   if(LevelS14==true &&trade.Buy(Lots+Addition14,_Symbol,lastTick.ask,lastTick.bid-TPS14*_Point,0,"COMPLEMENTARE BUY"))
                                                     {
                                                      RangeMB0=lastTick.ask;
                                                      NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                      TicketNumber=trade.ResultOrder();
                                                      CONTOR++;
                                                      Alert("Ajunge in OPEN BUY");
                                                      LevelS14=true;
                                                      medieresell=true;
                                                     }
                                                  }

                                               }
                                             else
                                                if(LevelS15==false && InpLevel15S==true)///LEVEL 7 Fibonacci
                                                  {


                                                   if(lastTick.bid>=PL15S)
                                                     {

                                                      if(trade.Sell(Vl15S,NULL,lastTick.bid,0,lastTick.bid-TPS15*_Point,"Order15 &Tp15 SELL"))
                                                        {
                                                         medieresell=true;
                                                         LevelS15=true;//ba e nevoie
                                                         ContorM=15;
                                                         TicketNumberS=trade.ResultOrder();
                                                        }
                                                      else
                                                        {
                                                         SendNotification("ERROR, Check Volume!!!");
                                                        }
                                                      if(LevelS15==true &&trade.Buy(Lots+Addition15,_Symbol,lastTick.ask,lastTick.bid-TPS15*_Point,0,"COMPLEMENTARE BUY"))
                                                        {
                                                         RangeMB0=lastTick.ask;
                                                         NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                         TicketNumber=trade.ResultOrder();
                                                         CONTOR++;
                                                         Alert("Ajunge in OPEN BUY");
                                                         LevelS15=true;
                                                         medieresell=true;
                                                        }
                                                     }

                                                  }
                                                else
                                                   if(LevelS16==false && InpLevel16S==true)///LEVEL 7 Fibonacci
                                                     {


                                                      if(lastTick.bid>=PL16S)
                                                        {

                                                         if(trade.Sell(Vl16S,NULL,lastTick.bid,0,lastTick.bid-TPS16*_Point,"Order16 &Tp16 SELL"))
                                                           {
                                                            medieresell=true;
                                                            LevelS16=true;//ba e nevoie
                                                            ContorM=16;
                                                            TicketNumberS=trade.ResultOrder();
                                                           }
                                                         else
                                                           {
                                                            SendNotification("ERROR, Check Volume!!!");
                                                           }
                                                         if(LevelS16==true &&trade.Buy(Lots+Addition16,_Symbol,lastTick.ask,lastTick.bid-TPS16*_Point,0,"COMPLEMENTARE BUY"))
                                                           {
                                                            RangeMB0=lastTick.ask;
                                                            NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                            TicketNumber=trade.ResultOrder();
                                                            CONTOR++;
                                                            Alert("Ajunge in OPEN BUY");
                                                            LevelS16=true;
                                                            medieresell=true;
                                                           }
                                                        }

                                                     }
                                                   else
                                                      if(LevelS17==false && InpLevel17S==true)///LEVEL 7 Fibonacci
                                                        {


                                                         if(lastTick.bid>=PL17S)
                                                           {

                                                            if(trade.Sell(Vl17S,NULL,lastTick.bid,0,lastTick.bid-TPS17*_Point,"Order17 &Tp17 SELL"))
                                                              {
                                                               medieresell=true;
                                                               LevelS17=true;//ba e nevoie
                                                               ContorM=17;
                                                               TicketNumberS=trade.ResultOrder();
                                                              }
                                                            else
                                                              {
                                                               SendNotification("ERROR, Check Volume!!!");
                                                              }
                                                            if(LevelS17==true &&trade.Buy(Lots+Addition17,_Symbol,lastTick.ask,lastTick.bid-TPS17*_Point,0,"COMPLEMENTARE BUY"))
                                                              {
                                                               RangeMB0=lastTick.ask;
                                                               NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                               TicketNumber=trade.ResultOrder();
                                                               CONTOR++;
                                                               Alert("Ajunge in OPEN BUY");
                                                               LevelS17=true;
                                                               medieresell=true;
                                                              }
                                                           }

                                                        }
                                                      else
                                                         if(LevelS18==false && InpLevel18S==true)///LEVEL 7 Fibonacci
                                                           {


                                                            if(lastTick.bid>=PL18S)
                                                              {

                                                               if(trade.Sell(Vl18S,NULL,lastTick.bid,0,lastTick.bid-TPS18*_Point,"Order18 &Tp18 SELL"))
                                                                 {
                                                                  medieresell=true;
                                                                  LevelS18=true;//ba e nevoie
                                                                  ContorM=18;
                                                                  TicketNumberS=trade.ResultOrder();
                                                                 }
                                                               else
                                                                 {
                                                                  SendNotification("ERROR, Check Volume!!!");
                                                                 }
                                                               if(LevelS18==true &&trade.Buy(Lots+Addition18,_Symbol,lastTick.ask,lastTick.bid-TPS18*_Point,0,"COMPLEMENTARE BUY"))
                                                                 {
                                                                  RangeMB0=lastTick.ask;
                                                                  NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                                  TicketNumber=trade.ResultOrder();
                                                                  CONTOR++;
                                                                  Alert("Ajunge in OPEN BUY");
                                                                  LevelS18=true;
                                                                  medieresell=true;
                                                                 }
                                                              }

                                                           }
                                                         else
                                                            if(LevelS19==false && InpLevel19S==true)///LEVEL 7 Fibonacci
                                                              {


                                                               if(lastTick.bid>=PL19S)
                                                                 {

                                                                  if(trade.Sell(Vl19S,NULL,lastTick.bid,0,lastTick.bid-TPS19*_Point,"Order19 &Tp19 SELL"))
                                                                    {
                                                                     LevelS19=true;//ba e nevoie
                                                                     ContorM=19;
                                                                     TicketNumberS=trade.ResultOrder();
                                                                    }
                                                                  else
                                                                    {
                                                                     SendNotification("ERROR, Check Volume!!!");
                                                                    }
                                                                  if(LevelS19==true &&trade.Buy(Lots+Addition19,_Symbol,lastTick.ask,lastTick.bid-TPS19*_Point,0,"COMPLEMENTARE BUY"))
                                                                    {
                                                                     RangeMB0=lastTick.ask;
                                                                     NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                                     TicketNumber=trade.ResultOrder();
                                                                     CONTOR++;
                                                                     Alert("Ajunge in OPEN BUY");
                                                                     LevelS19=true;
                                                                     medieresell=true;
                                                                    }
                                                                 }

                                                              }
                                                            else
                                                               if(LevelS20==false)///LEVEL 7 Fibonacci
                                                                 {


                                                                  if(lastTick.bid>=PL20S)
                                                                    {

                                                                     if(trade.Sell(Vl20S,NULL,lastTick.bid,0,lastTick.bid-TPS20*_Point,"Order19 &Tp19 SELL"))
                                                                       {
                                                                        LevelS20=true;//ba e nevoie
                                                                        ContorM=19;
                                                                        TicketNumberS=trade.ResultOrder();
                                                                       }
                                                                     else
                                                                       {
                                                                        SendNotification("ERROR, Check Volume!!!");
                                                                       }
                                                                     if(LevelS20==true &&trade.Buy(Lots+Addition20,_Symbol,lastTick.ask,lastTick.bid-TPS20*_Point,0,"COMPLEMENTARE BUY"))
                                                                       {
                                                                        RangeMB0=lastTick.ask;
                                                                        NextBuyPrice=RangeMB0+InpStepC*_Point;// averificat range
                                                                        TicketNumber=trade.ResultOrder();
                                                                        CONTOR++;
                                                                        Alert("Ajunge in OPEN BUY");
                                                                        LevelS20=true;
                                                                        medieresell=true;
                                                                       }
                                                                    }

                                                                 }


      //double ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
      //double bid=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
      if(medieresell==true)
        {
         static double lastBuyTakeProfitS;
         if(PositionSelectByTicket(TicketNumberS))
           {
            ulong magicnumber=PositionGetInteger(POSITION_MAGIC);
            if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
              {
               if(magicnumber==InpMagicNumber)
                 {
                  lastBuyTakeProfitS = PositionGetDouble(POSITION_TP);
                 }
              }
           }
         if(lastBuyTakeProfitS+(ask-bid)>=lastTick.bid)
           {
            CloseBuyPositions();
            CloseSellPositions();
            CONTORS=0;
            CONTOR=0;
            //Alert("A intrat sa inchida mediere sell 1");
            medieresell=false;
            LevelS1=false;
            LevelS2=false;
            LevelS3=false;
            LevelS4=false;
            LevelS5=false;
            LevelS6=false;
            LevelS7=false;
            LevelS8=false;
            LevelS9=false;
            LevelS10=false;
            LevelS11=false;
            LevelS12=false;
            LevelS13=false;
            LevelS14=false;
            LevelS15=false;
            LevelS16=false;
            LevelS17=false;
            LevelS18=false;
            LevelS19=false;
            LevelS20=false;
           }

        }
      double Account_Profit=AccountInfoDouble(ACCOUNT_PROFIT);

      if(InpTakeProfitMode==TAKE_PROFIT_MONEY)
        {
        //Print("A intrat in MOney ddar nu profit");
         if(  AccountInfoDouble(ACCOUNT_PROFIT)>=InpTakeProfitAll)
        {
        // Print("jkdfsabvjkadfbjkvlabedfjkgejrkdannvf");
         CloseBuyPositions();
         CloseSellPositions();
         CONTOR=0;
         medierebuy=false;
         Level1=false;
         Level2=false;
         Level3=false;
         Level4=false;
         Level5=false;
         Level6=false;
         Level7=false;
         Level8=false;
         Level9=false;
         Level10=false;
         Level11=false;
         Level12=false;
         Level13=false;
         Level14=false;
         Level15=false;
         Level16=false;
         Level17=false;
         Level18=false;
         Level19=false;
         Level20=false;
         CONTORS=0;
         medieresell=false;
         LevelS1=false;
         LevelS2=false;
         LevelS3=false;
         LevelS4=false;
         LevelS5=false;
         LevelS6=false;
         LevelS7=false;
         LevelS8=false;
         LevelS9=false;
         LevelS10=false;
         LevelS11=false;
         LevelS12=false;
         LevelS13=false;
         LevelS14=false;
         LevelS15=false;
         LevelS16=false;
         LevelS17=false;
         LevelS18=false;
         LevelS19=false;
         LevelS20=false;
        }
        
        }
        if(InpTakeProfitMode==TAKE_PROFIT_PERCENT && Account_Profit>=(InpTakeProfitAll*AccountInfoDouble(ACCOUNT_BALANCE))/100)
        {
         CloseBuyPositions();
         CloseSellPositions();
         CONTOR=0;
         medierebuy=false;
         Level1=false;
         Level2=false;
         Level3=false;
         Level4=false;
         Level5=false;
         Level6=false;
         Level7=false;
         Level8=false;
         Level9=false;
         Level10=false;
         Level11=false;
         Level12=false;
         Level13=false;
         Level14=false;
         Level15=false;
         Level16=false;
         Level17=false;
         Level18=false;
         Level19=false;
         Level20=false;
         CONTORS=0;
         medieresell=false;
         LevelS1=false;
         LevelS2=false;
         LevelS3=false;
         LevelS4=false;
         LevelS5=false;
         LevelS6=false;
         LevelS7=false;
         LevelS8=false;
         LevelS9=false;
         LevelS10=false;
         LevelS11=false;
         LevelS12=false;
         LevelS13=false;
         LevelS14=false;
         LevelS15=false;
         LevelS16=false;
         LevelS17=false;
         LevelS18=false;
         LevelS19=false;
         LevelS20=false;
        }
      if(InpStopLossMode==STOP_LOSS_MONEY && InpStopAfterLoss==false)
        {
         if(InpStopLossAll*(-1)>=AccountInfoDouble(ACCOUNT_PROFIT))
           {
            //close LONG
            CloseBuyPositions();
            CONTOR=0;
            medierebuy=false;
            Level1=false;
            Level2=false;
            Level3=false;
            Level4=false;
            Level5=false;
            Level6=false;
            Level7=false;
            Level8=false;
            Level9=false;
            Level10=false;
            Level11=false;
            Level12=false;
            Level13=false;
            Level14=false;
            Level15=false;
            Level16=false;
            Level17=false;
            Level18=false;
            Level19=false;
            Level20=false;
            //close short
            CloseSellPositions();
            CONTORS=0;
            medieresell=false;
            LevelS1=false;
            LevelS2=false;
            LevelS3=false;
            LevelS4=false;
            LevelS5=false;
            LevelS6=false;
            LevelS7=false;
            LevelS8=false;
            LevelS9=false;
            LevelS10=false;
            LevelS11=false;
            LevelS12=false;
            LevelS13=false;
            LevelS14=false;
            LevelS15=false;
            LevelS16=false;
            LevelS17=false;
            LevelS18=false;
            LevelS19=false;
            LevelS20=false;
           }
        }
      if(InpStopLossMode==STOP_LOSS_PERCENT && InpStopAfterLoss==false)
        {
         if((InpStopLossAll*AccountInfoDouble(ACCOUNT_BALANCE))/100*(-1)>=AccountInfoDouble(ACCOUNT_PROFIT))
           {
            //close LONG
            CloseBuyPositions();
            CONTOR=0;
            medierebuy=false;
            Level1=false;
            Level2=false;
            Level3=false;
            Level4=false;
            Level5=false;
            Level6=false;
            Level7=false;
            Level8=false;
            Level9=false;
            Level10=false;
            Level11=false;
            Level12=false;
            Level13=false;
            Level14=false;
            Level15=false;
            Level16=false;
            Level17=false;
            Level18=false;
            Level19=false;
            Level20=false;
            //close short
            CloseSellPositions();
            CONTORS=0;
            medieresell=false;
            LevelS1=false;
            LevelS2=false;
            LevelS3=false;
            LevelS4=false;
            LevelS5=false;
            LevelS6=false;
            LevelS7=false;
            LevelS8=false;
            LevelS9=false;
            LevelS10=false;
            LevelS11=false;
            LevelS12=false;
            LevelS13=false;
            LevelS14=false;
            LevelS15=false;
            LevelS16=false;
            LevelS17=false;
            LevelS18=false;
            LevelS19=false;
            LevelS20=false;
           }
        }
      if(InpStopAfterLoss==true)
        {
         if(InpStopLossMode==STOP_LOSS_MONEY)
           {
            if(InpStopLossAll*(-1)>=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               //close LONG
               CloseBuyPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               //close short
               CloseSellPositions();
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               robotStatus=false;
               lossStatus=true;
              }
           }

         if(InpStopLossMode==STOP_LOSS_PERCENT)
           {
            if((InpStopLossAll*AccountInfoDouble(ACCOUNT_BALANCE))/100*(-1)>=AccountInfoDouble(ACCOUNT_PROFIT))
              {
               //close LONG
               CloseBuyPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               //close short
               CloseSellPositions();
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               robotStatus=false;
               lossStatus=true;
              }
           }
        }
      if(InpStopAfterTakeProfit==true)
        {
        double Account_Profit=AccountInfoDouble(ACCOUNT_PROFIT);
         if(InpTakeProfitMode==TAKE_PROFIT_PERCENT)
           {
            
            if(Account_Profit>=(InpTakeProfitAll*AccountInfoDouble(ACCOUNT_BALANCE))/100)
              {
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               robotStatus=false;
               winStatus=true;
              }
           }
            
           if(InpTakeProfitMode==TAKE_PROFIT_MONEY)
             {
             Print("profit_account",AccountInfoDouble(ACCOUNT_PROFIT));
             Print("profit take all",InpTakeProfitAll);
              if(AccountInfoDouble(ACCOUNT_PROFIT)>=InpTakeProfitAll)
              {
              Print("A intrat");
              
               CloseBuyPositions();
               CloseSellPositions();
               CONTOR=0;
               medierebuy=false;
               Level1=false;
               Level2=false;
               Level3=false;
               Level4=false;
               Level5=false;
               Level6=false;
               Level7=false;
               Level8=false;
               Level9=false;
               Level10=false;
               Level11=false;
               Level12=false;
               Level13=false;
               Level14=false;
               Level15=false;
               Level16=false;
               Level17=false;
               Level18=false;
               Level19=false;
               Level20=false;
               CONTORS=0;
               medieresell=false;
               LevelS1=false;
               LevelS2=false;
               LevelS3=false;
               LevelS4=false;
               LevelS5=false;
               LevelS6=false;
               LevelS7=false;
               LevelS8=false;
               LevelS9=false;
               LevelS10=false;
               LevelS11=false;
               LevelS12=false;
               LevelS13=false;
               LevelS14=false;
               LevelS15=false;
               LevelS16=false;
               LevelS17=false;
               LevelS18=false;
               LevelS19=false;
               LevelS20=false;
               robotStatus=false;
               winStatus=true;
              
              }
             }
        }
      if(InpNotifications==true && InpStopLossAll*(-1)>=AccountInfoDouble(ACCOUNT_PROFIT))
        {
         SendNotification("Drawdown > StopLossAll!");
        }

      if(InpNotifications==true && AccountInfoDouble(ACCOUNT_PROFIT)>=InpTakeProfitAll)
        {
         SendNotification("P&L Profit > TakeProfitAll!");
        }
     }
  }
//+------------------------------------------------------------------+
//| Calculate lot/pip value                                          |
//+------------------------------------------------------------------+
double CalculatePipValue()
  {
   double tickSize =SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);  // Size of one pip/tick
   double tickValue =SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE); // Value of one pip/tick in your account currency
   double volumeStep=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP);

   double pipValue = MathFloor(tickValue / tickSize)*volumeStep;// /1000
   return pipValue;
  }

//count open positions
int CountOpenPositions()
  {

   int counter=0;
   int total=PositionsTotal();
   for(int i=total-1; i>=0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(ticket<=0)
        {
         Print("Failed to get position ticket");
         return -1;
        }
      if(!PositionSelectByTicket(ticket))
        {
         Print("Failed to select position by ticket");
         return -1;
        }
      ulong magicnumber;
      if(!PositionGetInteger(POSITION_MAGIC,magicnumber))
        {
         Print("Failed to get magicnumber");
         return -1;
        }
      if(InpMagicNumber==magicnumber)
        {
         counter++;
        }

     }



   return counter;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V1()//Volum 1 Long
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss1=Lots*PipValue*(-PL0+PL1+TZ)*100000;//0.00436-1.27503+0.00100
      Loss1=NormalizeDouble(MathAbs(Loss1),decimalPlace);
      Vl1=NormalizeDouble(Loss1/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss1=2*Lots*PipValue*(-PL0+PL1+TZ-step2)*100000;
      Loss1=NormalizeDouble(MathAbs(Loss1),decimalPlace);
      Vl1=NormalizeDouble(Loss1/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss1=3*Lots*PipValue*(-PL0+PL1+TZ-step3)*100000;
      Loss1=NormalizeDouble(MathAbs(Loss1),decimalPlace);
      Vl1=NormalizeDouble(Loss1/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss1:",Loss1,"Vl1: ",Vl1);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V2()
  {
   double PipValue=CalculatePipValue()*InpLots;
   if(CONTOR==1)
     {
      Loss2=Lots*PipValue*(PL2-PL0+TZ)*100000 //100000
            +(Vl1*PipValue*(PL2-PL1+TZ))*100000; //100000
      Loss2=NormalizeDouble(MathAbs(Loss2),decimalPlace);
      Vl2=NormalizeDouble(Loss2/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss2=2*Lots*PipValue*(-PL0+PL2+TZ-step2)*100000
            +(Vl1*PipValue*(-PL1+PL2+TZ))*100000;
      Loss2=NormalizeDouble(MathAbs(Loss2),decimalPlace);
      Vl2=NormalizeDouble(Loss2/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss2=3*Lots*PipValue*(-PL0+PL2+TZ-step3)*100000
            +(Vl1*PipValue*(-PL1+PL2+TZ))*100000;
      Loss2=NormalizeDouble(MathAbs(Loss2),decimalPlace);
      Vl2=NormalizeDouble(Loss2/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss2:",Loss2,"Vl2: ",Vl2);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V2M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss2=Lots*PipValue*(PL0-PL2-TZ1)*100000
            +(Vl1*PipValue*((PL0-PL2)-(PL0-PL1)-TZ1))*100000;
      Loss2=NormalizeDouble(MathAbs(Loss2),decimalPlace);
      Vl2=NormalizeDouble(Loss2/TZ1/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss2=2*Lots*PipValue*(-PL0+PL2+TZ1-step2)*100000
            +(Vl1*PipValue*(-PL1+PL2+TZ1))*100000;
      Loss2=NormalizeDouble(MathAbs(Loss2),decimalPlace);
      Vl2=NormalizeDouble(Loss2/TZ1/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss2=3*Lots*PipValue*(-PL0+PL2+TZ1-step3)*100000
            +(Vl1*PipValue*(-PL1+PL2+TZ1))*100000;
      Loss2=NormalizeDouble(MathAbs(Loss2),decimalPlace);
      Vl2=NormalizeDouble(Loss2/TZ1/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss2:",Loss2,"Vl2: ",NormalizeDouble(Vl2,2));
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V3()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss3=Lots*PipValue*(-PL0+PL3+TZ)*100000
            +(Vl1*PipValue*(-PL1+PL3+TZ))*100000
            +(Vl2*PipValue*(-PL2+PL3+TZ))*100000;
      Loss3=NormalizeDouble(MathAbs(Loss3),decimalPlace);
      Vl3=NormalizeDouble(Loss3/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss3=2*Lots*PipValue*(-PL0+PL3+TZ-step2)*100000
            +(Vl1*PipValue*(-PL1+PL3+TZ))*100000
            +(Vl2*PipValue*(-PL2+PL3+TZ))*100000;
      Loss3=NormalizeDouble(MathAbs(Loss3),decimalPlace);
      Vl3=NormalizeDouble(Loss3/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss3=3*Lots*PipValue*(-PL0+PL3+TZ-step3)*100000
            +(Vl1*PipValue*(-PL1+PL3+TZ))*100000
            +(Vl2*PipValue*(-PL2+PL3+TZ))*100000;
      Loss3=NormalizeDouble(MathAbs(Loss3),decimalPlace);
      Vl3=NormalizeDouble(Loss3/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss3:",Loss3,"Vl3: ",Vl3);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V3M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss3=Lots*PipValue*(-PL0+PL3+TZ2)*100000
            +(Vl1*PipValue*(-PL1+PL3+TZ2))*100000
            +(Vl2*PipValue*(-PL2+PL3+TZ2))*100000;
      Loss3=NormalizeDouble(MathAbs(Loss3),decimalPlace);
      Vl3=NormalizeDouble(Loss3/TZ2/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss3=2*Lots*PipValue*(-PL0+PL3+TZ2-step2)*100000
            +(Vl1*PipValue*(-PL1+PL3+TZ2))*100000
            +(Vl2*PipValue*(-PL2+PL3+TZ2))*100000;
      Loss3=NormalizeDouble(MathAbs(Loss3),decimalPlace);
      Vl3=NormalizeDouble(Loss3/TZ2/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss3=3*Lots*PipValue*(-PL0+PL3+TZ2-step3)*100000
            +(Vl1*PipValue*(-PL1+PL3+TZ2))*100000
            +(Vl2*PipValue*(-PL2+PL3+TZ2))*100000;
      Loss3=NormalizeDouble(MathAbs(Loss3),decimalPlace);
      Vl3=NormalizeDouble(Loss3/TZ2/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss3:",Loss3,"Vl3: ",Vl3);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V4()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss4=Lots*PipValue*(+PL4-PL0+TZ)*100000
            +(Vl1*PipValue*(+PL4-PL1+TZ))*100000
            +(Vl2*PipValue*(+PL4-PL2+TZ))*100000
            +(Vl3*PipValue*(+PL4-PL3+TZ))*100000;

      Loss4=NormalizeDouble(MathAbs(Loss4),decimalPlace);
      Vl4=NormalizeDouble(Loss4/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss4=2*Lots*PipValue*(+PL4-PL0+TZ-step2)*100000
            +(Vl1*PipValue*(+PL4-PL1+TZ))*100000
            +(Vl2*PipValue*(+PL4-PL2+TZ))*100000
            +(Vl3*PipValue*(PL4-PL3+TZ))*100000;
      Loss4=NormalizeDouble(MathAbs(Loss4),decimalPlace);
      Vl4=NormalizeDouble(Loss4/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss4=3*Lots*PipValue*(PL4-PL0+TZ-step3)*100000
            +(Vl1*PipValue*(PL4-PL1+TZ))*100000
            +(Vl2*PipValue*(PL4-PL2+TZ))*100000
            +(Vl3*PipValue*(PL4-PL3+TZ))*100000;
      Loss4=NormalizeDouble(MathAbs(Loss4),decimalPlace);
      Vl4=NormalizeDouble(Loss4/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss4:",Loss4," Vl4: ",Vl4);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V4M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss4=Lots*PipValue*(PL4-PL0+TZ3)*100000
            +(Vl1*PipValue*(PL4-PL1+TZ3))*100000
            +(Vl2*PipValue*(PL4-PL2+TZ3))*100000
            +(Vl3*PipValue*(PL4-PL3+TZ3))*100000;

      Loss4=NormalizeDouble(MathAbs(Loss4),decimalPlace);
      Vl4=NormalizeDouble(Loss4/TZ3/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss4=2*Lots*PipValue*(PL4-PL0+TZ3-step2)*100000
            +(Vl1*PipValue*(PL4-PL1+TZ3))*100000
            +(Vl2*PipValue*(PL4-PL2+TZ3))*100000
            +(Vl3*PipValue*(PL4-PL3+TZ3))*100000;
      Loss4=NormalizeDouble(MathAbs(Loss4),decimalPlace);
      Vl4=NormalizeDouble(Loss4/TZ3/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss4=3*Lots*PipValue*(PL4-PL0+TZ3-step3)*100000
            +(Vl1*PipValue*(PL4-PL1+TZ3))*100000
            +(Vl2*PipValue*(PL4-PL2+TZ3))*100000
            +(Vl3*PipValue*(PL4-PL3+TZ3))*100000;
      Loss4=NormalizeDouble(MathAbs(Loss4),decimalPlace);
      Vl4=NormalizeDouble(Loss4/TZ3/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss4:",Loss4," Vl4: ",Vl4);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V5()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss5=Lots*PipValue*(PL5-PL0+TZ)*100000
            +(Vl1*PipValue*(PL5-PL1+TZ))*100000
            +(Vl2*PipValue*(PL5-PL2+TZ))*100000
            +(Vl3*PipValue*(PL5-PL3+TZ))*100000
            +(Vl4*PipValue*(PL5-PL4+TZ))*100000;
      Loss5=NormalizeDouble(MathAbs(Loss5),decimalPlace);
      Vl5=NormalizeDouble(Loss5/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss5=2*Lots*PipValue*(PL5-PL0+TZ-step2)*100000
            +(Vl1*PipValue*(PL5-PL1+TZ))*100000
            +(Vl2*PipValue*(PL5-PL2+TZ))*100000
            +(Vl3*PipValue*(PL5-PL3+TZ))*100000
            +(Vl4*PipValue*(PL5-PL4+TZ))*100000;
      Loss5=NormalizeDouble(MathAbs(Loss5),decimalPlace);
      Vl5=NormalizeDouble(Loss5/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss5=3*Lots*PipValue*(PL5-PL0+TZ-step3)*100000
            +(Vl1*PipValue*(PL5-PL1+TZ))*100000
            +(Vl2*PipValue*(PL5-PL2+TZ))*100000
            +(Vl3*PipValue*(PL5-PL3+TZ))*100000
            +(Vl4*PipValue*(PL5-PL4+TZ))*100000;
      Loss5=NormalizeDouble(MathAbs(Loss5),decimalPlace);
      Vl5=NormalizeDouble(Loss5/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss5:",Loss5," Vl5: ",Vl5);
  }
//+------------------------------------------------------------------+
//| Multiplicator                                                                 |
//+------------------------------------------------------------------+
void Calculate_V5M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss5=Lots*PipValue*(PL5-PL0+TZ4)*100000
            +(Vl1*PipValue*(PL5-PL1+TZ4))*100000
            +(Vl2*PipValue*(PL5-PL2+TZ4))*100000
            +(Vl3*PipValue*(PL5-PL3+TZ4))*100000
            +(Vl4*PipValue*(PL5-PL4+TZ4))*100000;
      Loss5=NormalizeDouble(MathAbs(Loss5),decimalPlace);
      Vl5=NormalizeDouble(Loss5/TZ4/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss5=2*Lots*PipValue*(PL5-PL0+TZ4-step2)*100000
            +(Vl1*PipValue*(PL5-PL1+TZ4))*100000
            +(Vl2*PipValue*(PL5-PL2+TZ4))*100000
            +(Vl3*PipValue*(PL5-PL3+TZ4))*100000
            +(Vl4*PipValue*(PL5-PL4+TZ4))*100000;
      Loss5=NormalizeDouble(MathAbs(Loss5),decimalPlace);
      Vl5=NormalizeDouble(Loss5/TZ4/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss5=3*Lots*PipValue*(PL5-PL0+TZ4-step3)*100000
            +(Vl1*PipValue*(PL5-PL1+TZ4))*100000
            +(Vl2*PipValue*(PL5-PL2+TZ4))*100000
            +(Vl3*PipValue*(PL5-PL3+TZ4))*100000
            +(Vl4*PipValue*(PL5-PL4+TZ4))*100000;
      Loss5=NormalizeDouble(MathAbs(Loss5),decimalPlace);
      Vl5=NormalizeDouble(Loss5/TZ4/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss5:",Loss5," Vl5: ",Vl5);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V6()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss6=Lots*PipValue*(PL6-PL0+TZ)*100000
            +(Vl1*PipValue*(PL6-PL1+TZ))*100000
            +(Vl2*PipValue*(PL6-PL2+TZ))*100000
            +(Vl3*PipValue*(PL6-PL3+TZ))*100000
            +(Vl4*PipValue*(PL6-PL4+TZ))*100000
            +(Vl5*PipValue*(PL6-PL5+TZ))*100000;
      Loss6=NormalizeDouble(MathAbs(Loss6),decimalPlace);
      Vl6=NormalizeDouble(Loss6/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss6=2*Lots*PipValue*(PL6-PL0+TZ-step2)*100000
            +(Vl1*PipValue*(PL6-PL1+TZ))*100000
            +(Vl2*PipValue*(PL6-PL2+TZ))*100000
            +(Vl3*PipValue*(PL6-PL3+TZ))*100000
            +(Vl4*PipValue*(PL6-PL4+TZ))*100000
            +(Vl5*PipValue*(PL6-PL5+TZ))*100000;
      Loss6=NormalizeDouble(MathAbs(Loss6),decimalPlace);
      Vl6=NormalizeDouble(Loss6/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss6=3*Lots*PipValue*(PL6-PL0+TZ-step3)*100000
            +(Vl1*PipValue*(PL6-PL1+TZ))*100000
            +(Vl2*PipValue*(PL6-PL2+TZ))*100000
            +(Vl3*PipValue*(PL6-PL3+TZ))*100000
            +(Vl4*PipValue*(PL6-PL4+TZ))*100000
            +(Vl5*PipValue*(PL6-PL5+TZ))*100000;
      Loss6=NormalizeDouble(MathAbs(Loss6),decimalPlace);
      Vl6=NormalizeDouble(Loss6/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss6:",Loss6," Vl6:",Vl6);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V6M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss6=Lots*PipValue*(PL6-PL0+TZ5)*100000
            +(Vl1*PipValue*(PL6-PL1+TZ5))*100000
            +(Vl2*PipValue*(PL6-PL2+TZ5))*100000
            +(Vl3*PipValue*(PL6-PL3+TZ5))*100000
            +(Vl4*PipValue*(PL6-PL4+TZ5))*100000
            +(Vl5*PipValue*(PL6-PL5+TZ5))*100000;
      Loss6=NormalizeDouble(MathAbs(Loss6),decimalPlace);
      Vl6=NormalizeDouble(Loss6/TZ5/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss6=2*Lots*PipValue*(PL6-PL0+TZ5-step2)*100000
            +(Vl1*PipValue*(PL6-PL1+TZ5))*100000
            +(Vl2*PipValue*(PL6-PL2+TZ5))*100000
            +(Vl3*PipValue*(PL6-PL3+TZ5))*100000
            +(Vl4*PipValue*(PL6-PL4+TZ5))*100000
            +(Vl5*PipValue*(PL6-PL5+TZ5))*100000;
      Loss6=NormalizeDouble(MathAbs(Loss6),decimalPlace);
      Vl6=NormalizeDouble(Loss6/TZ5/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss6=3*Lots*PipValue*(PL6-PL0+TZ5-step3)*100000
            +(Vl1*PipValue*(PL6-PL1+TZ5))*100000
            +(Vl2*PipValue*(PL6-PL2+TZ5))*100000
            +(Vl3*PipValue*(PL6-PL3+TZ5))*100000
            +(Vl4*PipValue*(PL6-PL4+TZ5))*100000
            +(Vl5*PipValue*(PL6-PL5+TZ5))*100000;
      Loss6=NormalizeDouble(MathAbs(Loss6),decimalPlace);
      Vl6=NormalizeDouble(Loss6/TZ5/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss6:",Loss6," Vl6:",Vl6);
  }
//++-----------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V7()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss7=Lots*PipValue*(+PL7-PL0+TZ)*100000
            +(Vl1*PipValue*(+PL7-PL1+TZ))*100000
            +(Vl2*PipValue*(+PL7-PL2+TZ))*100000
            +(Vl3*PipValue*(+PL7-PL3+TZ))*100000
            +(Vl4*PipValue*(+PL7-PL4+TZ))*100000
            +(Vl5*PipValue*(+PL7-PL5+TZ))*100000
            +(Vl6*PipValue*(+PL7-PL6+TZ))*100000;
      Loss7=MathAbs(Loss7);
      Vl7=NormalizeDouble(Loss7/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss7=2*Lots*PipValue*(+PL7-PL0+TZ-step2)
            +(Vl1*PipValue*(+PL7-PL1+TZ))
            +(Vl2*PipValue*(+PL7-PL2+TZ))
            +(Vl3*PipValue*(+PL7-PL3+TZ))
            +(Vl4*PipValue*(+PL7-PL4+TZ))
            +(Vl5*PipValue*(+PL7-PL5+TZ))
            +(Vl6*PipValue*(+PL7-PL6+TZ));
      Loss7=NormalizeDouble(MathAbs(Loss7*100000),decimalPlace);
      Vl7=NormalizeDouble(Loss7/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss7=3*Lots*PipValue*(+PL7-PL0+TZ-step3)
            +(Vl1*PipValue*(+PL7-PL1+TZ))
            +(Vl2*PipValue*(+PL7-PL2+TZ))
            +(Vl3*PipValue*(+PL7-PL3+TZ))
            +(Vl4*PipValue*(+PL7-PL4+TZ))
            +(Vl5*PipValue*(+PL7-PL5+TZ))
            +(Vl6*PipValue*(+PL7-PL6+TZ));
      Loss7=NormalizeDouble(MathAbs(Loss7*100000),decimalPlace);
      Vl7=NormalizeDouble(Loss7/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss7:",Loss7," Vl7: ",Vl7);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V7M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss7=Lots*PipValue*(+PL7-PL0+TZ6)
            +(Vl1*PipValue*(+PL7-PL1+TZ6))
            +(Vl2*PipValue*(+PL7-PL2+TZ6))
            +(Vl3*PipValue*(+PL7-PL3+TZ6))
            +(Vl4*PipValue*(+PL7-PL4+TZ6))
            +(Vl5*PipValue*(+PL7-PL5+TZ6))
            +(Vl6*PipValue*(+PL7-PL6+TZ6));
      Loss7=NormalizeDouble(MathAbs(Loss7*100000),decimalPlace);
      Vl7=NormalizeDouble(Loss7/TZ6/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss7=2*Lots*PipValue*(+PL7-PL0+TZ6-step2)
            +(Vl1*PipValue*(+PL7-PL1+TZ6))
            +(Vl2*PipValue*(+PL7-PL2+TZ6))
            +(Vl3*PipValue*(+PL7-PL3+TZ6))
            +(Vl4*PipValue*(+PL7-PL4+TZ6))
            +(Vl5*PipValue*(+PL7-PL5+TZ6))
            +(Vl6*PipValue*(+PL7-PL6+TZ6));
      Loss7=NormalizeDouble(MathAbs(Loss7*100000),decimalPlace);
      Vl7=NormalizeDouble(Loss7/TZ6/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss7=3*Lots*PipValue*(+PL7-PL0+TZ6-step3)
            +(Vl1*PipValue*(+PL7-PL1+TZ6))
            +(Vl2*PipValue*(+PL7-PL2+TZ6))
            +(Vl3*PipValue*(+PL7-PL3+TZ6))
            +(Vl4*PipValue*(+PL7-PL4+TZ6))
            +(Vl5*PipValue*(+PL7-PL5+TZ6))
            +(Vl6*PipValue*(+PL7-PL6+TZ6));
      Loss7=NormalizeDouble(MathAbs(Loss7*100000),decimalPlace);
      Vl7=NormalizeDouble(Loss7/TZ6/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss7:",Loss7," Vl7: ",Vl7);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V8()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss8=Lots*PipValue*(+PL8-PL0+TZ)
            +(Vl1*PipValue*(+PL8-PL1+TZ))
            +(Vl2*PipValue*(+PL8-PL2+TZ))
            +(Vl3*PipValue*(+PL8-PL3+TZ))
            +(Vl4*PipValue*(+PL8-PL4+TZ))
            +(Vl5*PipValue*(+PL8-PL5+TZ))
            +(Vl6*PipValue*(+PL8-PL6+TZ))
            +(Vl7*PipValue*(+PL8-PL7+TZ));
      Loss8=NormalizeDouble(MathAbs(Loss8*100000),decimalPlace);
      Vl8=NormalizeDouble(Loss8/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss8=2*Lots*PipValue*(+PL8-PL0+TZ-step2)
            +(Vl1*PipValue*(+PL8-PL1+TZ))
            +(Vl2*PipValue*(+PL8-PL2+TZ))
            +(Vl3*PipValue*(+PL8-PL3+TZ))
            +(Vl4*PipValue*(+PL8-PL4+TZ))
            +(Vl5*PipValue*(+PL8-PL5+TZ))
            +(Vl6*PipValue*(+PL8-PL6+TZ))
            +(Vl7*PipValue*(+PL8-PL7+TZ));
      Loss8=NormalizeDouble(MathAbs(Loss8*100000),decimalPlace);
      Vl8=NormalizeDouble(Loss8/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss8=3*Lots*PipValue*(+PL8-PL0+TZ-step3)
            +(Vl1*PipValue*(+PL8-PL1+TZ))
            +(Vl2*PipValue*(+PL8-PL2+TZ))
            +(Vl3*PipValue*(+PL8-PL3+TZ))
            +(Vl4*PipValue*(+PL8-PL4+TZ))
            +(Vl5*PipValue*(+PL8-PL5+TZ))
            +(Vl6*PipValue*(+PL8-PL6+TZ))
            +(Vl7*PipValue*(+PL8-PL7+TZ));
      Loss8=NormalizeDouble(MathAbs(Loss8*100000),decimalPlace);
      Vl8=NormalizeDouble(Loss8/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss8:",Loss8," Vl8:",Vl8);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V8M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss8=Lots*PipValue*(+PL8-PL0+TZ7)
            +(Vl1*PipValue*(+PL8-PL1+TZ7))
            +(Vl2*PipValue*(+PL8-PL2+TZ7))
            +(Vl3*PipValue*(+PL8-PL3+TZ7))
            +(Vl4*PipValue*(+PL8-PL4+TZ7))
            +(Vl5*PipValue*(+PL8-PL5+TZ7))
            +(Vl6*PipValue*(+PL8-PL6+TZ7))
            +(Vl7*PipValue*(+PL8-PL7+TZ7));
      Loss8=NormalizeDouble(MathAbs(Loss8*100000),decimalPlace);
      Vl8=NormalizeDouble(Loss8/TZ7/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss8=2*Lots*PipValue*(+PL8-PL0+TZ7-step2)
            +(Vl1*PipValue*(+PL8-PL1+TZ7))
            +(Vl2*PipValue*(+PL8-PL2+TZ7))
            +(Vl3*PipValue*(+PL8-PL3+TZ7))
            +(Vl4*PipValue*(+PL8-PL4+TZ7))
            +(Vl5*PipValue*(+PL8-PL5+TZ7))
            +(Vl6*PipValue*(+PL8-PL6+TZ7))
            +(Vl7*PipValue*(+PL8-PL7+TZ7));
      Loss8=NormalizeDouble(MathAbs(Loss8*100000),decimalPlace);
      Vl8=NormalizeDouble(Loss8/TZ7/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss8=3*Lots*PipValue*(+PL8-PL0+TZ7-step3)
            +(Vl1*PipValue*(+PL8-PL1+TZ7))
            +(Vl2*PipValue*(+PL8-PL2+TZ7))
            +(Vl3*PipValue*(+PL8-PL3+TZ7))
            +(Vl4*PipValue*(+PL8-PL4+TZ7))
            +(Vl5*PipValue*(+PL8-PL5+TZ7))
            +(Vl6*PipValue*(+PL8-PL6+TZ7))
            +(Vl7*PipValue*(+PL8-PL7+TZ7));
      Loss8=NormalizeDouble(MathAbs(Loss8*100000),decimalPlace);
      Vl8=NormalizeDouble(Loss8/TZ7/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss8:",Loss8," Vl8:",Vl8);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V9()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss9=Lots*PipValue*(+PL9-PL0+TZ)
            +(Vl1*PipValue*(+PL9-PL1+TZ))
            +(Vl2*PipValue*(+PL9-PL2+TZ))
            +(Vl3*PipValue*(+PL9-PL3+TZ))
            +(Vl4*PipValue*(+PL9-PL4+TZ))
            +(Vl5*PipValue*(+PL9-PL5+TZ))
            +(Vl6*PipValue*(+PL9-PL6+TZ))
            +(Vl7*PipValue*(+PL9-PL7+TZ))
            +(Vl8*PipValue*(+PL9-PL8+TZ));
      Loss9=NormalizeDouble(MathAbs(Loss9*100000),decimalPlace);
      Vl9=NormalizeDouble(Loss9/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss9=2*Lots*PipValue*(+PL9-PL0+TZ-step2)
            +(Vl1*PipValue*(+PL9-PL1+TZ))
            +(Vl2*PipValue*(+PL9-PL2+TZ))
            +(Vl3*PipValue*(+PL9-PL3+TZ))
            +(Vl4*PipValue*(+PL9-PL4+TZ))
            +(Vl5*PipValue*(+PL9-PL5+TZ))
            +(Vl6*PipValue*(+PL9-PL6+TZ))
            +(Vl7*PipValue*(+PL9-PL7+TZ))
            +(Vl8*PipValue*(+PL9-PL8+TZ));
      Loss9=NormalizeDouble(MathAbs(Loss9*100000),decimalPlace);
      Vl9=NormalizeDouble(Loss9/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss9=3*Lots*PipValue*(+PL9-PL0+TZ-step3)
            +(Vl1*PipValue*(+PL9-PL1+TZ))
            +(Vl2*PipValue*(+PL9-PL2+TZ))
            +(Vl3*PipValue*(+PL9-PL3+TZ))
            +(Vl4*PipValue*(+PL9-PL4+TZ))
            +(Vl5*PipValue*(+PL9-PL5+TZ))
            +(Vl6*PipValue*(+PL9-PL6+TZ))
            +(Vl7*PipValue*(+PL9-PL7+TZ))
            +(Vl8*PipValue*(+PL9-PL8+TZ));
      Loss9=NormalizeDouble(MathAbs(Loss9*100000),decimalPlace);
      Vl9=NormalizeDouble(Loss9/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss9:",Loss9," Vl9: ",Vl9);
  }
//++-----------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V9M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss9=Lots*PipValue*(+PL9-PL0+TZ8)
            +(Vl1*PipValue*(+PL9-PL1+TZ8))
            +(Vl2*PipValue*(+PL9-PL2+TZ8))
            +(Vl3*PipValue*(+PL9-PL3+TZ8))
            +(Vl4*PipValue*(+PL9-PL4+TZ8))
            +(Vl5*PipValue*(+PL9-PL5+TZ8))
            +(Vl6*PipValue*(+PL9-PL6+TZ8))
            +(Vl7*PipValue*(+PL9-PL7+TZ8))
            +(Vl8*PipValue*(+PL9-PL8+TZ8));
      Loss9=NormalizeDouble(MathAbs(Loss9*100000),decimalPlace);
      Vl9=NormalizeDouble(Loss9/TZ8/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss9=2*Lots*PipValue*(+PL9-PL0+TZ8-step2)
            +(Vl1*PipValue*(+PL9-PL1+TZ8))
            +(Vl2*PipValue*(+PL9-PL2+TZ8))
            +(Vl3*PipValue*(+PL9-PL3+TZ8))
            +(Vl4*PipValue*(+PL9-PL4+TZ8))
            +(Vl5*PipValue*(+PL9-PL5+TZ8))
            +(Vl6*PipValue*(+PL9-PL6+TZ8))
            +(Vl7*PipValue*(+PL9-PL7+TZ8))
            +(Vl8*PipValue*(+PL9-PL8+TZ8));
      Loss9=NormalizeDouble(MathAbs(Loss9*100000),decimalPlace);
      Vl9=NormalizeDouble(Loss9/TZ8/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss9=3*Lots*PipValue*(+PL9-PL0+TZ8-step3)
            +(Vl1*PipValue*(+PL9-PL1+TZ8))
            +(Vl2*PipValue*(+PL9-PL2+TZ8))
            +(Vl3*PipValue*(+PL9-PL3+TZ8))
            +(Vl4*PipValue*(+PL9-PL4+TZ8))
            +(Vl5*PipValue*(+PL9-PL5+TZ8))
            +(Vl6*PipValue*(+PL9-PL6+TZ8))
            +(Vl7*PipValue*(+PL9-PL7+TZ8))
            +(Vl8*PipValue*(+PL9-PL8+TZ8));
      Loss9=NormalizeDouble(MathAbs(Loss9*100000),decimalPlace);
      Vl9=NormalizeDouble(Loss9/TZ8/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss9:",Loss9," Vl9: ",Vl9);
  }

//+++----------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V10()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss10=Lots*PipValue*(+PL10-PL0+TZ)
             +(Vl1*PipValue*(+PL10-PL1+TZ))
             +(Vl2*PipValue*(+PL10-PL2+TZ))
             +(Vl3*PipValue*(+PL10-PL3+TZ))
             +(Vl4*PipValue*(+PL10-PL4+TZ))
             +(Vl5*PipValue*(+PL10-PL5+TZ))
             +(Vl6*PipValue*(+PL10-PL6+TZ))
             +(Vl7*PipValue*(+PL10-PL7+TZ))
             +(Vl8*PipValue*(+PL10-PL8+TZ))
             +(Vl8*PipValue*(+PL10-PL8+TZ))
             +(Vl9*PipValue*(+PL10-PL9+TZ));
      Loss10=NormalizeDouble(MathAbs(Loss10*100000),decimalPlace);
      Vl10=NormalizeDouble(MathAbs(Loss10)/TZ/PipValue/100000,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss10=2*Lots*PipValue*(+PL10-PL0+TZ-step2)
             +(Vl1*PipValue*(+PL10-PL1+TZ))
             +(Vl2*PipValue*(+PL10-PL2+TZ))
             +(Vl3*PipValue*(+PL10-PL3+TZ))
             +(Vl4*PipValue*(+PL10-PL4+TZ))
             +(Vl5*PipValue*(+PL10-PL5+TZ))
             +(Vl6*PipValue*(+PL10-PL6+TZ))
             +(Vl7*PipValue*(+PL10-PL7+TZ))
             +(Vl8*PipValue*(+PL10-PL8+TZ))
             +(Vl8*PipValue*(+PL10-PL8+TZ))
             +(Vl9*PipValue*(+PL10-PL9+TZ));
      Loss10=NormalizeDouble(MathAbs(Loss10*100000),decimalPlace);
      Vl10=NormalizeDouble(MathAbs(Loss10)/TZ/PipValue/100000,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss10=3*Lots*PipValue*(+PL10-PL0+TZ-step3)
             +(Vl1*PipValue*(+PL10-PL1+TZ))
             +(Vl2*PipValue*(+PL10-PL2+TZ))
             +(Vl3*PipValue*(+PL10-PL3+TZ))
             +(Vl4*PipValue*(+PL10-PL4+TZ))
             +(Vl5*PipValue*(+PL10-PL5+TZ))
             +(Vl6*PipValue*(+PL10-PL6+TZ))
             +(Vl7*PipValue*(+PL10-PL7+TZ))
             +(Vl8*PipValue*(+PL10-PL8+TZ))
             +(Vl8*PipValue*(+PL10-PL8+TZ))
             +(Vl9*PipValue*(+PL10-PL9+TZ));
      Loss10=NormalizeDouble(MathAbs(Loss10*100000),decimalPlace);
      Vl10=NormalizeDouble(MathAbs(Loss10)/TZ/PipValue/100000,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss10:",Loss10," Vl10: ",Vl10);
  }
//++++++-------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V10M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss10=Lots*PipValue*(+PL10-PL0+TZ9)
             +(Vl1*PipValue*(+PL10-PL1+TZ9))
             +(Vl2*PipValue*(+PL10-PL2+TZ9))
             +(Vl3*PipValue*(+PL10-PL3+TZ9))
             +(Vl4*PipValue*(+PL10-PL4+TZ9))
             +(Vl5*PipValue*(+PL10-PL5+TZ9))
             +(Vl6*PipValue*(+PL10-PL6+TZ9))
             +(Vl7*PipValue*(+PL10-PL7+TZ9))
             +(Vl8*PipValue*(+PL10-PL8+TZ9))
             +(Vl8*PipValue*(+PL10-PL8+TZ9))
             +(Vl9*PipValue*(+PL10-PL9+TZ9));
      Vl10=NormalizeDouble(MathAbs(Loss10)/TZ9/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss10=2*Lots*PipValue*(+PL10-PL0+TZ9-step2)
             +(Vl1*PipValue*(+PL10-PL1+TZ9))
             +(Vl2*PipValue*(+PL10-PL2+TZ9))
             +(Vl3*PipValue*(+PL10-PL3+TZ9))
             +(Vl4*PipValue*(+PL10-PL4+TZ9))
             +(Vl5*PipValue*(+PL10-PL5+TZ9))
             +(Vl6*PipValue*(+PL10-PL6+TZ9))
             +(Vl7*PipValue*(+PL10-PL7+TZ9))
             +(Vl8*PipValue*(+PL10-PL8+TZ9))
             +(Vl8*PipValue*(+PL10-PL8+TZ9))
             +(Vl9*PipValue*(+PL10-PL9+TZ9));
      Vl10=NormalizeDouble(MathAbs(Loss10)/TZ9/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss10=3*Lots*PipValue*(+PL10-PL0+TZ9-step3)
             +(Vl1*PipValue*(+PL10-PL1+TZ9))
             +(Vl2*PipValue*(+PL10-PL2+TZ9))
             +(Vl3*PipValue*(+PL10-PL3+TZ9))
             +(Vl4*PipValue*(+PL10-PL4+TZ9))
             +(Vl5*PipValue*(+PL10-PL5+TZ9))
             +(Vl6*PipValue*(+PL10-PL6+TZ9))
             +(Vl7*PipValue*(+PL10-PL7+TZ9))
             +(Vl8*PipValue*(+PL10-PL8+TZ9))
             +(Vl8*PipValue*(+PL10-PL8+TZ9))
             +(Vl9*PipValue*(+PL10-PL9+TZ9));
      Vl10=NormalizeDouble(MathAbs(Loss10)/TZ9/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss10:",Loss10," Vl10: ",Vl10);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V11()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss11=Lots*PipValue*(PL11-PL0+TZ)
             +(Vl1*PipValue*(PL11-PL1+TZ))
             +(Vl2*PipValue*(PL11-PL2+TZ))
             +(Vl3*PipValue*(PL11-PL3+TZ))
             +(Vl4*PipValue*(PL11-PL4+TZ))
             +(Vl5*PipValue*(PL11-PL5+TZ))
             +(Vl6*PipValue*(PL11-PL6+TZ))
             +(Vl7*PipValue*(PL11-PL7+TZ))
             +(Vl8*PipValue*(PL11-PL8+TZ))
             +(Vl8*PipValue*(PL11-PL9+TZ))
             +(Vl9*PipValue*(PL11-PL9+TZ))
             +(Vl10*PipValue*(PL11-PL10+TZ));
      Vl11=NormalizeDouble(MathAbs(Loss11)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss11=2*Lots*PipValue*(PL11-PL0+TZ-step2)
             +(Vl1*PipValue*(PL11-PL1+TZ))
             +(Vl2*PipValue*(PL11-PL2+TZ))
             +(Vl3*PipValue*(PL11-PL3+TZ))
             +(Vl4*PipValue*(PL11-PL4+TZ))
             +(Vl5*PipValue*(PL11-PL5+TZ))
             +(Vl6*PipValue*(PL11-PL6+TZ))
             +(Vl7*PipValue*(PL11-PL7+TZ))
             +(Vl8*PipValue*(PL11-PL8+TZ))
             +(Vl8*PipValue*(PL11-PL9+TZ))
             +(Vl9*PipValue*(PL11-PL9+TZ))
             +(Vl10*PipValue*(PL11-PL10+TZ));
      Vl11=NormalizeDouble(MathAbs(Loss11)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss11=3*Lots*PipValue*(PL11-PL0+TZ-step3)
             +(Vl1*PipValue*(PL11-PL1+TZ))
             +(Vl2*PipValue*(PL11-PL2+TZ))
             +(Vl3*PipValue*(PL11-PL3+TZ))
             +(Vl4*PipValue*(PL11-PL4+TZ))
             +(Vl5*PipValue*(PL11-PL5+TZ))
             +(Vl6*PipValue*(PL11-PL6+TZ))
             +(Vl7*PipValue*(PL11-PL7+TZ))
             +(Vl8*PipValue*(PL11-PL8+TZ))
             +(Vl8*PipValue*(PL11-PL9+TZ))
             +(Vl9*PipValue*(PL11-PL9+TZ))
             +(Vl10*PipValue*(PL11-PL10+TZ));
      Vl11=NormalizeDouble(MathAbs(Loss11)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss11:",Loss11," Vl11: ",Vl11);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V11M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss11=Lots*PipValue*(PL11-PL0+TZ10)
             +(Vl1*PipValue*(PL11-PL1+TZ10))
             +(Vl2*PipValue*(PL11-PL2+TZ10))
             +(Vl3*PipValue*(PL11-PL3+TZ10))
             +(Vl4*PipValue*(PL11-PL4+TZ10))
             +(Vl5*PipValue*(PL11-PL5+TZ10))
             +(Vl6*PipValue*(PL11-PL6+TZ10))
             +(Vl7*PipValue*(PL11-PL7+TZ10))
             +(Vl8*PipValue*(PL11-PL8+TZ10))
             +(Vl8*PipValue*(PL11-PL9+TZ10))
             +(Vl9*PipValue*(PL11-PL9+TZ10))
             +(Vl10*PipValue*(PL11-PL10+TZ10));
      Vl11=NormalizeDouble(MathAbs(Loss11)/TZ10/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss11=2*Lots*PipValue*(PL11-PL0+TZ10-step2)
             +(Vl1*PipValue*(PL11-PL1+TZ10))
             +(Vl2*PipValue*(PL11-PL2+TZ10))
             +(Vl3*PipValue*(PL11-PL3+TZ10))
             +(Vl4*PipValue*(PL11-PL4+TZ10))
             +(Vl5*PipValue*(PL11-PL5+TZ10))
             +(Vl6*PipValue*(PL11-PL6+TZ10))
             +(Vl7*PipValue*(PL11-PL7+TZ10))
             +(Vl8*PipValue*(PL11-PL8+TZ10))
             +(Vl8*PipValue*(PL11-PL9+TZ10))
             +(Vl9*PipValue*(PL11-PL9+TZ10))
             +(Vl10*PipValue*(PL11-PL10+TZ));
      Vl11=NormalizeDouble(MathAbs(Loss11)/TZ10/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss11=3*Lots*PipValue*(PL11-PL0+TZ10-step3)
             +(Vl1*PipValue*(PL11-PL1+TZ10))
             +(Vl2*PipValue*(PL11-PL2+TZ10))
             +(Vl3*PipValue*(PL11-PL3+TZ10))
             +(Vl4*PipValue*(PL11-PL4+TZ10))
             +(Vl5*PipValue*(PL11-PL5+TZ10))
             +(Vl6*PipValue*(PL11-PL6+TZ10))
             +(Vl7*PipValue*(PL11-PL7+TZ10))
             +(Vl8*PipValue*(PL11-PL8+TZ10))
             +(Vl8*PipValue*(PL11-PL9+TZ10))
             +(Vl9*PipValue*(PL11-PL9+TZ10))
             +(Vl10*PipValue*(PL11-PL10+TZ10));
      Vl11=NormalizeDouble(MathAbs(Loss11)/TZ10/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss11:",Loss11," Vl11: ",Vl11);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V12()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss12=Lots*PipValue*(PL12-PL0+TZ)
             +(Vl1*PipValue*(PL12-PL1+TZ))
             +(Vl2*PipValue*(PL12-PL2+TZ))
             +(Vl3*PipValue*(PL12-PL3+TZ))
             +(Vl4*PipValue*(PL12-PL4+TZ))
             +(Vl5*PipValue*(PL12-PL5+TZ))
             +(Vl6*PipValue*(PL12-PL6+TZ))
             +(Vl7*PipValue*(PL12-PL7+TZ))
             +(Vl8*PipValue*(PL12-PL8+TZ))
             +(Vl8*PipValue*(PL12-PL9+TZ))
             +(Vl9*PipValue*(PL12-PL9+TZ))
             +(Vl10*PipValue*(PL12-PL10+TZ))
             +(Vl11*PipValue*(PL12-PL11+TZ));
      Vl12=NormalizeDouble(MathAbs(Loss12)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss12=2*Lots*PipValue*(PL12-PL0+TZ-step2)
             +(Vl1*PipValue*(PL12-PL1+TZ))
             +(Vl2*PipValue*(PL12-PL2+TZ))
             +(Vl3*PipValue*(PL12-PL3+TZ))
             +(Vl4*PipValue*(PL12-PL4+TZ))
             +(Vl5*PipValue*(PL12-PL5+TZ))
             +(Vl6*PipValue*(PL12-PL6+TZ))
             +(Vl7*PipValue*(PL12-PL7+TZ))
             +(Vl8*PipValue*(PL12-PL8+TZ))
             +(Vl8*PipValue*(PL12-PL9+TZ))
             +(Vl9*PipValue*(PL12-PL9+TZ))
             +(Vl10*PipValue*(PL12-PL10+TZ))
             +(Vl11*PipValue*(PL12-PL11+TZ));
      Vl12=NormalizeDouble(MathAbs(Loss12)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss12=3*Lots*PipValue*(PL12-PL0+TZ-step3)
             +(Vl1*PipValue*(PL12-PL1+TZ))
             +(Vl2*PipValue*(PL12-PL2+TZ))
             +(Vl3*PipValue*(PL12-PL3+TZ))
             +(Vl4*PipValue*(PL12-PL4+TZ))
             +(Vl5*PipValue*(PL12-PL5+TZ))
             +(Vl6*PipValue*(PL12-PL6+TZ))
             +(Vl7*PipValue*(PL12-PL7+TZ))
             +(Vl8*PipValue*(PL12-PL8+TZ))
             +(Vl8*PipValue*(PL12-PL9+TZ))
             +(Vl9*PipValue*(PL12-PL9+TZ))
             +(Vl10*PipValue*(PL12-PL10+TZ))
             +(Vl11*PipValue*(PL12-PL11+TZ));
      Vl12=NormalizeDouble(MathAbs(Loss12)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss12:",Loss12," Vl12: ",Vl12);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V12M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss12=Lots*PipValue*(PL12-PL0+TZ11)
             +(Vl1*PipValue*(PL12-PL1+TZ11))
             +(Vl2*PipValue*(PL12-PL2+TZ11))
             +(Vl3*PipValue*(PL12-PL3+TZ11))
             +(Vl4*PipValue*(PL12-PL4+TZ11))
             +(Vl5*PipValue*(PL12-PL5+TZ11))
             +(Vl6*PipValue*(PL12-PL6+TZ11))
             +(Vl7*PipValue*(PL12-PL7+TZ11))
             +(Vl8*PipValue*(PL12-PL8+TZ11))
             +(Vl8*PipValue*(PL12-PL9+TZ11))
             +(Vl9*PipValue*(PL12-PL9+TZ11))
             +(Vl10*PipValue*(PL12-PL10+TZ11))
             +(Vl11*PipValue*(PL12-PL11+TZ11));
      Vl12=NormalizeDouble(MathAbs(Loss12)/TZ11/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss12=2*Lots*PipValue*(PL12-PL0+TZ11-step2)
             +(Vl1*PipValue*(PL12-PL1+TZ11))
             +(Vl2*PipValue*(PL12-PL2+TZ11))
             +(Vl3*PipValue*(PL12-PL3+TZ11))
             +(Vl4*PipValue*(PL12-PL4+TZ11))
             +(Vl5*PipValue*(PL12-PL5+TZ11))
             +(Vl6*PipValue*(PL12-PL6+TZ11))
             +(Vl7*PipValue*(PL12-PL7+TZ11))
             +(Vl8*PipValue*(PL12-PL8+TZ11))
             +(Vl8*PipValue*(PL12-PL9+TZ11))
             +(Vl9*PipValue*(PL12-PL9+TZ11))
             +(Vl10*PipValue*(PL12-PL10+TZ11))
             +(Vl11*PipValue*(PL12-PL11+TZ11));
      Vl12=NormalizeDouble(MathAbs(Loss12)/TZ11/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss12=3*Lots*PipValue*(PL12-PL0+TZ11-step3)
             +(Vl1*PipValue*(PL12-PL1+TZ11))
             +(Vl2*PipValue*(PL12-PL2+TZ11))
             +(Vl3*PipValue*(PL12-PL3+TZ11))
             +(Vl4*PipValue*(PL12-PL4+TZ11))
             +(Vl5*PipValue*(PL12-PL5+TZ11))
             +(Vl6*PipValue*(PL12-PL6+TZ11))
             +(Vl7*PipValue*(PL12-PL7+TZ11))
             +(Vl8*PipValue*(PL12-PL8+TZ11))
             +(Vl8*PipValue*(PL12-PL9+TZ11))
             +(Vl9*PipValue*(PL12-PL9+TZ11))
             +(Vl10*PipValue*(PL12-PL10+TZ11))
             +(Vl11*PipValue*(PL12-PL11+TZ11));
      Vl12=NormalizeDouble(MathAbs(Loss12)/TZ11/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss12:",Loss12," Vl12: ",Vl12);
  }

//++-----------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V13()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss13=Lots*PipValue*(PL13-PL0+TZ)
             +(Vl1*PipValue*(PL13-PL1+TZ))
             +(Vl2*PipValue*(PL13-PL2+TZ))
             +(Vl3*PipValue*(PL13-PL3+TZ))
             +(Vl4*PipValue*(PL13-PL4+TZ))
             +(Vl5*PipValue*(PL13-PL5+TZ))
             +(Vl6*PipValue*(PL13-PL6+TZ))
             +(Vl7*PipValue*(PL13-PL7+TZ))
             +(Vl8*PipValue*(PL13-PL8+TZ))
             +(Vl8*PipValue*(PL13-PL9+TZ))
             +(Vl9*PipValue*(PL13-PL9+TZ))
             +(Vl10*PipValue*(PL13-PL10+TZ))
             +(Vl11*PipValue*(PL13-PL11+TZ))
             +(Vl12*PipValue*(PL13-PL12+TZ));
      Vl13=NormalizeDouble(MathAbs(Loss13)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss13=2*Lots*PipValue*(PL13-PL0+TZ-step2)
             +(Vl1*PipValue*(PL13-PL1+TZ))
             +(Vl2*PipValue*(PL13-PL2+TZ))
             +(Vl3*PipValue*(PL13-PL3+TZ))
             +(Vl4*PipValue*(PL13-PL4+TZ))
             +(Vl5*PipValue*(PL13-PL5+TZ))
             +(Vl6*PipValue*(PL13-PL6+TZ))
             +(Vl7*PipValue*(PL13-PL7+TZ))
             +(Vl8*PipValue*(PL13-PL8+TZ))
             +(Vl8*PipValue*(PL13-PL9+TZ))
             +(Vl9*PipValue*(PL13-PL9+TZ))
             +(Vl10*PipValue*(PL13-PL10+TZ))
             +(Vl11*PipValue*(PL13-PL11+TZ))
             +(Vl12*PipValue*(PL13-PL12+TZ));
      Vl13=NormalizeDouble(MathAbs(Loss13)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss13=3*Lots*PipValue*(PL13-PL0+TZ-step3)
             +(Vl1*PipValue*(PL13-PL1+TZ))
             +(Vl2*PipValue*(PL13-PL2+TZ))
             +(Vl3*PipValue*(PL13-PL3+TZ))
             +(Vl4*PipValue*(PL13-PL4+TZ))
             +(Vl5*PipValue*(PL13-PL5+TZ))
             +(Vl6*PipValue*(PL13-PL6+TZ))
             +(Vl7*PipValue*(PL13-PL7+TZ))
             +(Vl8*PipValue*(PL13-PL8+TZ))
             +(Vl8*PipValue*(PL13-PL9+TZ))
             +(Vl9*PipValue*(PL13-PL9+TZ))
             +(Vl10*PipValue*(PL13-PL10+TZ))
             +(Vl11*PipValue*(PL13-PL11+TZ))
             +(Vl12*PipValue*(PL13-PL12+TZ));
      Vl13=NormalizeDouble(MathAbs(Loss13)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss13:",Loss13," Vl13: ",Vl13);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V13M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss13=Lots*PipValue*(PL13-PL0+TZ12)
             +(Vl1*PipValue*(PL13-PL1+TZ12))
             +(Vl2*PipValue*(PL13-PL2+TZ12))
             +(Vl3*PipValue*(PL13-PL3+TZ12))
             +(Vl4*PipValue*(PL13-PL4+TZ12))
             +(Vl5*PipValue*(PL13-PL5+TZ12))
             +(Vl6*PipValue*(PL13-PL6+TZ12))
             +(Vl7*PipValue*(PL13-PL7+TZ12))
             +(Vl8*PipValue*(PL13-PL8+TZ12))
             +(Vl8*PipValue*(PL13-PL9+TZ12))
             +(Vl9*PipValue*(PL13-PL9+TZ12))
             +(Vl10*PipValue*(PL13-PL10+TZ12))
             +(Vl11*PipValue*(PL13-PL11+TZ12))
             +(Vl12*PipValue*(PL13-PL12+TZ12));
      Vl13=NormalizeDouble(MathAbs(Loss13)/TZ12/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss13=2*Lots*PipValue*(PL13-PL0+TZ12-step2)
             +(Vl1*PipValue*(PL13-PL1+TZ12))
             +(Vl2*PipValue*(PL13-PL2+TZ12))
             +(Vl3*PipValue*(PL13-PL3+TZ12))
             +(Vl4*PipValue*(PL13-PL4+TZ12))
             +(Vl5*PipValue*(PL13-PL5+TZ12))
             +(Vl6*PipValue*(PL13-PL6+TZ12))
             +(Vl7*PipValue*(PL13-PL7+TZ12))
             +(Vl8*PipValue*(PL13-PL8+TZ12))
             +(Vl8*PipValue*(PL13-PL9+TZ12))
             +(Vl9*PipValue*(PL13-PL9+TZ12))
             +(Vl10*PipValue*(PL13-PL10+TZ12))
             +(Vl11*PipValue*(PL13-PL11+TZ12))
             +(Vl12*PipValue*(PL13-PL12+TZ12));
      Vl13=NormalizeDouble(MathAbs(Loss13)/TZ12/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss13=3*Lots*PipValue*(PL13-PL0+TZ12-step3)
             +(Vl1*PipValue*(PL13-PL1+TZ12))
             +(Vl2*PipValue*(PL13-PL2+TZ12))
             +(Vl3*PipValue*(PL13-PL3+TZ12))
             +(Vl4*PipValue*(PL13-PL4+TZ12))
             +(Vl5*PipValue*(PL13-PL5+TZ12))
             +(Vl6*PipValue*(PL13-PL6+TZ12))
             +(Vl7*PipValue*(PL13-PL7+TZ12))
             +(Vl8*PipValue*(PL13-PL8+TZ12))
             +(Vl8*PipValue*(PL13-PL9+TZ12))
             +(Vl9*PipValue*(PL13-PL9+TZ12))
             +(Vl10*PipValue*(PL13-PL10+TZ12))
             +(Vl11*PipValue*(PL13-PL11+TZ12))
             +(Vl12*PipValue*(PL13-PL12+TZ12));
      Vl13=NormalizeDouble(MathAbs(Loss13)/TZ12/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss13:",Loss13," Vl13: ",Vl13);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V14()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss14=Lots*PipValue*(PL14-PL0+TZ)
             +(Vl1*PipValue*(PL14-PL1+TZ))
             +(Vl2*PipValue*(PL14-PL2+TZ))
             +(Vl3*PipValue*(PL14-PL3+TZ))
             +(Vl4*PipValue*(PL14-PL4+TZ))
             +(Vl5*PipValue*(PL14-PL5+TZ))
             +(Vl6*PipValue*(PL14-PL6+TZ))
             +(Vl7*PipValue*(PL14-PL7+TZ))
             +(Vl8*PipValue*(PL14-PL8+TZ))
             +(Vl8*PipValue*(PL14-PL9+TZ))
             +(Vl9*PipValue*(PL14-PL9+TZ))
             +(Vl10*PipValue*(PL14-PL10+TZ))
             +(Vl11*PipValue*(PL14-PL11+TZ))
             +(Vl12*PipValue*(PL14-PL12+TZ))
             +(Vl13*PipValue*(PL14-PL13+TZ));
      Vl14=NormalizeDouble(MathAbs(Loss14)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss14=2*Lots*PipValue*(PL14-PL0+TZ-step2)
             +(Vl1*PipValue*(PL14-PL1+TZ))
             +(Vl2*PipValue*(PL14-PL2+TZ))
             +(Vl3*PipValue*(PL14-PL3+TZ))
             +(Vl4*PipValue*(PL14-PL4+TZ))
             +(Vl5*PipValue*(PL14-PL5+TZ))
             +(Vl6*PipValue*(PL14-PL6+TZ))
             +(Vl7*PipValue*(PL14-PL7+TZ))
             +(Vl8*PipValue*(PL14-PL8+TZ))
             +(Vl8*PipValue*(PL14-PL9+TZ))
             +(Vl9*PipValue*(PL14-PL9+TZ))
             +(Vl10*PipValue*(PL14-PL10+TZ))
             +(Vl11*PipValue*(PL14-PL11+TZ))
             +(Vl12*PipValue*(PL14-PL12+TZ))
             +(Vl13*PipValue*(PL14-PL13+TZ));
      Vl14=NormalizeDouble(MathAbs(Loss14)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss14=3*Lots*PipValue*(PL14-PL0+TZ-step3)
             +(Vl1*PipValue*(PL14-PL1+TZ))
             +(Vl2*PipValue*(PL14-PL2+TZ))
             +(Vl3*PipValue*(PL14-PL3+TZ))
             +(Vl4*PipValue*(PL14-PL4+TZ))
             +(Vl5*PipValue*(PL14-PL5+TZ))
             +(Vl6*PipValue*(PL14-PL6+TZ))
             +(Vl7*PipValue*(PL14-PL7+TZ))
             +(Vl8*PipValue*(PL14-PL8+TZ))
             +(Vl8*PipValue*(PL14-PL9+TZ))
             +(Vl9*PipValue*(PL14-PL9+TZ))
             +(Vl10*PipValue*(PL14-PL10+TZ))
             +(Vl11*PipValue*(PL14-PL11+TZ))
             +(Vl12*PipValue*(PL14-PL12+TZ))
             +(Vl13*PipValue*(PL14-PL13+TZ));
      Vl14=NormalizeDouble(MathAbs(Loss14)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss14:",Loss14," Vl14: ",Vl14);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V14M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss14=Lots*PipValue*(PL14-PL0+TZ13)
             +(Vl1*PipValue*(PL14-PL1+TZ13))
             +(Vl2*PipValue*(PL14-PL2+TZ13))
             +(Vl3*PipValue*(PL14-PL3+TZ13))
             +(Vl4*PipValue*(PL14-PL4+TZ13))
             +(Vl5*PipValue*(PL14-PL5+TZ13))
             +(Vl6*PipValue*(PL14-PL6+TZ13))
             +(Vl7*PipValue*(PL14-PL7+TZ13))
             +(Vl8*PipValue*(PL14-PL8+TZ13))
             +(Vl8*PipValue*(PL14-PL9+TZ13))
             +(Vl9*PipValue*(PL14-PL9+TZ13))
             +(Vl10*PipValue*(PL14-PL10+TZ13))
             +(Vl11*PipValue*(PL14-PL11+TZ13))
             +(Vl12*PipValue*(PL14-PL12+TZ13))
             +(Vl13*PipValue*(PL14-PL13+TZ13));
      Vl14=NormalizeDouble(MathAbs(Loss14)/TZ13/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss14=2*Lots*PipValue*(PL14-PL0+TZ13-step2)
             +(Vl1*PipValue*(PL14-PL1+TZ13))
             +(Vl2*PipValue*(PL14-PL2+TZ13))
             +(Vl3*PipValue*(PL14-PL3+TZ13))
             +(Vl4*PipValue*(PL14-PL4+TZ13))
             +(Vl5*PipValue*(PL14-PL5+TZ13))
             +(Vl6*PipValue*(PL14-PL6+TZ13))
             +(Vl7*PipValue*(PL14-PL7+TZ13))
             +(Vl8*PipValue*(PL14-PL8+TZ13))
             +(Vl8*PipValue*(PL14-PL9+TZ13))
             +(Vl9*PipValue*(PL14-PL9+TZ13))
             +(Vl10*PipValue*(PL14-PL10+TZ13))
             +(Vl11*PipValue*(PL14-PL11+TZ13))
             +(Vl12*PipValue*(PL14-PL12+TZ13))
             +(Vl13*PipValue*(PL14-PL13+TZ13));
      Vl14=NormalizeDouble(MathAbs(Loss14)/TZ13/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss14=3*Lots*PipValue*(PL14-PL0+TZ13-step3)
             +(Vl1*PipValue*(PL14-PL1+TZ13))
             +(Vl2*PipValue*(PL14-PL2+TZ13))
             +(Vl3*PipValue*(PL14-PL3+TZ13))
             +(Vl4*PipValue*(PL14-PL4+TZ13))
             +(Vl5*PipValue*(PL14-PL5+TZ13))
             +(Vl6*PipValue*(PL14-PL6+TZ13))
             +(Vl7*PipValue*(PL14-PL7+TZ13))
             +(Vl8*PipValue*(PL14-PL8+TZ13))
             +(Vl8*PipValue*(PL14-PL9+TZ13))
             +(Vl9*PipValue*(PL14-PL9+TZ13))
             +(Vl10*PipValue*(PL14-PL10+TZ13))
             +(Vl11*PipValue*(PL14-PL11+TZ13))
             +(Vl12*PipValue*(PL14-PL12+TZ13))
             +(Vl13*PipValue*(PL14-PL13+TZ13));
      Vl14=NormalizeDouble(MathAbs(Loss14)/TZ13/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss14:",Loss14," Vl14: ",Vl14);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V15()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss15=Lots*PipValue*(PL15-PL0+TZ)
             +(Vl1*PipValue*(PL15-PL1+TZ))
             +(Vl2*PipValue*(PL15-PL2+TZ))
             +(Vl3*PipValue*(PL15-PL3+TZ))
             +(Vl4*PipValue*(PL15-PL4+TZ))
             +(Vl5*PipValue*(PL15-PL5+TZ))
             +(Vl6*PipValue*(PL15-PL6+TZ))
             +(Vl7*PipValue*(PL15-PL7+TZ))
             +(Vl8*PipValue*(PL15-PL8+TZ))
             +(Vl8*PipValue*(PL15-PL9+TZ))
             +(Vl9*PipValue*(PL15-PL9+TZ))
             +(Vl10*PipValue*(PL15-PL10+TZ))
             +(Vl11*PipValue*(PL15-PL11+TZ))
             +(Vl12*PipValue*(PL15-PL12+TZ))
             +(Vl13*PipValue*(PL15-PL13+TZ))
             +(Vl14*PipValue*(PL15-PL14+TZ));
      Vl15=NormalizeDouble(MathAbs(Loss15)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss15=2*Lots*PipValue*(PL15-PL0+TZ-step2)
             +(Vl1*PipValue*(PL15-PL1+TZ))
             +(Vl2*PipValue*(PL15-PL2+TZ))
             +(Vl3*PipValue*(PL15-PL3+TZ))
             +(Vl4*PipValue*(PL15-PL4+TZ))
             +(Vl5*PipValue*(PL15-PL5+TZ))
             +(Vl6*PipValue*(PL15-PL6+TZ))
             +(Vl7*PipValue*(PL15-PL7+TZ))
             +(Vl8*PipValue*(PL15-PL8+TZ))
             +(Vl8*PipValue*(PL15-PL9+TZ))
             +(Vl9*PipValue*(PL15-PL9+TZ))
             +(Vl10*PipValue*(PL15-PL10+TZ))
             +(Vl11*PipValue*(PL15-PL11+TZ))
             +(Vl12*PipValue*(PL15-PL12+TZ))
             +(Vl13*PipValue*(PL15-PL13+TZ))
             +(Vl14*PipValue*(PL15-PL14+TZ));
      Vl15=NormalizeDouble(MathAbs(Loss15)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss15=3*Lots*PipValue*(PL15-PL0+TZ-step3)
             +(Vl1*PipValue*(PL15-PL1+TZ))
             +(Vl2*PipValue*(PL15-PL2+TZ))
             +(Vl3*PipValue*(PL15-PL3+TZ))
             +(Vl4*PipValue*(PL15-PL4+TZ))
             +(Vl5*PipValue*(PL15-PL5+TZ))
             +(Vl6*PipValue*(PL15-PL6+TZ))
             +(Vl7*PipValue*(PL15-PL7+TZ))
             +(Vl8*PipValue*(PL15-PL8+TZ))
             +(Vl8*PipValue*(PL15-PL9+TZ))
             +(Vl9*PipValue*(PL15-PL9+TZ))
             +(Vl10*PipValue*(PL15-PL10+TZ))
             +(Vl11*PipValue*(PL15-PL11+TZ))
             +(Vl12*PipValue*(PL15-PL12+TZ))
             +(Vl13*PipValue*(PL15-PL13+TZ))
             +(Vl14*PipValue*(PL15-PL14+TZ));
      Vl15=NormalizeDouble(MathAbs(Loss15)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss15:",Loss15," Vl15: ",Vl15);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V15M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss15=Lots*PipValue*(PL15-PL0+TZ14)
             +(Vl1*PipValue*(PL15-PL1+TZ14))
             +(Vl2*PipValue*(PL15-PL2+TZ14))
             +(Vl3*PipValue*(PL15-PL3+TZ14))
             +(Vl4*PipValue*(PL15-PL4+TZ14))
             +(Vl5*PipValue*(PL15-PL5+TZ14))
             +(Vl6*PipValue*(PL15-PL6+TZ14))
             +(Vl7*PipValue*(PL15-PL7+TZ14))
             +(Vl8*PipValue*(PL15-PL8+TZ14))
             +(Vl8*PipValue*(PL15-PL9+TZ14))
             +(Vl9*PipValue*(PL15-PL9+TZ14))
             +(Vl10*PipValue*(PL15-PL10+TZ14))
             +(Vl11*PipValue*(PL15-PL11+TZ14))
             +(Vl12*PipValue*(PL15-PL12+TZ14))
             +(Vl13*PipValue*(PL15-PL13+TZ14))
             +(Vl14*PipValue*(PL15-PL14+TZ14));
      Vl15=NormalizeDouble(MathAbs(Loss15)/TZ14/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss15=2*Lots*PipValue*(PL15-PL0+TZ14-step2)
             +(Vl1*PipValue*(PL15-PL1+TZ14))
             +(Vl2*PipValue*(PL15-PL2+TZ14))
             +(Vl3*PipValue*(PL15-PL3+TZ14))
             +(Vl4*PipValue*(PL15-PL4+TZ14))
             +(Vl5*PipValue*(PL15-PL5+TZ14))
             +(Vl6*PipValue*(PL15-PL6+TZ14))
             +(Vl7*PipValue*(PL15-PL7+TZ14))
             +(Vl8*PipValue*(PL15-PL8+TZ14))
             +(Vl8*PipValue*(PL15-PL9+TZ14))
             +(Vl9*PipValue*(PL15-PL9+TZ14))
             +(Vl10*PipValue*(PL15-PL10+TZ14))
             +(Vl11*PipValue*(PL15-PL11+TZ14))
             +(Vl12*PipValue*(PL15-PL12+TZ14))
             +(Vl13*PipValue*(PL15-PL13+TZ14))
             +(Vl14*PipValue*(PL15-PL14+TZ14));
      Vl15=NormalizeDouble(MathAbs(Loss15)/TZ14/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss15=3*Lots*PipValue*(PL15-PL0+TZ14-step3)
             +(Vl1*PipValue*(PL15-PL1+TZ14))
             +(Vl2*PipValue*(PL15-PL2+TZ14))
             +(Vl3*PipValue*(PL15-PL3+TZ14))
             +(Vl4*PipValue*(PL15-PL4+TZ14))
             +(Vl5*PipValue*(PL15-PL5+TZ14))
             +(Vl6*PipValue*(PL15-PL6+TZ14))
             +(Vl7*PipValue*(PL15-PL7+TZ14))
             +(Vl8*PipValue*(PL15-PL8+TZ14))
             +(Vl8*PipValue*(PL15-PL9+TZ14))
             +(Vl9*PipValue*(PL15-PL9+TZ14))
             +(Vl10*PipValue*(PL15-PL10+TZ14))
             +(Vl11*PipValue*(PL15-PL11+TZ14))
             +(Vl12*PipValue*(PL15-PL12+TZ14))
             +(Vl13*PipValue*(PL15-PL13+TZ14))
             +(Vl14*PipValue*(PL15-PL14+TZ14));
      Vl15=NormalizeDouble(MathAbs(Loss15)/TZ14/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss15:",Loss15," Vl15: ",Vl15);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V16()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss16=Lots*PipValue*(PL16-PL0+TZ)
             +(Vl1*PipValue*(PL16-PL1+TZ))
             +(Vl2*PipValue*(PL16-PL2+TZ))
             +(Vl3*PipValue*(PL16-PL3+TZ))
             +(Vl4*PipValue*(PL16-PL4+TZ))
             +(Vl5*PipValue*(PL16-PL5+TZ))
             +(Vl6*PipValue*(PL16-PL6+TZ))
             +(Vl7*PipValue*(PL16-PL7+TZ))
             +(Vl8*PipValue*(PL16-PL8+TZ))
             +(Vl8*PipValue*(PL16-PL9+TZ))
             +(Vl9*PipValue*(PL16-PL9+TZ))
             +(Vl10*PipValue*(PL16-PL10+TZ))
             +(Vl11*PipValue*(PL16-PL11+TZ))
             +(Vl12*PipValue*(PL16-PL12+TZ))
             +(Vl13*PipValue*(PL16-PL13+TZ))
             +(Vl14*PipValue*(PL16-PL14+TZ))
             +(Vl15*PipValue*(PL16-PL15+TZ));
      Vl16=NormalizeDouble(MathAbs(Loss16)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss16=2*Lots*PipValue*(PL16-PL0+TZ-step2)
             +(Vl1*PipValue*(PL16-PL1+TZ))
             +(Vl2*PipValue*(PL16-PL2+TZ))
             +(Vl3*PipValue*(PL16-PL3+TZ))
             +(Vl4*PipValue*(PL16-PL4+TZ))
             +(Vl5*PipValue*(PL16-PL5+TZ))
             +(Vl6*PipValue*(PL16-PL6+TZ))
             +(Vl7*PipValue*(PL16-PL7+TZ))
             +(Vl8*PipValue*(PL16-PL8+TZ))
             +(Vl8*PipValue*(PL16-PL9+TZ))
             +(Vl9*PipValue*(PL16-PL9+TZ))
             +(Vl10*PipValue*(PL16-PL10+TZ))
             +(Vl11*PipValue*(PL16-PL11+TZ))
             +(Vl12*PipValue*(PL16-PL12+TZ))
             +(Vl13*PipValue*(PL16-PL13+TZ))
             +(Vl14*PipValue*(PL16-PL14+TZ))
             +(Vl15*PipValue*(PL16-PL15+TZ));
      Vl16=NormalizeDouble(MathAbs(Loss16)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss16=3*Lots*PipValue*(PL16-PL0+TZ-step3)
             +(Vl1*PipValue*(PL16-PL1+TZ))
             +(Vl2*PipValue*(PL16-PL2+TZ))
             +(Vl3*PipValue*(PL16-PL3+TZ))
             +(Vl4*PipValue*(PL16-PL4+TZ))
             +(Vl5*PipValue*(PL16-PL5+TZ))
             +(Vl6*PipValue*(PL16-PL6+TZ))
             +(Vl7*PipValue*(PL16-PL7+TZ))
             +(Vl8*PipValue*(PL16-PL8+TZ))
             +(Vl8*PipValue*(PL16-PL9+TZ))
             +(Vl9*PipValue*(PL16-PL9+TZ))
             +(Vl10*PipValue*(PL16-PL10+TZ))
             +(Vl11*PipValue*(PL16-PL11+TZ))
             +(Vl12*PipValue*(PL16-PL12+TZ))
             +(Vl13*PipValue*(PL16-PL13+TZ))
             +(Vl14*PipValue*(PL16-PL14+TZ))
             +(Vl15*PipValue*(PL16-PL15+TZ));
      Vl16=NormalizeDouble(MathAbs(Loss16)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss16:",Loss16," Vl16: ",Vl16);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V16M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss16=Lots*PipValue*(PL16-PL0+TZ15)
             +(Vl1*PipValue*(PL16-PL1+TZ15))
             +(Vl2*PipValue*(PL16-PL2+TZ15))
             +(Vl3*PipValue*(PL16-PL3+TZ15))
             +(Vl4*PipValue*(PL16-PL4+TZ15))
             +(Vl5*PipValue*(PL16-PL5+TZ15))
             +(Vl6*PipValue*(PL16-PL6+TZ15))
             +(Vl7*PipValue*(PL16-PL7+TZ15))
             +(Vl8*PipValue*(PL16-PL8+TZ15))
             +(Vl8*PipValue*(PL16-PL9+TZ15))
             +(Vl9*PipValue*(PL16-PL9+TZ15))
             +(Vl10*PipValue*(PL16-PL10+TZ15))
             +(Vl11*PipValue*(PL16-PL11+TZ15))
             +(Vl12*PipValue*(PL16-PL12+TZ15))
             +(Vl13*PipValue*(PL16-PL13+TZ15))
             +(Vl14*PipValue*(PL16-PL14+TZ15))
             +(Vl15*PipValue*(PL16-PL15+TZ15));
      Vl16=NormalizeDouble(MathAbs(Loss16)/TZ15/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss16=2*Lots*PipValue*(PL16-PL0+TZ15-step2)
             +(Vl1*PipValue*(PL16-PL1+TZ15))
             +(Vl2*PipValue*(PL16-PL2+TZ15))
             +(Vl3*PipValue*(PL16-PL3+TZ15))
             +(Vl4*PipValue*(PL16-PL4+TZ15))
             +(Vl5*PipValue*(PL16-PL5+TZ15))
             +(Vl6*PipValue*(PL16-PL6+TZ15))
             +(Vl7*PipValue*(PL16-PL7+TZ15))
             +(Vl8*PipValue*(PL16-PL8+TZ15))
             +(Vl8*PipValue*(PL16-PL9+TZ15))
             +(Vl9*PipValue*(PL16-PL9+TZ15))
             +(Vl10*PipValue*(PL16-PL10+TZ15))
             +(Vl11*PipValue*(PL16-PL11+TZ15))
             +(Vl12*PipValue*(PL16-PL12+TZ15))
             +(Vl13*PipValue*(PL16-PL13+TZ15))
             +(Vl14*PipValue*(PL16-PL14+TZ15))
             +(Vl15*PipValue*(PL16-PL15+TZ15));
      Vl16=NormalizeDouble(MathAbs(Loss16)/TZ15/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {
      Loss16=3*Lots*PipValue*(PL16-PL0+TZ15-step3)
             +(Vl1*PipValue*(PL16-PL1+TZ15))
             +(Vl2*PipValue*(PL16-PL2+TZ15))
             +(Vl3*PipValue*(PL16-PL3+TZ15))
             +(Vl4*PipValue*(PL16-PL4+TZ15))
             +(Vl5*PipValue*(PL16-PL5+TZ15))
             +(Vl6*PipValue*(PL16-PL6+TZ15))
             +(Vl7*PipValue*(PL16-PL7+TZ15))
             +(Vl8*PipValue*(PL16-PL8+TZ15))
             +(Vl8*PipValue*(PL16-PL9+TZ15))
             +(Vl9*PipValue*(PL16-PL9+TZ15))
             +(Vl10*PipValue*(PL16-PL10+TZ15))
             +(Vl11*PipValue*(PL16-PL11+TZ15))
             +(Vl12*PipValue*(PL16-PL12+TZ15))
             +(Vl13*PipValue*(PL16-PL13+TZ15))
             +(Vl14*PipValue*(PL16-PL14+TZ15))
             +(Vl15*PipValue*(PL16-PL15+TZ15));
      Vl16=NormalizeDouble(MathAbs(Loss16)/TZ15/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss16:",Loss16," Vl16: ",Vl16);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V17()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss17=Lots*PipValue*(PL17-PL0+TZ)
             +(Vl1*PipValue*(PL17-PL1+TZ))
             +(Vl2*PipValue*(PL17-PL2+TZ))
             +(Vl3*PipValue*(PL17-PL3+TZ))
             +(Vl4*PipValue*(PL17-PL4+TZ))
             +(Vl5*PipValue*(PL17-PL5+TZ))
             +(Vl6*PipValue*(PL17-PL6+TZ))
             +(Vl7*PipValue*(PL17-PL7+TZ))
             +(Vl8*PipValue*(PL17-PL8+TZ))
             +(Vl8*PipValue*(PL17-PL9+TZ))
             +(Vl9*PipValue*(PL17-PL9+TZ))
             +(Vl10*PipValue*(PL17-PL10+TZ))
             +(Vl11*PipValue*(PL17-PL11+TZ))
             +(Vl12*PipValue*(PL17-PL12+TZ))
             +(Vl13*PipValue*(PL17-PL13+TZ))
             +(Vl14*PipValue*(PL17-PL14+TZ))
             +(Vl15*PipValue*(PL17-PL15+TZ))
             +(Vl16*PipValue*(PL17-PL16+TZ));
      Vl17=NormalizeDouble(MathAbs(Loss17)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss17=2*Lots*PipValue*(PL17-PL0+TZ-step2)
             +(Vl1*PipValue*(PL17-PL1+TZ))
             +(Vl2*PipValue*(PL17-PL2+TZ))
             +(Vl3*PipValue*(PL17-PL3+TZ))
             +(Vl4*PipValue*(PL17-PL4+TZ))
             +(Vl5*PipValue*(PL17-PL5+TZ))
             +(Vl6*PipValue*(PL17-PL6+TZ))
             +(Vl7*PipValue*(PL17-PL7+TZ))
             +(Vl8*PipValue*(PL17-PL8+TZ))
             +(Vl8*PipValue*(PL17-PL9+TZ))
             +(Vl9*PipValue*(PL17-PL9+TZ))
             +(Vl10*PipValue*(PL17-PL10+TZ))
             +(Vl11*PipValue*(PL17-PL11+TZ))
             +(Vl12*PipValue*(PL17-PL12+TZ))
             +(Vl13*PipValue*(PL17-PL13+TZ))
             +(Vl14*PipValue*(PL17-PL14+TZ))
             +(Vl15*PipValue*(PL17-PL15+TZ))
             +(Vl16*PipValue*(PL17-PL16+TZ));
      Vl17=NormalizeDouble(MathAbs(Loss17)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {

      Loss17=3*Lots*PipValue*(PL17-PL0+TZ-step3)
             +(Vl1*PipValue*(PL17-PL1+TZ))
             +(Vl2*PipValue*(PL17-PL2+TZ))
             +(Vl3*PipValue*(PL17-PL3+TZ))
             +(Vl4*PipValue*(PL17-PL4+TZ))
             +(Vl5*PipValue*(PL17-PL5+TZ))
             +(Vl6*PipValue*(PL17-PL6+TZ))
             +(Vl7*PipValue*(PL17-PL7+TZ))
             +(Vl8*PipValue*(PL17-PL8+TZ))
             +(Vl8*PipValue*(PL17-PL9+TZ))
             +(Vl9*PipValue*(PL17-PL9+TZ))
             +(Vl10*PipValue*(PL17-PL10+TZ))
             +(Vl11*PipValue*(PL17-PL11+TZ))
             +(Vl12*PipValue*(PL17-PL12+TZ))
             +(Vl13*PipValue*(PL17-PL13+TZ))
             +(Vl14*PipValue*(PL17-PL14+TZ))
             +(Vl15*PipValue*(PL17-PL15+TZ))
             +(Vl16*PipValue*(PL17-PL16+TZ));
      Vl17=NormalizeDouble(MathAbs(Loss17)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss17:",Loss17," Vl17: ",Vl17);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V17M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss17=Lots*PipValue*(PL17-PL0+TZ16)
             +(Vl1*PipValue*(PL17-PL1+TZ16))
             +(Vl2*PipValue*(PL17-PL2+TZ16))
             +(Vl3*PipValue*(PL17-PL3+TZ16))
             +(Vl4*PipValue*(PL17-PL4+TZ16))
             +(Vl5*PipValue*(PL17-PL5+TZ16))
             +(Vl6*PipValue*(PL17-PL6+TZ16))
             +(Vl7*PipValue*(PL17-PL7+TZ16))
             +(Vl8*PipValue*(PL17-PL8+TZ16))
             +(Vl8*PipValue*(PL17-PL9+TZ16))
             +(Vl9*PipValue*(PL17-PL9+TZ16))
             +(Vl10*PipValue*(PL17-PL10+TZ16))
             +(Vl11*PipValue*(PL17-PL11+TZ16))
             +(Vl12*PipValue*(PL17-PL12+TZ16))
             +(Vl13*PipValue*(PL17-PL13+TZ16))
             +(Vl14*PipValue*(PL17-PL14+TZ16))
             +(Vl15*PipValue*(PL17-PL15+TZ16))
             +(Vl16*PipValue*(PL17-PL16+TZ16));
      Vl17=NormalizeDouble(MathAbs(Loss17)/TZ16/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss17=2*Lots*PipValue*(PL17-PL0+TZ16-step2)
             +(Vl1*PipValue*(PL17-PL1+TZ16))
             +(Vl2*PipValue*(PL17-PL2+TZ16))
             +(Vl3*PipValue*(PL17-PL3+TZ16))
             +(Vl4*PipValue*(PL17-PL4+TZ16))
             +(Vl5*PipValue*(PL17-PL5+TZ16))
             +(Vl6*PipValue*(PL17-PL6+TZ16))
             +(Vl7*PipValue*(PL17-PL7+TZ16))
             +(Vl8*PipValue*(PL17-PL8+TZ16))
             +(Vl8*PipValue*(PL17-PL9+TZ16))
             +(Vl9*PipValue*(PL17-PL9+TZ16))
             +(Vl10*PipValue*(PL17-PL10+TZ16))
             +(Vl11*PipValue*(PL17-PL11+TZ16))
             +(Vl12*PipValue*(PL17-PL12+TZ16))
             +(Vl13*PipValue*(PL17-PL13+TZ16))
             +(Vl14*PipValue*(PL17-PL14+TZ16))
             +(Vl15*PipValue*(PL17-PL15+TZ16))
             +(Vl16*PipValue*(PL17-PL16+TZ16));
      Vl17=NormalizeDouble(MathAbs(Loss17)/TZ16/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {

      Loss17=3*Lots*PipValue*(PL17-PL0+TZ16-step3)
             +(Vl1*PipValue*(PL17-PL1+TZ16))
             +(Vl2*PipValue*(PL17-PL2+TZ16))
             +(Vl3*PipValue*(PL17-PL3+TZ16))
             +(Vl4*PipValue*(PL17-PL4+TZ16))
             +(Vl5*PipValue*(PL17-PL5+TZ16))
             +(Vl6*PipValue*(PL17-PL6+TZ16))
             +(Vl7*PipValue*(PL17-PL7+TZ16))
             +(Vl8*PipValue*(PL17-PL8+TZ16))
             +(Vl8*PipValue*(PL17-PL9+TZ16))
             +(Vl9*PipValue*(PL17-PL9+TZ16))
             +(Vl10*PipValue*(PL17-PL10+TZ16))
             +(Vl11*PipValue*(PL17-PL11+TZ16))
             +(Vl12*PipValue*(PL17-PL12+TZ16))
             +(Vl13*PipValue*(PL17-PL13+TZ16))
             +(Vl14*PipValue*(PL17-PL14+TZ16))
             +(Vl15*PipValue*(PL17-PL15+TZ16))
             +(Vl16*PipValue*(PL17-PL16+TZ16));
      Vl17=NormalizeDouble(MathAbs(Loss17)/TZ16/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss17:",Loss17," Vl17: ",Vl17);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V18()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss18=Lots*PipValue*(PL18-PL0+TZ)
             +(Vl1*PipValue*(PL18-PL1+TZ))
             +(Vl2*PipValue*(PL18-PL2+TZ))
             +(Vl3*PipValue*(PL18-PL3+TZ))
             +(Vl4*PipValue*(PL18-PL4+TZ))
             +(Vl5*PipValue*(PL18-PL5+TZ))
             +(Vl6*PipValue*(PL18-PL6+TZ))
             +(Vl7*PipValue*(PL18-PL7+TZ))
             +(Vl8*PipValue*(PL18-PL8+TZ))
             +(Vl8*PipValue*(PL18-PL9+TZ))
             +(Vl9*PipValue*(PL18-PL9+TZ))
             +(Vl10*PipValue*(PL18-PL10+TZ))
             +(Vl11*PipValue*(PL18-PL11+TZ))
             +(Vl12*PipValue*(PL18-PL12+TZ))
             +(Vl13*PipValue*(PL18-PL13+TZ))
             +(Vl14*PipValue*(PL18-PL14+TZ))
             +(Vl15*PipValue*(PL18-PL15+TZ))
             +(Vl16*PipValue*(PL18-PL16+TZ))
             +(Vl17*PipValue*(PL18-PL17+TZ));
      Vl18=NormalizeDouble(MathAbs(Loss18)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss18=2*Lots*PipValue*(PL18-PL0+TZ-step2)
             +(Vl1*PipValue*(PL18-PL1+TZ))
             +(Vl2*PipValue*(PL18-PL2+TZ))
             +(Vl3*PipValue*(PL18-PL3+TZ))
             +(Vl4*PipValue*(PL18-PL4+TZ))
             +(Vl5*PipValue*(PL18-PL5+TZ))
             +(Vl6*PipValue*(PL18-PL6+TZ))
             +(Vl7*PipValue*(PL18-PL7+TZ))
             +(Vl8*PipValue*(PL18-PL8+TZ))
             +(Vl8*PipValue*(PL18-PL9+TZ))
             +(Vl9*PipValue*(PL18-PL9+TZ))
             +(Vl10*PipValue*(PL18-PL10+TZ))
             +(Vl11*PipValue*(PL18-PL11+TZ))
             +(Vl12*PipValue*(PL18-PL12+TZ))
             +(Vl13*PipValue*(PL18-PL13+TZ))
             +(Vl14*PipValue*(PL18-PL14+TZ))
             +(Vl15*PipValue*(PL18-PL15+TZ))
             +(Vl16*PipValue*(PL18-PL16+TZ))
             +(Vl17*PipValue*(PL18-PL17+TZ));
      Vl18=NormalizeDouble(MathAbs(Loss18)/TZ/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {

      Loss18=3*Lots*PipValue*(PL18-PL0+TZ-step3)
             +(Vl1*PipValue*(PL18-PL1+TZ))
             +(Vl2*PipValue*(PL18-PL2+TZ))
             +(Vl3*PipValue*(PL18-PL3+TZ))
             +(Vl4*PipValue*(PL18-PL4+TZ))
             +(Vl5*PipValue*(PL18-PL5+TZ))
             +(Vl6*PipValue*(PL18-PL6+TZ))
             +(Vl7*PipValue*(PL18-PL7+TZ))
             +(Vl8*PipValue*(PL18-PL8+TZ))
             +(Vl8*PipValue*(PL18-PL9+TZ))
             +(Vl9*PipValue*(PL18-PL9+TZ))
             +(Vl10*PipValue*(PL18-PL10+TZ))
             +(Vl11*PipValue*(PL18-PL11+TZ))
             +(Vl12*PipValue*(PL18-PL12+TZ))
             +(Vl13*PipValue*(PL18-PL13+TZ))
             +(Vl14*PipValue*(PL18-PL14+TZ))
             +(Vl15*PipValue*(PL18-PL15+TZ))
             +(Vl16*PipValue*(PL18-PL16+TZ))
             +(Vl17*PipValue*(PL18-PL17+TZ));
      Vl18=NormalizeDouble(MathAbs(Loss18)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss18:",Loss18," Vl18: ",Vl18);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V18M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss18=Lots*PipValue*(PL18-PL0+TZ17)
             +(Vl1*PipValue*(PL18-PL1+TZ17))
             +(Vl2*PipValue*(PL18-PL2+TZ17))
             +(Vl3*PipValue*(PL18-PL3+TZ17))
             +(Vl4*PipValue*(PL18-PL4+TZ17))
             +(Vl5*PipValue*(PL18-PL5+TZ17))
             +(Vl6*PipValue*(PL18-PL6+TZ17))
             +(Vl7*PipValue*(PL18-PL7+TZ17))
             +(Vl8*PipValue*(PL18-PL8+TZ17))
             +(Vl8*PipValue*(PL18-PL9+TZ17))
             +(Vl9*PipValue*(PL18-PL9+TZ17))
             +(Vl10*PipValue*(PL18-PL10+TZ17))
             +(Vl11*PipValue*(PL18-PL11+TZ17))
             +(Vl12*PipValue*(PL18-PL12+TZ17))
             +(Vl13*PipValue*(PL18-PL13+TZ17))
             +(Vl14*PipValue*(PL18-PL14+TZ17))
             +(Vl15*PipValue*(PL18-PL15+TZ17))
             +(Vl16*PipValue*(PL18-PL16+TZ17))
             +(Vl17*PipValue*(PL18-PL17+TZ17));
      Vl18=NormalizeDouble(MathAbs(Loss18)/TZ17/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss18=2*Lots*PipValue*(PL18-PL0+TZ17-step2)
             +(Vl1*PipValue*(PL18-PL1+TZ17))
             +(Vl2*PipValue*(PL18-PL2+TZ17))
             +(Vl3*PipValue*(PL18-PL3+TZ17))
             +(Vl4*PipValue*(PL18-PL4+TZ17))
             +(Vl5*PipValue*(PL18-PL5+TZ17))
             +(Vl6*PipValue*(PL18-PL6+TZ17))
             +(Vl7*PipValue*(PL18-PL7+TZ17))
             +(Vl8*PipValue*(PL18-PL8+TZ17))
             +(Vl8*PipValue*(PL18-PL9+TZ17))
             +(Vl9*PipValue*(PL18-PL9+TZ17))
             +(Vl10*PipValue*(PL18-PL10+TZ17))
             +(Vl11*PipValue*(PL18-PL11+TZ17))
             +(Vl12*PipValue*(PL18-PL12+TZ17))
             +(Vl13*PipValue*(PL18-PL13+TZ17))
             +(Vl14*PipValue*(PL18-PL14+TZ17))
             +(Vl15*PipValue*(PL18-PL15+TZ17))
             +(Vl16*PipValue*(PL18-PL16+TZ17))
             +(Vl17*PipValue*(PL18-PL17+TZ17));
      Vl18=NormalizeDouble(MathAbs(Loss18)/TZ17/PipValue,decimalPlace);
     }
   if(CONTOR==3)
     {

      Loss18=3*Lots*PipValue*(PL18-PL0+TZ17-step3)
             +(Vl1*PipValue*(PL18-PL1+TZ17))
             +(Vl2*PipValue*(PL18-PL2+TZ17))
             +(Vl3*PipValue*(PL18-PL3+TZ17))
             +(Vl4*PipValue*(PL18-PL4+TZ17))
             +(Vl5*PipValue*(PL18-PL5+TZ17))
             +(Vl6*PipValue*(PL18-PL6+TZ17))
             +(Vl7*PipValue*(PL18-PL7+TZ17))
             +(Vl8*PipValue*(PL18-PL8+TZ17))
             +(Vl8*PipValue*(PL18-PL9+TZ17))
             +(Vl9*PipValue*(PL18-PL9+TZ17))
             +(Vl10*PipValue*(PL18-PL10+TZ17))
             +(Vl11*PipValue*(PL18-PL11+TZ17))
             +(Vl12*PipValue*(PL18-PL12+TZ17))
             +(Vl13*PipValue*(PL18-PL13+TZ17))
             +(Vl14*PipValue*(PL18-PL14+TZ17))
             +(Vl15*PipValue*(PL18-PL15+TZ17))
             +(Vl16*PipValue*(PL18-PL16+TZ17))
             +(Vl17*PipValue*(PL18-PL17+TZ17));
      Vl18=NormalizeDouble(MathAbs(Loss18)/TZ17/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss18:",Loss18," Vl18: ",Vl18);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V19()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss19=Lots*PipValue*(PL19-PL0+TZ)
             +(Vl1*PipValue*(PL19-PL1+TZ))
             +(Vl2*PipValue*(PL19-PL2+TZ))
             +(Vl3*PipValue*(PL19-PL3+TZ))
             +(Vl4*PipValue*(PL19-PL4+TZ))
             +(Vl5*PipValue*(PL19-PL5+TZ))
             +(Vl6*PipValue*(PL19-PL6+TZ))
             +(Vl7*PipValue*(PL19-PL7+TZ))
             +(Vl8*PipValue*(PL19-PL8+TZ))
             +(Vl8*PipValue*(PL19-PL9+TZ))
             +(Vl9*PipValue*(PL19-PL9+TZ))
             +(Vl10*PipValue*(PL19-PL10+TZ))
             +(Vl11*PipValue*(PL19-PL11+TZ))
             +(Vl12*PipValue*(PL19-PL12+TZ))
             +(Vl13*PipValue*(PL19-PL13+TZ))
             +(Vl14*PipValue*(PL19-PL14+TZ))
             +(Vl15*PipValue*(PL19-PL15+TZ))
             +(Vl16*PipValue*(PL19-PL16+TZ))
             +(Vl17*PipValue*(PL19-PL17+TZ))
             +(Vl18*PipValue*(PL19-PL18+TZ));
      Vl19=NormalizeDouble(MathAbs(Loss19)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss19=2*Lots*PipValue*(PL19-PL0+TZ-step2)
             +(Vl1*PipValue*(PL19-PL1+TZ))
             +(Vl2*PipValue*(PL19-PL2+TZ))
             +(Vl3*PipValue*(PL19-PL3+TZ))
             +(Vl4*PipValue*(PL19-PL4+TZ))
             +(Vl5*PipValue*(PL19-PL5+TZ))
             +(Vl6*PipValue*(PL19-PL6+TZ))
             +(Vl7*PipValue*(PL19-PL7+TZ))
             +(Vl8*PipValue*(PL19-PL8+TZ))
             +(Vl8*PipValue*(PL19-PL9+TZ))
             +(Vl9*PipValue*(PL19-PL9+TZ))
             +(Vl10*PipValue*(PL19-PL10+TZ))
             +(Vl11*PipValue*(PL19-PL11+TZ))
             +(Vl12*PipValue*(PL19-PL12+TZ))
             +(Vl13*PipValue*(PL19-PL13+TZ))
             +(Vl14*PipValue*(PL19-PL14+TZ))
             +(Vl15*PipValue*(PL19-PL15+TZ))
             +(Vl16*PipValue*(PL19-PL16+TZ))
             +(Vl17*PipValue*(PL19-PL17+TZ))
             +(Vl18*PipValue*(PL19-PL18+TZ));
      Vl19=NormalizeDouble(MathAbs(Loss19)/TZ/PipValue,decimalPlace);

     }
   if(CONTOR==3)
     {

      Loss19=3*Lots*PipValue*(PL19-PL0+TZ-step3)
             +(Vl1*PipValue*(PL19-PL1+TZ))
             +(Vl2*PipValue*(PL19-PL2+TZ))
             +(Vl3*PipValue*(PL19-PL3+TZ))
             +(Vl4*PipValue*(PL19-PL4+TZ))
             +(Vl5*PipValue*(PL19-PL5+TZ))
             +(Vl6*PipValue*(PL19-PL6+TZ))
             +(Vl7*PipValue*(PL19-PL7+TZ))
             +(Vl8*PipValue*(PL19-PL8+TZ))
             +(Vl8*PipValue*(PL19-PL9+TZ))
             +(Vl9*PipValue*(PL19-PL9+TZ))
             +(Vl10*PipValue*(PL19-PL10+TZ))
             +(Vl11*PipValue*(PL19-PL11+TZ))
             +(Vl12*PipValue*(PL19-PL12+TZ))
             +(Vl13*PipValue*(PL19-PL13+TZ))
             +(Vl14*PipValue*(PL19-PL14+TZ))
             +(Vl15*PipValue*(PL19-PL15+TZ))
             +(Vl16*PipValue*(PL19-PL16+TZ))
             +(Vl17*PipValue*(PL19-PL17+TZ))
             +(Vl18*PipValue*(PL19-PL18+TZ));
      Vl19=NormalizeDouble(MathAbs(Loss19)/TZ/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss19:",Loss19," Vl19: ",Vl19);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V19M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss19=Lots*PipValue*(PL19-PL0+TZ18)
             +(Vl1*PipValue*(PL19-PL1+TZ18))
             +(Vl2*PipValue*(PL19-PL2+TZ18))
             +(Vl3*PipValue*(PL19-PL3+TZ18))
             +(Vl4*PipValue*(PL19-PL4+TZ18))
             +(Vl5*PipValue*(PL19-PL5+TZ18))
             +(Vl6*PipValue*(PL19-PL6+TZ18))
             +(Vl7*PipValue*(PL19-PL7+TZ18))
             +(Vl8*PipValue*(PL19-PL8+TZ18))
             +(Vl8*PipValue*(PL19-PL9+TZ18))
             +(Vl9*PipValue*(PL19-PL9+TZ18))
             +(Vl10*PipValue*(PL19-PL10+TZ18))
             +(Vl11*PipValue*(PL19-PL11+TZ18))
             +(Vl12*PipValue*(PL19-PL12+TZ18))
             +(Vl13*PipValue*(PL19-PL13+TZ18))
             +(Vl14*PipValue*(PL19-PL14+TZ18))
             +(Vl15*PipValue*(PL19-PL15+TZ18))
             +(Vl16*PipValue*(PL19-PL16+TZ18))
             +(Vl17*PipValue*(PL19-PL17+TZ18))
             +(Vl18*PipValue*(PL19-PL18+TZ18));
      Vl19=NormalizeDouble(MathAbs(Loss19)/TZ18/PipValue,decimalPlace);

     }
   if(CONTOR==2)
     {
      Loss19=2*Lots*PipValue*(PL19-PL0+TZ18-step2)
             +(Vl1*PipValue*(PL19-PL1+TZ18))
             +(Vl2*PipValue*(PL19-PL2+TZ18))
             +(Vl3*PipValue*(PL19-PL3+TZ18))
             +(Vl4*PipValue*(PL19-PL4+TZ18))
             +(Vl5*PipValue*(PL19-PL5+TZ18))
             +(Vl6*PipValue*(PL19-PL6+TZ18))
             +(Vl7*PipValue*(PL19-PL7+TZ18))
             +(Vl8*PipValue*(PL19-PL8+TZ18))
             +(Vl8*PipValue*(PL19-PL9+TZ18))
             +(Vl9*PipValue*(PL19-PL9+TZ18))
             +(Vl10*PipValue*(PL19-PL10+TZ18))
             +(Vl11*PipValue*(PL19-PL11+TZ18))
             +(Vl12*PipValue*(PL19-PL12+TZ18))
             +(Vl13*PipValue*(PL19-PL13+TZ18))
             +(Vl14*PipValue*(PL19-PL14+TZ18))
             +(Vl15*PipValue*(PL19-PL15+TZ18))
             +(Vl16*PipValue*(PL19-PL16+TZ18))
             +(Vl17*PipValue*(PL19-PL17+TZ18))
             +(Vl18*PipValue*(PL19-PL18+TZ18));
      Vl19=NormalizeDouble(MathAbs(Loss19)/TZ18/PipValue,decimalPlace);

     }
   if(CONTOR==3)
     {

      Loss19=3*Lots*PipValue*(PL19-PL0+TZ18-step3)
             +(Vl1*PipValue*(PL19-PL1+TZ18))
             +(Vl2*PipValue*(PL19-PL2+TZ18))
             +(Vl3*PipValue*(PL19-PL3+TZ18))
             +(Vl4*PipValue*(PL19-PL4+TZ18))
             +(Vl5*PipValue*(PL19-PL5+TZ18))
             +(Vl6*PipValue*(PL19-PL6+TZ18))
             +(Vl7*PipValue*(PL19-PL7+TZ18))
             +(Vl8*PipValue*(PL19-PL8+TZ18))
             +(Vl8*PipValue*(PL19-PL9+TZ18))
             +(Vl9*PipValue*(PL19-PL9+TZ18))
             +(Vl10*PipValue*(PL19-PL10+TZ18))
             +(Vl11*PipValue*(PL19-PL11+TZ18))
             +(Vl12*PipValue*(PL19-PL12+TZ18))
             +(Vl13*PipValue*(PL19-PL13+TZ18))
             +(Vl14*PipValue*(PL19-PL14+TZ18))
             +(Vl15*PipValue*(PL19-PL15+TZ18))
             +(Vl16*PipValue*(PL19-PL16+TZ18))
             +(Vl17*PipValue*(PL19-PL17+TZ18))
             +(Vl18*PipValue*(PL19-PL18+TZ18));
      Vl19=NormalizeDouble(MathAbs(Loss19)/TZ18/PipValue,decimalPlace);
     }
   Print("PipValue:",PipValue," Loss19:",Loss19," Vl19: ",Vl19);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V20()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss20=Lots*PipValue*(PL20-PL0+TZ)
             +(Vl1*PipValue*(PL20-PL1+TZ))
             +(Vl2*PipValue*(PL20-PL2+TZ))
             +(Vl3*PipValue*(PL20-PL3+TZ))
             +(Vl4*PipValue*(PL20-PL4+TZ))
             +(Vl5*PipValue*(PL20-PL5+TZ))
             +(Vl6*PipValue*(PL20-PL6+TZ))
             +(Vl7*PipValue*(PL20-PL7+TZ))
             +(Vl8*PipValue*(PL20-PL8+TZ))
             +(Vl8*PipValue*(PL20-PL9+TZ))
             +(Vl9*PipValue*(PL20-PL9+TZ))
             +(Vl10*PipValue*(PL20-PL10+TZ))
             +(Vl11*PipValue*(PL20-PL11+TZ))
             +(Vl12*PipValue*(PL20-PL12+TZ))
             +(Vl13*PipValue*(PL20-PL13+TZ))
             +(Vl14*PipValue*(PL20-PL14+TZ))
             +(Vl15*PipValue*(PL20-PL15+TZ))
             +(Vl16*PipValue*(PL20-PL16+TZ))
             +(Vl17*PipValue*(PL20-PL17+TZ))
             +(Vl18*PipValue*(PL20-PL18+TZ))
             +(Vl19*PipValue*(PL20-PL19+TZ));
      Vl20=NormalizeDouble(MathAbs(Loss20)/TZ/PipValue,decimalPlace);

     }

   Print("PipValue:",PipValue," Loss20:",Loss20," Vl20: ",Vl20);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V20M()
  {
   double PipValue=CalculatePipValue()*Lots;
   if(CONTOR==1)
     {
      Loss20=Lots*PipValue*(PL20-PL0+TZ19)
             +(Vl1*PipValue*(PL20-PL1+TZ19))
             +(Vl2*PipValue*(PL20-PL2+TZ19))
             +(Vl3*PipValue*(PL20-PL3+TZ19))
             +(Vl4*PipValue*(PL20-PL4+TZ19))
             +(Vl5*PipValue*(PL20-PL5+TZ19))
             +(Vl6*PipValue*(PL20-PL6+TZ19))
             +(Vl7*PipValue*(PL20-PL7+TZ19))
             +(Vl8*PipValue*(PL20-PL8+TZ19))
             +(Vl8*PipValue*(PL20-PL9+TZ19))
             +(Vl9*PipValue*(PL20-PL9+TZ19))
             +(Vl10*PipValue*(PL20-PL10+TZ19))
             +(Vl11*PipValue*(PL20-PL11+TZ19))
             +(Vl12*PipValue*(PL20-PL12+TZ19))
             +(Vl13*PipValue*(PL20-PL13+TZ19))
             +(Vl14*PipValue*(PL20-PL14+TZ19))
             +(Vl15*PipValue*(PL20-PL15+TZ19))
             +(Vl16*PipValue*(PL20-PL16+TZ19))
             +(Vl17*PipValue*(PL20-PL17+TZ19))
             +(Vl18*PipValue*(PL20-PL18+TZ19))
             +(Vl19*PipValue*(PL20-PL19+TZ19));
      Vl20=NormalizeDouble(MathAbs(Loss20)/TZ19/PipValue,decimalPlace);

     }

   Print("PipValue:",PipValue," Loss20:",Loss20," Vl20: ",Vl20);
  }
//SHORT CALCULATION

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V1S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss1S = LotsS * PipValue * (PL1S - PL0S - TZS);

      Vl1S = NormalizeDouble(MathAbs(Loss1S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss1S = 2 * LotsS * PipValue * (PL1S - PL0S - TZS +step2S);

      Vl1S = NormalizeDouble(MathAbs(Loss1S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss1S = 3 * LotsS * PipValue * (PL1S - PL0S - TZS + step3S);

      Vl1S = NormalizeDouble(MathAbs(Loss1S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss1S:", Loss1S, " Vl1S:", Vl1S);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V2S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss2S = LotsS * PipValue * (PL2S - PL0S - TZS)
               + (Vl1S * PipValue * (PL2S - PL1S - TZS));

      Vl2S = NormalizeDouble(MathAbs(Loss2S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss2S = 2 * LotsS * PipValue * (PL2S - PL0S  -TZS + step2S)
               + (Vl1S * PipValue * (PL2S - PL1S - TZS));

      Vl2S = NormalizeDouble(MathAbs(Loss2S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss2S = 3 * LotsS * PipValue * (PL2S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL2S - PL1S - TZS));

      Vl2S = NormalizeDouble(MathAbs(Loss2S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss2S:", Loss2S, " Vl2S:", Vl2S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V2MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss2S = LotsS * PipValue * (PL2S - PL0S - TZS1)
               + (Vl1S * PipValue * (PL2S - PL1S - TZS1));

      Vl2S = NormalizeDouble(MathAbs(Loss2S) / TZS1 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss2S = 2 * LotsS * PipValue * (PL2S - PL0S - TZS1 + step2S)
               + (Vl1S * PipValue * (PL2S - PL1S - TZS1));

      Vl2S = NormalizeDouble(MathAbs(Loss2S) / TZS1 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss2S = 3 * LotsS * PipValue * (PL2S - PL0S - TZS1+ step3S)
               + (Vl1S * PipValue * (PL2S - PL1S - TZS1));

      Vl2S = NormalizeDouble(MathAbs(Loss2S) / TZS1 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss2S:", Loss2S, " Vl2S:", Vl2S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V3S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss3S = LotsS * PipValue * (PL3S - PL0S - TZS)
               + (Vl1S * PipValue * (PL3S - PL1S - TZS))
               + (Vl2S * PipValue * (PL3S - PL2S - TZS));

      Vl3S = NormalizeDouble(MathAbs(Loss3S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss3S = 2 * LotsS * PipValue * (PL3S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL3S - PL1S - TZS))
               + (Vl2S * PipValue * (PL3S - PL2S - TZS));

      Vl3S = NormalizeDouble(MathAbs(Loss3S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss3S = 3 * LotsS * PipValue * (PL3S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL3S - PL1S - TZS))
               + (Vl2S * PipValue * (PL3S - PL2S - TZS));

      Vl3S = NormalizeDouble(MathAbs(Loss3S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss3S:", Loss3S, " Vl3S:", Vl3S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V3MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss3S = LotsS * PipValue * (PL3S - PL0S - TZS2)
               + (Vl1S * PipValue * (PL3S - PL1S - TZS2))
               + (Vl2S * PipValue * (PL3S - PL2S - TZS2));

      Vl3S = NormalizeDouble(MathAbs(Loss3S) / TZS2 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss3S = 2 * LotsS * PipValue * (PL3S - PL0S - TZS2 + step2S)
               + (Vl1S * PipValue * (PL3S - PL1S - TZS2))
               + (Vl2S * PipValue * (PL3S - PL2S - TZS2));

      Vl3S = NormalizeDouble(MathAbs(Loss3S) / TZS2 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss3S = 3 * LotsS * PipValue * (PL3S - PL0S - TZS2 + step3S)
               + (Vl1S * PipValue * (PL3S - PL1S - TZS2))
               + (Vl2S * PipValue * (PL3S - PL2S - TZS2));

      Vl3S = NormalizeDouble(MathAbs(Loss3S) / TZS2 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss3S:", Loss3S, " Vl3S:", Vl3S);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V4S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss4S = LotsS * PipValue * (PL4S - PL0S - TZS)
               + (Vl1S * PipValue * (PL4S - PL1S - TZS))
               + (Vl2S * PipValue * (PL4S - PL2S - TZS))
               + (Vl3S * PipValue * (PL4S - PL3S - TZS));

      Vl4S = NormalizeDouble(MathAbs(Loss4S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss4S = 2 * LotsS * PipValue * (PL4S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL4S - PL1S - TZS))
               + (Vl2S * PipValue * (PL4S - PL2S - TZS))
               + (Vl3S * PipValue * (PL4S - PL3S - TZS));

      Vl4S = NormalizeDouble(MathAbs(Loss4S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss4S = 3 * LotsS * PipValue * (PL4S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL4S - PL1S - TZS))
               + (Vl2S * PipValue * (PL4S - PL2S - TZS))
               + (Vl3S * PipValue * (PL4S - PL3S - TZS));

      Vl4S = NormalizeDouble(MathAbs(Loss4S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss4S:", Loss4S, " Vl4S:", Vl4S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V4MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss4S = LotsS * PipValue * (PL4S - PL0S - TZS3)
               + (Vl1S * PipValue * (PL4S - PL1S - TZS3))
               + (Vl2S * PipValue * (PL4S - PL2S - TZS3))
               + (Vl3S * PipValue * (PL4S - PL3S - TZS3));

      Vl4S = NormalizeDouble(MathAbs(Loss4S) / TZS3 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss4S = 2 * LotsS * PipValue * (PL4S - PL0S - TZS3 + step2S)
               + (Vl1S * PipValue * (PL4S - PL1S - TZS3))
               + (Vl2S * PipValue * (PL4S - PL2S - TZS3))
               + (Vl3S * PipValue * (PL4S - PL3S - TZS3));

      Vl4S = NormalizeDouble(MathAbs(Loss4S) / TZS3 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss4S = 3 * LotsS * PipValue * (PL4S - PL0S - TZS3 + step3S)
               + (Vl1S * PipValue * (PL4S - PL1S - TZS3))
               + (Vl2S * PipValue * (PL4S - PL2S - TZS3))
               + (Vl3S * PipValue * (PL4S - PL3S - TZS3));

      Vl4S = NormalizeDouble(MathAbs(Loss4S) / TZS3 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss4S:", Loss4S, " Vl4S:", Vl4S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V5S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss5S = LotsS * PipValue * (PL5S - PL0S - TZS)
               + (Vl1S * PipValue * (PL5S - PL1S - TZS))
               + (Vl2S * PipValue * (PL5S - PL2S - TZS))
               + (Vl3S * PipValue * (PL5S - PL3S - TZS))
               + (Vl4S * PipValue * (PL5S - PL4S - TZS));

      Vl5S = NormalizeDouble(MathAbs(Loss5S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss5S = 2 * LotsS * PipValue * (PL5S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL5S - PL1S - TZS))
               + (Vl2S * PipValue * (PL5S - PL2S - TZS))
               + (Vl3S * PipValue * (PL5S - PL3S - TZS))
               + (Vl4S * PipValue * (PL5S - PL4S - TZS));

      Vl5S = NormalizeDouble(MathAbs(Loss5S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss5S = 3 * LotsS * PipValue * (PL5S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL5S - PL1S - TZS))
               + (Vl2S * PipValue * (PL5S - PL2S - TZS))
               + (Vl3S * PipValue * (PL5S - PL3S - TZS))
               + (Vl4S * PipValue * (PL5S - PL4S - TZS));

      Vl5S = NormalizeDouble(MathAbs(Loss5S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss5S:", Loss5S, " Vl5S:", Vl5S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V5MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss5S = LotsS * PipValue * (PL5S - PL0S - TZS4)
               + (Vl1S * PipValue * (PL5S - PL1S - TZS4))
               + (Vl2S * PipValue * (PL5S - PL2S - TZS4))
               + (Vl3S * PipValue * (PL5S - PL3S - TZS4))
               + (Vl4S * PipValue * (PL5S - PL4S - TZS4));

      Vl5S = NormalizeDouble(MathAbs(Loss5S) / TZS4 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss5S = 2 * LotsS * PipValue * (PL5S - PL0S - TZS4 + step2S)
               + (Vl1S * PipValue * (PL5S - PL1S - TZS4))
               + (Vl2S * PipValue * (PL5S - PL2S - TZS4))
               + (Vl3S * PipValue * (PL5S - PL3S - TZS4))
               + (Vl4S * PipValue * (PL5S - PL4S - TZS4));

      Vl5S = NormalizeDouble(MathAbs(Loss5S) / TZS4 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss5S = 3 * LotsS * PipValue * (PL5S - PL0S - TZS4 + step3S)
               + (Vl1S * PipValue * (PL5S - PL1S - TZS4))
               + (Vl2S * PipValue * (PL5S - PL2S -TZS4))
               + (Vl3S * PipValue * (PL5S - PL3S - TZS4))
               + (Vl4S * PipValue * (PL5S - PL4S -TZS4));

      Vl5S = NormalizeDouble(MathAbs(Loss5S) / TZS4 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss5S:", Loss5S, " Vl5S:", Vl5S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V6S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss6S = LotsS * PipValue * (PL6S - PL0S - TZS)
               + (Vl1S * PipValue * (PL6S - PL1S - TZS))
               + (Vl2S * PipValue * (PL6S - PL2S - TZS))
               + (Vl3S * PipValue * (PL6S - PL3S - TZS))
               + (Vl4S * PipValue * (PL6S - PL4S - TZS))
               + (Vl5S * PipValue * (PL6S - PL5S - TZS));

      Vl6S = NormalizeDouble(MathAbs(Loss6S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss6S = 2 * LotsS * PipValue * (PL6S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL6S - PL1S - TZS))
               + (Vl2S * PipValue * (PL6S - PL2S - TZS))
               + (Vl3S * PipValue * (PL6S - PL3S - TZS))
               + (Vl4S * PipValue * (PL6S - PL4S - TZS))
               + (Vl5S * PipValue * (PL6S - PL5S - TZS));

      Vl6S = NormalizeDouble(MathAbs(Loss6S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss6S = 3 * LotsS * PipValue * (PL6S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL6S - PL1S - TZS))
               + (Vl2S * PipValue * (PL6S - PL2S - TZS))
               + (Vl3S * PipValue * (PL6S - PL3S - TZS))
               + (Vl4S * PipValue * (PL6S - PL4S - TZS))
               + (Vl5S * PipValue * (PL6S - PL5S - TZS));

      Vl6S = NormalizeDouble(MathAbs(Loss6S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss6S:", Loss6S, " Vl6S:", Vl6S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V6MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss6S = LotsS * PipValue * (PL6S - PL0S - TZS5)
               + (Vl1S * PipValue * (PL6S - PL1S - TZS5))
               + (Vl2S * PipValue * (PL6S - PL2S - TZS5))
               + (Vl3S * PipValue * (PL6S - PL3S - TZS5))
               + (Vl4S * PipValue * (PL6S - PL4S - TZS5))
               + (Vl5S * PipValue * (PL6S - PL5S - TZS5));

      Vl6S = NormalizeDouble(MathAbs(Loss6S) / TZS5 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss6S = 2 * LotsS * PipValue * (PL6S - PL0S - TZS5 + step2S)
               + (Vl1S * PipValue * (PL6S - PL1S - TZS5))
               + (Vl2S * PipValue * (PL6S - PL2S - TZS5))
               + (Vl3S * PipValue * (PL6S - PL3S - TZS5))
               + (Vl4S * PipValue * (PL6S - PL4S - TZS5))
               + (Vl5S * PipValue * (PL6S - PL5S - TZS5));

      Vl6S = NormalizeDouble(MathAbs(Loss6S) / TZS5 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss6S = 3 * LotsS * PipValue * (PL6S - PL0S - TZS5 +step3S)
               + (Vl1S * PipValue * (PL6S - PL1S - TZS5))
               + (Vl2S * PipValue * (PL6S - PL2S - TZS5))
               + (Vl3S * PipValue * (PL6S - PL3S - TZS5))
               + (Vl4S * PipValue * (PL6S - PL4S - TZS5))
               + (Vl5S * PipValue * (PL6S - PL5S - TZS5));

      Vl6S = NormalizeDouble(MathAbs(Loss6S) / TZS5 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss6S:", Loss6S, " Vl6S:", Vl6S);
  }



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V7S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss7S = LotsS * PipValue * (PL7S - PL0S - TZS)
               + (Vl1S * PipValue * (PL7S - PL1S - TZS))
               + (Vl2S * PipValue * (PL7S - PL2S - TZS))
               + (Vl3S * PipValue * (PL7S - PL3S - TZS))
               + (Vl4S * PipValue * (PL7S - PL4S - TZS))
               + (Vl5S * PipValue * (PL7S - PL5S - TZS))
               + (Vl6S * PipValue * (PL7S - PL6S - TZS));

      Vl7S = NormalizeDouble(MathAbs(Loss7S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss7S = 2 * LotsS * PipValue * (PL7S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL7S - PL1S - TZS))
               + (Vl2S * PipValue * (PL7S - PL2S - TZS))
               + (Vl3S * PipValue * (PL7S - PL3S - TZS))
               + (Vl4S * PipValue * (PL7S - PL4S - TZS))
               + (Vl5S * PipValue * (PL7S - PL5S - TZS))
               + (Vl6S * PipValue * (PL7S - PL6S - TZS));

      Vl7S = NormalizeDouble(MathAbs(Loss7S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss7S = 3 * LotsS * PipValue * (PL7S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL7S - PL1S - TZS))
               + (Vl2S * PipValue * (PL7S - PL2S - TZS))
               + (Vl3S * PipValue * (PL7S - PL3S - TZS))
               + (Vl4S * PipValue * (PL7S - PL4S - TZS))
               + (Vl5S * PipValue * (PL7S - PL5S - TZS))
               + (Vl6S * PipValue * (PL7S - PL6S - TZS));

      Vl7S = NormalizeDouble(MathAbs(Loss7S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss7S:", Loss7S, " Vl7S:", Vl7S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V7MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss7S = LotsS * PipValue * (PL7S - PL0S - TZS6)
               + (Vl1S * PipValue * (PL7S - PL1S - TZS6))
               + (Vl2S * PipValue * (PL7S - PL2S - TZS6))
               + (Vl3S * PipValue * (PL7S - PL3S - TZS6))
               + (Vl4S * PipValue * (PL7S - PL4S - TZS6))
               + (Vl5S * PipValue * (PL7S - PL5S - TZS6))
               + (Vl6S * PipValue * (PL7S - PL6S - TZS6));

      Vl7S = NormalizeDouble(MathAbs(Loss7S) / TZS6 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss7S = 2 * LotsS * PipValue * (PL7S - PL0S - TZS6 + step2S)
               + (Vl1S * PipValue * (PL7S - PL1S - TZS6))
               + (Vl2S * PipValue * (PL7S - PL2S - TZS6))
               + (Vl3S * PipValue * (PL7S - PL3S - TZS6))
               + (Vl4S * PipValue * (PL7S - PL4S - TZS6))
               + (Vl5S * PipValue * (PL7S - PL5S - TZS6))
               + (Vl6S * PipValue * (PL7S - PL6S - TZS6));

      Vl7S = NormalizeDouble(MathAbs(Loss7S) / TZS6 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss7S = 3 * LotsS * PipValue * (PL7S - PL0S - TZS6 + step3S)
               + (Vl1S * PipValue * (PL7S - PL1S - TZS6))
               + (Vl2S * PipValue * (PL7S - PL2S - TZS6))
               + (Vl3S * PipValue * (PL7S - PL3S - TZS6))
               + (Vl4S * PipValue * (PL7S - PL4S - TZS6))
               + (Vl5S * PipValue * (PL7S - PL5S - TZS6))
               + (Vl6S * PipValue * (PL7S - PL6S - TZS6));

      Vl7S = NormalizeDouble(MathAbs(Loss7S) / TZS6 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss7S:", Loss7S, " Vl7S:", Vl7S);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V8S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss8S = LotsS * PipValue * (PL8S - PL0S - TZS)
               + (Vl1S * PipValue * (PL8S - PL1S - TZS))
               + (Vl2S * PipValue * (PL8S - PL2S - TZS))
               + (Vl3S * PipValue * (PL8S - PL3S - TZS))
               + (Vl4S * PipValue * (PL8S - PL4S - TZS))
               + (Vl5S * PipValue * (PL8S - PL5S - TZS))
               + (Vl6S * PipValue * (PL8S - PL6S - TZS))
               + (Vl7S * PipValue * (PL8S - PL7S - TZS));

      Vl8S = NormalizeDouble(MathAbs(Loss8S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss8S = 2 * LotsS * PipValue * (PL8S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL8S - PL1S - TZS))
               + (Vl2S * PipValue * (PL8S - PL2S - TZS))
               + (Vl3S * PipValue * (PL8S - PL3S - TZS))
               + (Vl4S * PipValue * (PL8S - PL4S - TZS))
               + (Vl5S * PipValue * (PL8S - PL5S - TZS))
               + (Vl6S * PipValue * (PL8S - PL6S - TZS))
               + (Vl7S * PipValue * (PL8S - PL7S - TZS));

      Vl8S = NormalizeDouble(MathAbs(Loss8S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss8S = 3 * LotsS * PipValue * (PL8S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL8S - PL1S - TZS))
               + (Vl2S * PipValue * (PL8S - PL2S - TZS))
               + (Vl3S * PipValue * (PL8S - PL3S - TZS))
               + (Vl4S * PipValue * (PL8S - PL4S - TZS))
               + (Vl5S * PipValue * (PL8S - PL5S - TZS))
               + (Vl6S * PipValue * (PL8S - PL6S - TZS))
               + (Vl7S * PipValue * (PL8S - PL7S - TZS));

      Vl8S = NormalizeDouble(MathAbs(Loss8S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss8S:", Loss8S, " Vl8S:", Vl8S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V8MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss8S = LotsS * PipValue * (PL8S - PL0S - TZS7)
               + (Vl1S * PipValue * (PL8S - PL1S - TZS7))
               + (Vl2S * PipValue * (PL8S - PL2S - TZS7))
               + (Vl3S * PipValue * (PL8S - PL3S - TZS7))
               + (Vl4S * PipValue * (PL8S - PL4S - TZS7))
               + (Vl5S * PipValue * (PL8S - PL5S - TZS7))
               + (Vl6S * PipValue * (PL8S - PL6S - TZS7))
               + (Vl7S * PipValue * (PL8S - PL7S - TZS7));

      Vl8S = NormalizeDouble(MathAbs(Loss8S) / TZS7 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss8S = 2 * LotsS * PipValue * (PL8S - PL0S - TZS7 + step2S)
               + (Vl1S * PipValue * (PL8S - PL1S - TZS7))
               + (Vl2S * PipValue * (PL8S - PL2S - TZS7))
               + (Vl3S * PipValue * (PL8S - PL3S - TZS7))
               + (Vl4S * PipValue * (PL8S - PL4S - TZS7))
               + (Vl5S * PipValue * (PL8S - PL5S - TZS7))
               + (Vl6S * PipValue * (PL8S - PL6S - TZS7))
               + (Vl7S * PipValue * (PL8S - PL7S - TZS7));

      Vl8S = NormalizeDouble(MathAbs(Loss8S) / TZS7 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss8S = 3 * LotsS * PipValue * (PL8S - PL0S - TZS7 + step3S)
               + (Vl1S * PipValue * (PL8S - PL1S - TZS7))
               + (Vl2S * PipValue * (PL8S - PL2S - TZS7))
               + (Vl3S * PipValue * (PL8S - PL3S - TZS7))
               + (Vl4S * PipValue * (PL8S - PL4S - TZS7))
               + (Vl5S * PipValue * (PL8S - PL5S - TZS7))
               + (Vl6S * PipValue * (PL8S - PL6S - TZS7))
               + (Vl7S * PipValue * (PL8S - PL7S - TZS7));

      Vl8S = NormalizeDouble(MathAbs(Loss8S) / TZS7 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss8S:", Loss8S, " Vl8S:", Vl8S);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V9S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss9S = LotsS * PipValue * (PL9S - PL0S - TZS)
               + (Vl1S * PipValue * (PL9S - PL1S - TZS))
               + (Vl2S * PipValue * (PL9S - PL2S - TZS))
               + (Vl3S * PipValue * (PL9S - PL3S - TZS))
               + (Vl4S * PipValue * (PL9S - PL4S - TZS))
               + (Vl5S * PipValue * (PL9S - PL5S - TZS))
               + (Vl6S * PipValue * (PL9S - PL6S - TZS))
               + (Vl7S * PipValue * (PL9S - PL7S - TZS))
               + (Vl8S * PipValue * (PL9S - PL8S - TZS));

      Vl9S = NormalizeDouble(MathAbs(Loss9S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss9S = 2 * LotsS * PipValue * (PL9S - PL0S - TZS + step2S)
               + (Vl1S * PipValue * (PL9S - PL1S - TZS))
               + (Vl2S * PipValue * (PL9S - PL2S - TZS))
               + (Vl3S * PipValue * (PL9S - PL3S - TZS))
               + (Vl4S * PipValue * (PL9S - PL4S - TZS))
               + (Vl5S * PipValue * (PL9S - PL5S - TZS))
               + (Vl6S * PipValue * (PL9S - PL6S - TZS))
               + (Vl7S * PipValue * (PL9S - PL7S - TZS))
               + (Vl8S * PipValue * (PL9S - PL8S - TZS));

      Vl9S = NormalizeDouble(MathAbs(Loss9S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss9S = 3 * LotsS * PipValue * (PL9S - PL0S - TZS + step3S)
               + (Vl1S * PipValue * (PL9S - PL1S - TZS))
               + (Vl2S * PipValue * (PL9S - PL2S - TZS))
               + (Vl3S * PipValue * (PL9S - PL3S - TZS))
               + (Vl4S * PipValue * (PL9S - PL4S - TZS))
               + (Vl5S * PipValue * (PL9S - PL5S - TZS))
               + (Vl6S * PipValue * (PL9S - PL6S - TZS))
               + (Vl7S * PipValue * (PL9S - PL7S - TZS))
               + (Vl8S * PipValue * (PL9S - PL8S - TZS));

      Vl9S = NormalizeDouble(MathAbs(Loss9S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss9S:", Loss9S, " Vl9S:", Vl9S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V9MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss9S = LotsS * PipValue * (PL9S - PL0S - TZS8)
               + (Vl1S * PipValue * (PL9S - PL1S - TZS8))
               + (Vl2S * PipValue * (PL9S - PL2S - TZS8))
               + (Vl3S * PipValue * (PL9S - PL3S - TZS8))
               + (Vl4S * PipValue * (PL9S - PL4S - TZS8))
               + (Vl5S * PipValue * (PL9S - PL5S - TZS8))
               + (Vl6S * PipValue * (PL9S - PL6S - TZS8))
               + (Vl7S * PipValue * (PL9S - PL7S - TZS8))
               + (Vl8S * PipValue * (PL9S - PL8S - TZS8));

      Vl9S = NormalizeDouble(MathAbs(Loss9S) / TZS8 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss9S = 2 * LotsS * PipValue * (PL9S - PL0S - TZS8 + step2S)
               + (Vl1S * PipValue * (PL9S - PL1S - TZS8))
               + (Vl2S * PipValue * (PL9S - PL2S - TZS8))
               + (Vl3S * PipValue * (PL9S - PL3S - TZS8))
               + (Vl4S * PipValue * (PL9S - PL4S - TZS8))
               + (Vl5S * PipValue * (PL9S - PL5S - TZS8))
               + (Vl6S * PipValue * (PL9S - PL6S - TZS8))
               + (Vl7S * PipValue * (PL9S - PL7S - TZS8))
               + (Vl8S * PipValue * (PL9S - PL8S - TZS8));

      Vl9S = NormalizeDouble(MathAbs(Loss9S) / TZS8 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss9S = 3 * LotsS * PipValue * (PL9S - PL0S - TZS8 + step3S)
               + (Vl1S * PipValue * (PL9S - PL1S - TZS8))
               + (Vl2S * PipValue * (PL9S - PL2S - TZS8))
               + (Vl3S * PipValue * (PL9S - PL3S - TZS8))
               + (Vl4S * PipValue * (PL9S - PL4S - TZS8))
               + (Vl5S * PipValue * (PL9S - PL5S - TZS8))
               + (Vl6S * PipValue * (PL9S - PL6S - TZS8))
               + (Vl7S * PipValue * (PL9S - PL7S - TZS8))
               + (Vl8S * PipValue * (PL9S - PL8S - TZS8));

      Vl9S = NormalizeDouble(MathAbs(Loss9S) / TZS8 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss9S:", Loss9S, " Vl9S:", Vl9S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V10S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss10S = LotsS * PipValue * (PL10S - PL0S - TZS)
                + (Vl1S * PipValue * (PL10S - PL1S - TZS))
                + (Vl2S * PipValue * (PL10S - PL2S - TZS))
                + (Vl3S * PipValue * (PL10S - PL3S - TZS))
                + (Vl4S * PipValue * (PL10S - PL4S - TZS))
                + (Vl5S * PipValue * (PL10S - PL5S - TZS))
                + (Vl6S * PipValue * (PL10S - PL6S - TZS))
                + (Vl7S * PipValue * (PL10S - PL7S - TZS))
                + (Vl8S * PipValue * (PL10S - PL8S - TZS))
                + (Vl8S * PipValue * (PL10S - PL9S - TZS))
                + (Vl9S * PipValue * (PL10S - PL9S - TZS));
      Vl10S = NormalizeDouble(MathAbs(Loss10S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss10S = 2 * LotsS * PipValue * (PL10S - PL0S - TZS +step2S)
                + (Vl1S * PipValue * (PL10S - PL1S - TZS))
                + (Vl2S * PipValue * (PL10S - PL2S - TZS))
                + (Vl3S * PipValue * (PL10S - PL3S - TZS))
                + (Vl4S * PipValue * (PL10S - PL4S - TZS))
                + (Vl5S * PipValue * (PL10S - PL5S - TZS))
                + (Vl6S * PipValue * (PL10S - PL6S - TZS))
                + (Vl7S * PipValue * (PL10S - PL7S - TZS))
                + (Vl8S * PipValue * (PL10S - PL8S - TZS))
                + (Vl8S * PipValue * (PL10S - PL9S - TZS))
                + (Vl9S * PipValue * (PL10S - PL9S - TZS));
      Vl10S = NormalizeDouble(MathAbs(Loss10S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss10S = 3 * LotsS * PipValue * (PL10S - PL0S - TZS +step3S)
                + (Vl1S * PipValue * (PL10S - PL1S - TZS))
                + (Vl2S * PipValue * (PL10S - PL2S - TZS))
                + (Vl3S * PipValue * (PL10S - PL3S - TZS))
                + (Vl4S * PipValue * (PL10S - PL4S - TZS))
                + (Vl5S * PipValue * (PL10S - PL5S - TZS))
                + (Vl6S * PipValue * (PL10S - PL6S - TZS))
                + (Vl7S * PipValue * (PL10S - PL7S - TZS))
                + (Vl8S * PipValue * (PL10S - PL8S - TZS))
                + (Vl8S * PipValue * (PL10S - PL9S - TZS))
                + (Vl9S * PipValue * (PL10S - PL9S - TZS));
      Vl10S = NormalizeDouble(MathAbs(Loss10S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss10S:", Loss10S, " Vl10S:", Vl10S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V10MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss10S = LotsS * PipValue * (PL10S - PL0S- TZS9)
                + (Vl1S * PipValue * (PL10S - PL1S -TZS9))
                +(Vl2S * PipValue * (PL10S - PL2S -TZS9))
                + (Vl3S * PipValue * (PL10S - PL3S - TZS9))
                + (Vl4S * PipValue * (PL10S - PL4S - TZS9))
                + (Vl5S * PipValue * (PL10S - PL5S - TZS9))
                + (Vl6S * PipValue * (PL10S - PL6S - TZS9))
                + (Vl7S * PipValue * (PL10S - PL7S - TZS9))
                + (Vl8S * PipValue * (PL10S - PL8S -TZS9))
                + (Vl8S * PipValue * (PL10S - PL9S - TZS9))
                + (Vl9S * PipValue * (PL10S - PL9S - TZS9));
      Vl10S = NormalizeDouble(MathAbs(Loss10S) / TZS9 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss10S = 2 * LotsS * PipValue * (PL10S - PL0S - TZS9 + step2S)
                + (Vl1S * PipValue * (PL10S - PL1S  -TZS9))
                + (Vl2S * PipValue * (PL10S - PL2S  -TZS9))
                + (Vl3S * PipValue * (PL10S - PL3S - TZS9))
                + (Vl4S * PipValue * (PL10S - PL4S - TZS9))
                + (Vl5S * PipValue * (PL10S - PL5S - TZS9))
                + (Vl6S * PipValue * (PL10S - PL6S - TZS9))
                + (Vl7S * PipValue * (PL10S - PL7S - TZS9))
                + (Vl8S * PipValue * (PL10S - PL8S -TZS9))
                + (Vl8S * PipValue * (PL10S - PL9S - TZS9))
                + (Vl9S * PipValue * (PL10S - PL9S - TZS9));
      Vl10S = NormalizeDouble(MathAbs(Loss10S) / TZS9 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss10S = 3 * LotsS * PipValue * (PL10S - PL0S - TZS9 - step3S)
                + (Vl1S * PipValue * (PL10S - PL1S  - TZS9))
                + (Vl2S * PipValue * (PL10S - PL2S  - TZS9))
                + (Vl3S * PipValue * (PL10S - PL3S - TZS9))
                + (Vl4S * PipValue * (PL10S - PL4S - TZS9))
                + (Vl5S * PipValue * (PL10S - PL5S - TZS9))
                + (Vl6S * PipValue * (PL10S - PL6S - TZS9))
                + (Vl7S * PipValue * (PL10S - PL7S - TZS9))
                + (Vl8S * PipValue * (PL10S - PL8S - TZS9))
                + (Vl8S * PipValue * (PL10S - PL9S - TZS9))
                + (Vl9S * PipValue * (PL10S - PL9S - TZS9));
      Vl10S = NormalizeDouble(MathAbs(Loss10S) / TZS9 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss10S:", Loss10S, " Vl10S:", Vl10S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V11S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss11S = LotsS * PipValue * (PL11S - PL0S - TZS)
                + (Vl1S * PipValue * (PL11S - PL1S - TZS))
                + (Vl2S * PipValue * (PL11S - PL2S - TZS))
                + (Vl3S * PipValue * (PL11S - PL3S - TZS))
                + (Vl4S * PipValue * (PL11S - PL4S - TZS))
                + (Vl5S * PipValue * (PL11S - PL5S - TZS))
                + (Vl6S * PipValue * (PL11S - PL6S - TZS))
                + (Vl7S * PipValue * (PL11S - PL7S - TZS))
                + (Vl8S * PipValue * (PL11S - PL8S - TZS))
                + (Vl8S * PipValue * (PL11S - PL9S - TZS))
                + (Vl9S * PipValue * (PL11S - PL9S - TZS))
                + (Vl10S * PipValue * (PL11S - PL10S - TZS));
      Vl11S = NormalizeDouble(MathAbs(Loss11S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss11S = 2 * LotsS * PipValue * (PL11S - PL0S - TZS + step2S)
                + (Vl1S * PipValue * (PL11S - PL1S - TZS))
                + (Vl2S * PipValue * (PL11S - PL2S - TZS))
                + (Vl3S * PipValue * (PL11S - PL3S - TZS))
                + (Vl4S * PipValue * (PL11S - PL4S - TZS))
                + (Vl5S * PipValue * (PL11S - PL5S - TZS))
                + (Vl6S * PipValue * (PL11S - PL6S - TZS))
                + (Vl7S * PipValue * (PL11S - PL7S - TZS))
                + (Vl8S * PipValue * (PL11S - PL8S - TZS))
                + (Vl8S * PipValue * (PL11S - PL9S - TZS))
                + (Vl9S * PipValue * (PL11S - PL9S - TZS))
                + (Vl10S * PipValue * (PL11S - PL10S - TZS));
      Vl11S = NormalizeDouble(MathAbs(Loss11S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss11S = 3 * LotsS * PipValue * (PL11S - PL0S - TZS + step3S)
                + (Vl1S * PipValue * (PL11S - PL1S - TZS))
                + (Vl2S * PipValue * (PL11S - PL2S - TZS))
                + (Vl3S * PipValue * (PL11S - PL3S - TZS))
                + (Vl4S * PipValue * (PL11S - PL4S - TZS))
                + (Vl5S * PipValue * (PL11S - PL5S - TZS))
                + (Vl6S * PipValue * (PL11S - PL6S - TZS))
                + (Vl7S * PipValue * (PL11S - PL7S - TZS))
                + (Vl8S * PipValue * (PL11S - PL8S - TZS))
                + (Vl8S * PipValue * (PL11S - PL9S - TZS))
                + (Vl9S * PipValue * (PL11S - PL9S - TZS))
                + (Vl10S * PipValue * (PL11S - PL10S - TZS));
      Vl11S = NormalizeDouble(MathAbs(Loss11S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss11S:", Loss11S, " Vl11S:", Vl11S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V11MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss11S = LotsS * PipValue * (PL11S - PL0S - TZS10)
                + (Vl1S * PipValue * (PL11S - PL1S - TZS10))
                + (Vl2S * PipValue * (PL11S - PL2S - TZS10))
                + (Vl3S * PipValue * (PL11S - PL3S - TZS10))
                + (Vl4S * PipValue * (PL11S - PL4S - TZS10))
                + (Vl5S * PipValue * (PL11S - PL5S - TZS10))
                + (Vl6S * PipValue * (PL11S - PL6S - TZS10))
                + (Vl7S * PipValue * (PL11S - PL7S - TZS10))
                + (Vl8S * PipValue * (PL11S - PL8S - TZS10))
                + (Vl8S * PipValue * (PL11S - PL9S - TZS10))
                + (Vl9S * PipValue * (PL11S - PL9S - TZS10))
                + (Vl10S * PipValue * (PL11S - PL10S - TZS10));
      Vl11S = NormalizeDouble(MathAbs(Loss11S) / TZS10 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss11S = 2 * LotsS * PipValue * (PL11S - PL0S - TZS10 + step2S)
                + (Vl1S * PipValue * (PL11S - PL1S - TZS10))
                + (Vl2S * PipValue * (PL11S - PL2S - TZS10))
                + (Vl3S * PipValue * (PL11S - PL3S - TZS10))
                + (Vl4S * PipValue * (PL11S - PL4S - TZS10))
                + (Vl5S * PipValue * (PL11S - PL5S - TZS10))
                + (Vl6S * PipValue * (PL11S - PL6S - TZS10))
                + (Vl7S * PipValue * (PL11S - PL7S - TZS10))
                + (Vl8S * PipValue * (PL11S - PL8S - TZS10))
                + (Vl8S * PipValue * (PL11S - PL9S - TZS10))
                + (Vl9S * PipValue * (PL11S - PL9S - TZS10))
                + (Vl10S * PipValue * (PL11S - PL10S - TZS10));
      Vl11S = NormalizeDouble(MathAbs(Loss11S) / TZS10 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss11S = 3 * LotsS * PipValue * (PL11S - PL0S - TZS10 + step3S)
                + (Vl1S * PipValue * (PL11S - PL1S - TZS10))
                + (Vl2S * PipValue * (PL11S - PL2S - TZS10))
                + (Vl3S * PipValue * (PL11S - PL3S - TZS10))
                + (Vl4S * PipValue * (PL11S - PL4S - TZS10))
                + (Vl5S * PipValue * (PL11S - PL5S - TZS10))
                + (Vl6S * PipValue * (PL11S - PL6S - TZS10))
                + (Vl7S * PipValue * (PL11S - PL7S - TZS10))
                + (Vl8S * PipValue * (PL11S - PL8S - TZS10))
                + (Vl8S * PipValue * (PL11S - PL9S - TZS10))
                + (Vl9S * PipValue * (PL11S - PL9S - TZS10))
                + (Vl10S * PipValue * (PL11S - PL10S - TZS10));
      Vl11S = NormalizeDouble(MathAbs(Loss11S) / TZS10 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss11S:", Loss11S, " Vl11S:", Vl11S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V12S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss12S = LotsS * PipValue * (PL12S - PL0S - TZS)
                + (Vl1S * PipValue * (PL12S - PL1S - TZS))
                + (Vl2S * PipValue * (PL12S - PL2S - TZS))
                + (Vl3S * PipValue * (PL12S - PL3S - TZS))
                + (Vl4S * PipValue * (PL12S - PL4S - TZS))
                + (Vl5S * PipValue * (PL12S - PL5S - TZS))
                + (Vl6S * PipValue * (PL12S - PL6S - TZS))
                + (Vl7S * PipValue * (PL12S - PL7S - TZS))
                + (Vl8S * PipValue * (PL12S - PL8S - TZS))
                + (Vl8S * PipValue * (PL12S - PL9S - TZS))
                + (Vl9S * PipValue * (PL12S - PL9S - TZS))
                + (Vl10S * PipValue * (PL12S - PL10S - TZS))
                + (Vl11S * PipValue * (PL12S - PL11S - TZS));
      Vl12S = NormalizeDouble(MathAbs(Loss12S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss12S = 2 * LotsS * PipValue * (PL12S - PL0S - TZS + step2S)
                + (Vl1S * PipValue * (PL12S - PL1S - TZS))
                + (Vl2S * PipValue * (PL12S - PL2S - TZS))
                + (Vl3S * PipValue * (PL12S - PL3S - TZS))
                + (Vl4S * PipValue * (PL12S - PL4S - TZS))
                + (Vl5S * PipValue * (PL12S - PL5S - TZS))
                + (Vl6S * PipValue * (PL12S - PL6S - TZS))
                + (Vl7S * PipValue * (PL12S - PL7S - TZS))
                + (Vl8S * PipValue * (PL12S - PL8S - TZS))
                + (Vl8S * PipValue * (PL12S - PL9S - TZS))
                + (Vl9S * PipValue * (PL12S - PL9S - TZS))
                + (Vl10S * PipValue * (PL12S - PL10S - TZS))
                + (Vl11S * PipValue * (PL12S - PL11S - TZS));
      Vl12S = NormalizeDouble(MathAbs(Loss12S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss12S = 3 * LotsS * PipValue * (PL12S - PL0S - TZS + step3S)
                + (Vl1S * PipValue * (PL12S - PL1S - TZS))
                + (Vl2S * PipValue * (PL12S - PL2S - TZS))
                + (Vl3S * PipValue * (PL12S - PL3S - TZS))
                + (Vl4S * PipValue * (PL12S - PL4S - TZS))
                + (Vl5S * PipValue * (PL12S - PL5S - TZS))
                + (Vl6S * PipValue * (PL12S - PL6S - TZS))
                + (Vl7S * PipValue * (PL12S - PL7S - TZS))
                + (Vl8S * PipValue * (PL12S - PL8S - TZS))
                + (Vl8S * PipValue * (PL12S - PL9S - TZS))
                + (Vl9S * PipValue * (PL12S - PL9S - TZS))
                + (Vl10S * PipValue * (PL12S - PL10S - TZS))
                + (Vl11S * PipValue * (PL12S - PL11S - TZS));
      Vl12S = NormalizeDouble(MathAbs(Loss12S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss12S:", Loss12S, " Vl12S:", Vl12S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V12MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss12S = LotsS * PipValue * (PL12S - PL0S - TZS11)
                + (Vl1S * PipValue * (PL12S - PL1S - TZS11))
                + (Vl2S * PipValue * (PL12S - PL2S - TZS11))
                + (Vl3S * PipValue * (PL12S - PL3S - TZS11))
                + (Vl4S * PipValue * (PL12S - PL4S - TZS11))
                + (Vl5S * PipValue * (PL12S - PL5S - TZS11))
                + (Vl6S * PipValue * (PL12S - PL6S - TZS11))
                + (Vl7S * PipValue * (PL12S - PL7S - TZS11))
                + (Vl8S * PipValue * (PL12S - PL8S - TZS11))
                + (Vl8S * PipValue * (PL12S - PL9S - TZS11))
                + (Vl9S * PipValue * (PL12S - PL9S - TZS11))
                + (Vl10S * PipValue * (PL12S - PL10S - TZS11))
                + (Vl11S * PipValue * (PL12S - PL11S - TZS11));
      Vl12S = NormalizeDouble(MathAbs(Loss12S) / TZS11 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss12S = 2 * LotsS * PipValue * (PL12S - PL0S - TZS11 + step2S)
                + (Vl1S * PipValue * (PL12S - PL1S - TZS11))
                + (Vl2S * PipValue * (PL12S - PL2S - TZS11))
                + (Vl3S * PipValue * (PL12S - PL3S - TZS11))
                + (Vl4S * PipValue * (PL12S - PL4S - TZS11))
                + (Vl5S * PipValue * (PL12S - PL5S - TZS11))
                + (Vl6S * PipValue * (PL12S - PL6S - TZS11))
                + (Vl7S * PipValue * (PL12S - PL7S - TZS11))
                + (Vl8S * PipValue * (PL12S - PL8S - TZS11))
                + (Vl8S * PipValue * (PL12S - PL9S - TZS11))
                + (Vl9S * PipValue * (PL12S - PL9S - TZS11))
                + (Vl10S * PipValue * (PL12S - PL10S - TZS11))
                + (Vl11S * PipValue * (PL12S - PL11S - TZS11));
      Vl12S = NormalizeDouble(MathAbs(Loss12S) / TZS11 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss12S = 3 * LotsS * PipValue * (PL12S - PL0S - TZS11 + step3S)
                + (Vl1S * PipValue * (PL12S - PL1S - TZS11))
                + (Vl2S * PipValue * (PL12S - PL2S - TZS11))
                + (Vl3S * PipValue * (PL12S - PL3S - TZS11))
                + (Vl4S * PipValue * (PL12S - PL4S - TZS11))
                + (Vl5S * PipValue * (PL12S - PL5S - TZS11))
                + (Vl6S * PipValue * (PL12S - PL6S - TZS11))
                + (Vl7S * PipValue * (PL12S - PL7S - TZS11))
                + (Vl8S * PipValue * (PL12S - PL8S - TZS11))
                + (Vl8S * PipValue * (PL12S - PL9S - TZS11))
                + (Vl9S * PipValue * (PL12S - PL9S - TZS11))
                + (Vl10S * PipValue * (PL12S - PL10S - TZS11))
                + (Vl11S * PipValue * (PL12S - PL11S - TZS11));
      Vl12S = NormalizeDouble(MathAbs(Loss12S) / TZS11 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss12S:", Loss12S, " Vl12S:", Vl12S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V13S()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss13S = LotsS * PipValue * (PL13S - PL0S - TZS)
                + (Vl1S * PipValue * (PL13S - PL1S - TZS))
                + (Vl2S * PipValue * (PL13S - PL2S - TZS))
                + (Vl3S * PipValue * (PL13S - PL3S - TZS))
                + (Vl4S * PipValue * (PL13S - PL4S - TZS))
                + (Vl5S * PipValue * (PL13S - PL5S - TZS))
                + (Vl6S * PipValue * (PL13S - PL6S - TZS))
                + (Vl7S * PipValue * (PL13S - PL7S - TZS))
                + (Vl8S * PipValue * (PL13S - PL8S - TZS))
                + (Vl8S * PipValue * (PL13S - PL9S - TZS))
                + (Vl9S * PipValue * (PL13S - PL9S - TZS))
                + (Vl10S * PipValue * (PL13S - PL10S - TZS))
                + (Vl11S * PipValue * (PL13S - PL11S - TZS))
                + (Vl12S * PipValue * (PL13S - PL12S - TZS));
      Vl13S = NormalizeDouble(MathAbs(Loss13S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss13S = 2 * LotsS * PipValue * (PL13S - PL0S - TZS + step2S)
                + (Vl1S * PipValue * (PL13S - PL1S - TZS))
                + (Vl2S * PipValue * (PL13S - PL2S - TZS))
                + (Vl3S * PipValue * (PL13S - PL3S - TZS))
                + (Vl4S * PipValue * (PL13S - PL4S - TZS))
                + (Vl5S * PipValue * (PL13S - PL5S - TZS))
                + (Vl6S * PipValue * (PL13S - PL6S - TZS))
                + (Vl7S * PipValue * (PL13S - PL7S - TZS))
                + (Vl8S * PipValue * (PL13S - PL8S - TZS))
                + (Vl8S * PipValue * (PL13S - PL9S - TZS))
                + (Vl9S * PipValue * (PL13S - PL9S - TZS))
                + (Vl10S * PipValue * (PL13S - PL10S - TZS))
                + (Vl11S * PipValue * (PL13S - PL11S - TZS))
                + (Vl12S * PipValue * (PL13S - PL12S - TZS));
      Vl13S = NormalizeDouble(MathAbs(Loss13S) / TZS / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss13S = 3 * LotsS * PipValue * (PL13S - PL0S - TZS + step3S)
                + (Vl1S * PipValue * (PL13S - PL1S - TZS))
                + (Vl2S * PipValue * (PL13S - PL2S - TZS))
                + (Vl3S * PipValue * (PL13S - PL3S - TZS))
                + (Vl4S * PipValue * (PL13S - PL4S - TZS))
                + (Vl5S * PipValue * (PL13S - PL5S - TZS))
                + (Vl6S * PipValue * (PL13S - PL6S - TZS))
                + (Vl7S * PipValue * (PL13S - PL7S - TZS))
                + (Vl8S * PipValue * (PL13S - PL8S - TZS))
                + (Vl8S * PipValue * (PL13S - PL9S - TZS))
                + (Vl9S * PipValue * (PL13S - PL9S - TZS))
                + (Vl10S * PipValue * (PL13S - PL10S - TZS))
                + (Vl11S * PipValue * (PL13S - PL11S - TZS))
                + (Vl12S * PipValue * (PL13S - PL12S - TZS));
      Vl13S = NormalizeDouble(MathAbs(Loss13S) / TZS / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss13S:", Loss13S, " Vl13S:", Vl13S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V13MS()
  {
   double PipValue = CalculatePipValue() * LotsS;
   if(CONTORS == 1)
     {
      Loss13S = LotsS * PipValue * (PL13S - PL0S - TZS12)
                + (Vl1S * PipValue * (PL13S - PL1S - TZS12))
                + (Vl2S * PipValue * (PL13S - PL2S - TZS12))
                + (Vl3S * PipValue * (PL13S - PL3S - TZS12))
                + (Vl4S * PipValue * (PL13S - PL4S - TZS12))
                + (Vl5S * PipValue * (PL13S - PL5S - TZS12))
                + (Vl6S * PipValue * (PL13S - PL6S - TZS12))
                + (Vl7S * PipValue * (PL13S - PL7S - TZS12))
                + (Vl8S * PipValue * (PL13S - PL8S - TZS12))
                + (Vl8S * PipValue * (PL13S - PL9S - TZS12))
                + (Vl9S * PipValue * (PL13S - PL9S - TZS12))
                + (Vl10S * PipValue * (PL13S - PL10S - TZS12))
                + (Vl11S * PipValue * (PL13S - PL11S - TZS12))
                + (Vl12S * PipValue * (PL13S - PL12S - TZS12));
      Vl13S = NormalizeDouble(MathAbs(Loss13S) / TZS12 / PipValue, decimalPlace);
     }
   if(CONTORS == 2)
     {
      Loss13S = 2 * LotsS * PipValue * (PL13S - PL0S - TZS12 + step2S)
                + (Vl1S * PipValue * (PL13S - PL1S - TZS12))
                + (Vl2S * PipValue * (PL13S - PL2S - TZS12))
                + (Vl3S * PipValue * (PL13S - PL3S - TZS12))
                + (Vl4S * PipValue * (PL13S - PL4S - TZS12))
                + (Vl5S * PipValue * (PL13S - PL5S - TZS12))
                + (Vl6S * PipValue * (PL13S - PL6S - TZS12))
                + (Vl7S * PipValue * (PL13S - PL7S - TZS12))
                + (Vl8S * PipValue * (PL13S - PL8S - TZS12))
                + (Vl8S * PipValue * (PL13S - PL9S - TZS12))
                + (Vl9S * PipValue * (PL13S - PL9S - TZS12))
                + (Vl10S * PipValue * (PL13S - PL10S - TZS12))
                + (Vl11S * PipValue * (PL13S - PL11S - TZS12))
                + (Vl12S * PipValue * (PL13S - PL12S - TZS12));
      Vl13S = NormalizeDouble(MathAbs(Loss13S) / TZS12 / PipValue, decimalPlace);
     }
   if(CONTORS == 3)
     {
      Loss13S = 3 * LotsS * PipValue * (PL13S - PL0S - TZS12 + step3S)
                + (Vl1S * PipValue * (PL13S - PL1S - TZS12))
                + (Vl2S * PipValue * (PL13S - PL2S - TZS12))
                + (Vl3S * PipValue * (PL13S - PL3S - TZS12))
                + (Vl4S * PipValue * (PL13S - PL4S - TZS12))
                + (Vl5S * PipValue * (PL13S - PL5S - TZS12))
                + (Vl6S * PipValue * (PL13S - PL6S - TZS12))
                + (Vl7S * PipValue * (PL13S - PL7S - TZS12))
                + (Vl8S * PipValue * (PL13S - PL8S - TZS12))
                + (Vl8S * PipValue * (PL13S - PL9S - TZS12))
                + (Vl9S * PipValue * (PL13S - PL9S - TZS12))
                + (Vl10S * PipValue * (PL13S - PL10S - TZS12))
                + (Vl11S * PipValue * (PL13S - PL11S - TZS12))
                + (Vl12S * PipValue * (PL13S - PL12S - TZS12));
      Vl13S = NormalizeDouble(MathAbs(Loss13S) / TZS12 / PipValue, decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss13S:", Loss13S, " Vl13S:", Vl13S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V14S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss14S=LotsS*PipValue*(PL14S-PL0S- TZS)
              +(Vl1S*PipValue*(PL14S-PL1S- TZS))
              +(Vl2S*PipValue*(PL14S-PL2S- TZS))
              +(Vl3S*PipValue*(PL14S-PL3S- TZS))
              +(Vl4S*PipValue*(PL14S-PL4S- TZS))
              +(Vl5S*PipValue*(PL14S-PL5S- TZS))
              +(Vl6S*PipValue*(PL14S-PL6S- TZS))
              +(Vl7S*PipValue*(PL14S-PL7S- TZS))
              +(Vl8S*PipValue*(PL14S-PL8S- TZS))
              +(Vl8S*PipValue*(PL14S-PL9S- TZS))
              +(Vl9S*PipValue*(PL14S-PL9S- TZS))
              +(Vl10S*PipValue*(PL14S-PL10S- TZS))
              +(Vl11S*PipValue*(PL14S-PL11S- TZS))
              +(Vl12S*PipValue*(PL14S-PL12S- TZS))
              +(Vl13S*PipValue*(PL14S-PL13S- TZS));
      Vl14S=NormalizeDouble(MathAbs(Loss14S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss14S=2*LotsS*PipValue*(PL14S-PL0S- TZS+step2S)
              +(Vl1S*PipValue*(PL14S-PL1S- TZS))
              +(Vl2S*PipValue*(PL14S-PL2S- TZS))
              +(Vl3S*PipValue*(PL14S-PL3S- TZS))
              +(Vl4S*PipValue*(PL14S-PL4S- TZS))
              +(Vl5S*PipValue*(PL14S-PL5S- TZS))
              +(Vl6S*PipValue*(PL14S-PL6S- TZS))
              +(Vl7S*PipValue*(PL14S-PL7S- TZS))
              +(Vl8S*PipValue*(PL14S-PL8S- TZS))
              +(Vl8S*PipValue*(PL14S-PL9S- TZS))
              +(Vl9S*PipValue*(PL14S-PL9S- TZS))
              +(Vl10S*PipValue*(PL14S-PL10S- TZS))
              +(Vl11S*PipValue*(PL14S-PL11S- TZS))
              +(Vl12S*PipValue*(PL14S-PL12S- TZS))
              +(Vl13S*PipValue*(PL14S-PL13S- TZS));
      Vl14S=NormalizeDouble(MathAbs(Loss14S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss14S=3*LotsS*PipValue*(PL14S-PL0S- TZS+step3S)
              +(Vl1S*PipValue*(PL14S-PL1S- TZS))
              +(Vl2S*PipValue*(PL14S-PL2S- TZS))
              +(Vl3S*PipValue*(PL14S-PL3S- TZS))
              +(Vl4S*PipValue*(PL14S-PL4S- TZS))
              +(Vl5S*PipValue*(PL14S-PL5S- TZS))
              +(Vl6S*PipValue*(PL14S-PL6S- TZS))
              +(Vl7S*PipValue*(PL14S-PL7S- TZS))
              +(Vl8S*PipValue*(PL14S-PL8S- TZS))
              +(Vl8S*PipValue*(PL14S-PL9S- TZS))
              +(Vl9S*PipValue*(PL14S-PL9S- TZS))
              +(Vl10S*PipValue*(PL14S-PL10S- TZS))
              +(Vl11S*PipValue*(PL14S-PL11S- TZS))
              +(Vl12S*PipValue*(PL14S-PL12S- TZS))
              +(Vl13S*PipValue*(PL14S-PL13S- TZS));
      Vl14S=NormalizeDouble(MathAbs(Loss14S)/TZS/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss14S:", Loss14S, " Vl14S:", Vl14S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V14MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss14S=LotsS*PipValue*(PL14S-PL0S- TZS13)
              +(Vl1S*PipValue*(PL14S-PL1S- TZS13))
              +(Vl2S*PipValue*(PL14S-PL2S- TZS13))
              +(Vl3S*PipValue*(PL14S-PL3S- TZS13))
              +(Vl4S*PipValue*(PL14S-PL4S- TZS13))
              +(Vl5S*PipValue*(PL14S-PL5S- TZS13))
              +(Vl6S*PipValue*(PL14S-PL6S- TZS13))
              +(Vl7S*PipValue*(PL14S-PL7S- TZS13))
              +(Vl8S*PipValue*(PL14S-PL8S- TZS13))
              +(Vl8S*PipValue*(PL14S-PL9S- TZS13))
              +(Vl9S*PipValue*(PL14S-PL9S- TZS13))
              +(Vl10S*PipValue*(PL14S-PL10S- TZS13))
              +(Vl11S*PipValue*(PL14S-PL11S- TZS13))
              +(Vl12S*PipValue*(PL14S-PL12S- TZS13))
              +(Vl13S*PipValue*(PL14S-PL13S- TZS13));
      Vl14S=NormalizeDouble(MathAbs(Loss14S)/TZS13/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss14S=2*LotsS*PipValue*(PL14S-PL0S- TZS13+step2S)
              +(Vl1S*PipValue*(PL14S-PL1S- TZS13))
              +(Vl2S*PipValue*(PL14S-PL2S- TZS13))
              +(Vl3S*PipValue*(PL14S-PL3S- TZS13))
              +(Vl4S*PipValue*(PL14S-PL4S- TZS13))
              +(Vl5S*PipValue*(PL14S-PL5S- TZS13))
              +(Vl6S*PipValue*(PL14S-PL6S- TZS13))
              +(Vl7S*PipValue*(PL14S-PL7S- TZS13))
              +(Vl8S*PipValue*(PL14S-PL8S- TZS13))
              +(Vl8S*PipValue*(PL14S-PL9S- TZS13))
              +(Vl9S*PipValue*(PL14S-PL9S- TZS13))
              +(Vl10S*PipValue*(PL14S-PL10S- TZS13))
              +(Vl11S*PipValue*(PL14S-PL11S- TZS13))
              +(Vl12S*PipValue*(PL14S-PL12S- TZS13))
              +(Vl13S*PipValue*(PL14S-PL13S- TZS13));
      Vl14S=NormalizeDouble(MathAbs(Loss14S)/TZS13/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss14S=3*LotsS*PipValue*(PL14S-PL0S- TZS13+step3S)
              +(Vl1S*PipValue*(PL14S-PL1S- TZS13))
              +(Vl2S*PipValue*(PL14S-PL2S- TZS13))
              +(Vl3S*PipValue*(PL14S-PL3S- TZS13))
              +(Vl4S*PipValue*(PL14S-PL4S- TZS13))
              +(Vl5S*PipValue*(PL14S-PL5S- TZS13))
              +(Vl6S*PipValue*(PL14S-PL6S- TZS13))
              +(Vl7S*PipValue*(PL14S-PL7S- TZS13))
              +(Vl8S*PipValue*(PL14S-PL8S- TZS13))
              +(Vl8S*PipValue*(PL14S-PL9S- TZS13))
              +(Vl9S*PipValue*(PL14S-PL9S- TZS13))
              +(Vl10S*PipValue*(PL14S-PL10S- TZS13))
              +(Vl11S*PipValue*(PL14S-PL11S- TZS13))
              +(Vl12S*PipValue*(PL14S-PL12S- TZS13))
              +(Vl13S*PipValue*(PL14S-PL13S- TZS13));
      Vl14S=NormalizeDouble(MathAbs(Loss14S)/TZS13/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss14S:", Loss14S, " Vl14S:", Vl14S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V15S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss15S=LotsS*PipValue*(PL15S-PL0S- TZS)
              +(Vl1S*PipValue*(PL15S-PL1S- TZS))
              +(Vl2S*PipValue*(PL15S-PL2S- TZS))
              +(Vl3S*PipValue*(PL15S-PL3S- TZS))
              +(Vl4S*PipValue*(PL15S-PL4S- TZS))
              +(Vl5S*PipValue*(PL15S-PL5S- TZS))
              +(Vl6S*PipValue*(PL15S-PL6S- TZS))
              +(Vl7S*PipValue*(PL15S-PL7S- TZS))
              +(Vl8S*PipValue*(PL15S-PL8S- TZS))
              +(Vl8S*PipValue*(PL15S-PL9S- TZS))
              +(Vl9S*PipValue*(PL15S-PL9S- TZS))
              +(Vl10S*PipValue*(PL15S-PL10S- TZS))
              +(Vl11S*PipValue*(PL15S-PL11S- TZS))
              +(Vl12S*PipValue*(PL15S-PL12S- TZS))
              +(Vl13S*PipValue*(PL15S-PL13S- TZS))
              +(Vl14S*PipValue*(PL15S-PL14S- TZS));
      Vl15S=NormalizeDouble(MathAbs(Loss15S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss15S=2*LotsS*PipValue*(PL15S-PL0S- TZS+step2S)
              +(Vl1S*PipValue*(PL15S-PL1S- TZS))
              +(Vl2S*PipValue*(PL15S-PL2S- TZS))
              +(Vl3S*PipValue*(PL15S-PL3S- TZS))
              +(Vl4S*PipValue*(PL15S-PL4S- TZS))
              +(Vl5S*PipValue*(PL15S-PL5S- TZS))
              +(Vl6S*PipValue*(PL15S-PL6S- TZS))
              +(Vl7S*PipValue*(PL15S-PL7S- TZS))
              +(Vl8S*PipValue*(PL15S-PL8S- TZS))
              +(Vl8S*PipValue*(PL15S-PL9S- TZS))
              +(Vl9S*PipValue*(PL15S-PL9S- TZS))
              +(Vl10S*PipValue*(PL15S-PL10S- TZS))
              +(Vl11S*PipValue*(PL15S-PL11S- TZS))
              +(Vl12S*PipValue*(PL15S-PL12S- TZS))
              +(Vl13S*PipValue*(PL15S-PL13S- TZS))
              +(Vl14S*PipValue*(PL15S-PL14S- TZS));
      Vl15S=NormalizeDouble(MathAbs(Loss15S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss15S=3*LotsS*PipValue*(PL15S-PL0S- TZS+step3S)
              +(Vl1S*PipValue*(PL15S-PL1S- TZS))
              +(Vl2S*PipValue*(PL15S-PL2S- TZS))
              +(Vl3S*PipValue*(PL15S-PL3S- TZS))
              +(Vl4S*PipValue*(PL15S-PL4S- TZS))
              +(Vl5S*PipValue*(PL15S-PL5S- TZS))
              +(Vl6S*PipValue*(PL15S-PL6S- TZS))
              +(Vl7S*PipValue*(PL15S-PL7S- TZS))
              +(Vl8S*PipValue*(PL15S-PL8S- TZS))
              +(Vl8S*PipValue*(PL15S-PL9S- TZS))
              +(Vl9S*PipValue*(PL15S-PL9S- TZS))
              +(Vl10S*PipValue*(PL15S-PL10S- TZS))
              +(Vl11S*PipValue*(PL15S-PL11S- TZS))
              +(Vl12S*PipValue*(PL15S-PL12S- TZS))
              +(Vl13S*PipValue*(PL15S-PL13S- TZS))
              +(Vl14S*PipValue*(PL15S-PL14S- TZS));
      Vl15S=NormalizeDouble(MathAbs(Loss15S)/TZS/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss15S:", Loss15S, " Vl15S:", Vl15S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V15MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss15S=LotsS*PipValue*(PL15S-PL0S- TZS14)
              +(Vl1S*PipValue*(PL15S-PL1S- TZS14))
              +(Vl2S*PipValue*(PL15S-PL2S- TZS14))
              +(Vl3S*PipValue*(PL15S-PL3S- TZS14))
              +(Vl4S*PipValue*(PL15S-PL4S- TZS14))
              +(Vl5S*PipValue*(PL15S-PL5S- TZS14))
              +(Vl6S*PipValue*(PL15S-PL6S- TZS14))
              +(Vl7S*PipValue*(PL15S-PL7S- TZS14))
              +(Vl8S*PipValue*(PL15S-PL8S- TZS14))
              +(Vl8S*PipValue*(PL15S-PL9S- TZS14))
              +(Vl9S*PipValue*(PL15S-PL9S- TZS14))
              +(Vl10S*PipValue*(PL15S-PL10S- TZS14))
              +(Vl11S*PipValue*(PL15S-PL11S- TZS14))
              +(Vl12S*PipValue*(PL15S-PL12S- TZS14))
              +(Vl13S*PipValue*(PL15S-PL13S- TZS14))
              +(Vl14S*PipValue*(PL15S-PL14S- TZS14));
      Vl15S=NormalizeDouble(MathAbs(Loss15S)/TZS14/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss15S=2*LotsS*PipValue*(PL15S-PL0S- TZS14+step2S)
              +(Vl1S*PipValue*(PL15S-PL1S- TZS14))
              +(Vl2S*PipValue*(PL15S-PL2S- TZS14))
              +(Vl3S*PipValue*(PL15S-PL3S- TZS14))
              +(Vl4S*PipValue*(PL15S-PL4S- TZS14))
              +(Vl5S*PipValue*(PL15S-PL5S- TZS14))
              +(Vl6S*PipValue*(PL15S-PL6S- TZS14))
              +(Vl7S*PipValue*(PL15S-PL7S- TZS14))
              +(Vl8S*PipValue*(PL15S-PL8S- TZS14))
              +(Vl8S*PipValue*(PL15S-PL9S- TZS14))
              +(Vl9S*PipValue*(PL15S-PL9S- TZS14))
              +(Vl10S*PipValue*(PL15S-PL10S- TZS14))
              +(Vl11S*PipValue*(PL15S-PL11S- TZS14))
              +(Vl12S*PipValue*(PL15S-PL12S- TZS14))
              +(Vl13S*PipValue*(PL15S-PL13S- TZS14))
              +(Vl14S*PipValue*(PL15S-PL14S- TZS14));
      Vl15S=NormalizeDouble(MathAbs(Loss15S)/TZS14/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss15S=3*LotsS*PipValue*(PL15S-PL0S- TZS14+step3S)
              +(Vl1S*PipValue*(PL15S-PL1S- TZS14))
              +(Vl2S*PipValue*(PL15S-PL2S- TZS14))
              +(Vl3S*PipValue*(PL15S-PL3S- TZS14))
              +(Vl4S*PipValue*(PL15S-PL4S- TZS14))
              +(Vl5S*PipValue*(PL15S-PL5S- TZS14))
              +(Vl6S*PipValue*(PL15S-PL6S- TZS14))
              +(Vl7S*PipValue*(PL15S-PL7S- TZS14))
              +(Vl8S*PipValue*(PL15S-PL8S- TZS14))
              +(Vl8S*PipValue*(PL15S-PL9S- TZS14))
              +(Vl9S*PipValue*(PL15S-PL9S- TZS14))
              +(Vl10S*PipValue*(PL15S-PL10S- TZS14))
              +(Vl11S*PipValue*(PL15S-PL11S- TZS14))
              +(Vl12S*PipValue*(PL15S-PL12S- TZS14))
              +(Vl13S*PipValue*(PL15S-PL13S- TZS14))
              +(Vl14S*PipValue*(PL15S-PL14S- TZS14));
      Vl15S=NormalizeDouble(MathAbs(Loss15S)/TZS14/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss15S:", Loss15S, " Vl15S:", Vl15S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V16S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss16S=LotsS*PipValue*(PL16S-PL0S- TZS)
              +(Vl1S*PipValue*(PL16S-PL1S- TZS))
              +(Vl2S*PipValue*(PL16S-PL2S- TZS))
              +(Vl3S*PipValue*(PL16S-PL3S- TZS))
              +(Vl4S*PipValue*(PL16S-PL4S- TZS))
              +(Vl5S*PipValue*(PL16S-PL5S- TZS))
              +(Vl6S*PipValue*(PL16S-PL6S- TZS))
              +(Vl7S*PipValue*(PL16S-PL7S- TZS))
              +(Vl8S*PipValue*(PL16S-PL8S- TZS))
              +(Vl8S*PipValue*(PL16S-PL9S- TZS))
              +(Vl9S*PipValue*(PL16S-PL9S- TZS))
              +(Vl10S*PipValue*(PL16S-PL10S- TZS))
              +(Vl11S*PipValue*(PL16S-PL11S- TZS))
              +(Vl12S*PipValue*(PL16S-PL12S- TZS))
              +(Vl13S*PipValue*(PL16S-PL13S- TZS))
              +(Vl14S*PipValue*(PL16S-PL14S- TZS))
              +(Vl15S*PipValue*(PL16S-PL15S- TZS));
      Vl16S=NormalizeDouble(MathAbs(Loss16S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss16S=2*LotsS*PipValue*(PL16S-PL0S- TZS+step2S)
              +(Vl1S*PipValue*(PL16S-PL1S- TZS))
              +(Vl2S*PipValue*(PL16S-PL2S- TZS))
              +(Vl3S*PipValue*(PL16S-PL3S- TZS))
              +(Vl4S*PipValue*(PL16S-PL4S- TZS))
              +(Vl5S*PipValue*(PL16S-PL5S- TZS))
              +(Vl6S*PipValue*(PL16S-PL6S- TZS))
              +(Vl7S*PipValue*(PL16S-PL7S- TZS))
              +(Vl8S*PipValue*(PL16S-PL8S- TZS))
              +(Vl8S*PipValue*(PL16S-PL9S- TZS))
              +(Vl9S*PipValue*(PL16S-PL9S- TZS))
              +(Vl10S*PipValue*(PL16S-PL10S- TZS))
              +(Vl11S*PipValue*(PL16S-PL11S- TZS))
              +(Vl12S*PipValue*(PL16S-PL12S- TZS))
              +(Vl13S*PipValue*(PL16S-PL13S- TZS))
              +(Vl14S*PipValue*(PL16S-PL14S- TZS))
              +(Vl15S*PipValue*(PL16S-PL15S- TZS));
      Vl16S=NormalizeDouble(MathAbs(Loss16S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss16S=3*LotsS*PipValue*(PL16S-PL0S- TZS+step3S)
              +(Vl1S*PipValue*(PL16S-PL1S- TZS))
              +(Vl2S*PipValue*(PL16S-PL2S- TZS))
              +(Vl3S*PipValue*(PL16S-PL3S- TZS))
              +(Vl4S*PipValue*(PL16S-PL4S- TZS))
              +(Vl5S*PipValue*(PL16S-PL5S- TZS))
              +(Vl6S*PipValue*(PL16S-PL6S- TZS))
              +(Vl7S*PipValue*(PL16S-PL7S- TZS))
              +(Vl8S*PipValue*(PL16S-PL8S- TZS))
              +(Vl8S*PipValue*(PL16S-PL9S- TZS))
              +(Vl9S*PipValue*(PL16S-PL9S- TZS))
              +(Vl10S*PipValue*(PL16S-PL10S- TZS))
              +(Vl11S*PipValue*(PL16S-PL11S- TZS))
              +(Vl12S*PipValue*(PL16S-PL12S- TZS))
              +(Vl13S*PipValue*(PL16S-PL13S- TZS))
              +(Vl14S*PipValue*(PL16S-PL14S- TZS))
              +(Vl15S*PipValue*(PL16S-PL15S- TZS));
      Vl16S=NormalizeDouble(MathAbs(Loss16S)/TZS/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss16S:", Loss16S, " Vl16S:", Vl16S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V16MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss16S=LotsS*PipValue*(PL16S-PL0S- TZS15)
              +(Vl1S*PipValue*(PL16S-PL1S- TZS15))
              +(Vl2S*PipValue*(PL16S-PL2S- TZS15))
              +(Vl3S*PipValue*(PL16S-PL3S- TZS15))
              +(Vl4S*PipValue*(PL16S-PL4S- TZS15))
              +(Vl5S*PipValue*(PL16S-PL5S- TZS15))
              +(Vl6S*PipValue*(PL16S-PL6S- TZS15))
              +(Vl7S*PipValue*(PL16S-PL7S- TZS15))
              +(Vl8S*PipValue*(PL16S-PL8S- TZS15))
              +(Vl8S*PipValue*(PL16S-PL9S- TZS15))
              +(Vl9S*PipValue*(PL16S-PL9S- TZS15))
              +(Vl10S*PipValue*(PL16S-PL10S- TZS15))
              +(Vl11S*PipValue*(PL16S-PL11S- TZS15))
              +(Vl12S*PipValue*(PL16S-PL12S- TZS15))
              +(Vl13S*PipValue*(PL16S-PL13S- TZS15))
              +(Vl14S*PipValue*(PL16S-PL14S- TZS15))
              +(Vl15S*PipValue*(PL16S-PL15S- TZS15));
      Vl16S=NormalizeDouble(MathAbs(Loss16S)/TZS15/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss16S=2*LotsS*PipValue*(PL16S-PL0S- TZS15+step2S)
              +(Vl1S*PipValue*(PL16S-PL1S- TZS15))
              +(Vl2S*PipValue*(PL16S-PL2S- TZS15))
              +(Vl3S*PipValue*(PL16S-PL3S- TZS15))
              +(Vl4S*PipValue*(PL16S-PL4S- TZS15))
              +(Vl5S*PipValue*(PL16S-PL5S- TZS15))
              +(Vl6S*PipValue*(PL16S-PL6S- TZS15))
              +(Vl7S*PipValue*(PL16S-PL7S- TZS15))
              +(Vl8S*PipValue*(PL16S-PL8S- TZS15))
              +(Vl8S*PipValue*(PL16S-PL9S- TZS15))
              +(Vl9S*PipValue*(PL16S-PL9S- TZS15))
              +(Vl10S*PipValue*(PL16S-PL10S- TZS15))
              +(Vl11S*PipValue*(PL16S-PL11S- TZS15))
              +(Vl12S*PipValue*(PL16S-PL12S- TZS15))
              +(Vl13S*PipValue*(PL16S-PL13S- TZS15))
              +(Vl14S*PipValue*(PL16S-PL14S- TZS15))
              +(Vl15S*PipValue*(PL16S-PL15S- TZS15));
      Vl16S=NormalizeDouble(MathAbs(Loss16S)/TZS15/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss16S=3*LotsS*PipValue*(PL16S-PL0S- TZS15+step3S)
              +(Vl1S*PipValue*(PL16S-PL1S- TZS15))
              +(Vl2S*PipValue*(PL16S-PL2S- TZS15))
              +(Vl3S*PipValue*(PL16S-PL3S- TZS15))
              +(Vl4S*PipValue*(PL16S-PL4S- TZS15))
              +(Vl5S*PipValue*(PL16S-PL5S- TZS15))
              +(Vl6S*PipValue*(PL16S-PL6S- TZS15))
              +(Vl7S*PipValue*(PL16S-PL7S- TZS15))
              +(Vl8S*PipValue*(PL16S-PL8S- TZS15))
              +(Vl8S*PipValue*(PL16S-PL9S- TZS15))
              +(Vl9S*PipValue*(PL16S-PL9S- TZS15))
              +(Vl10S*PipValue*(PL16S-PL10S- TZS15))
              +(Vl11S*PipValue*(PL16S-PL11S- TZS15))
              +(Vl12S*PipValue*(PL16S-PL12S- TZS15))
              +(Vl13S*PipValue*(PL16S-PL13S- TZS15))
              +(Vl14S*PipValue*(PL16S-PL14S- TZS15))
              +(Vl15S*PipValue*(PL16S-PL15S- TZS15));
      Vl16S=NormalizeDouble(MathAbs(Loss16S)/TZS15/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss16S:", Loss16S, " Vl16S:", Vl16S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V17S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss17S=LotsS*PipValue*(PL17S-PL0S- TZS)
              +(Vl1S*PipValue*(PL17S-PL1S- TZS))
              +(Vl2S*PipValue*(PL17S-PL2S- TZS))
              +(Vl3S*PipValue*(PL17S-PL3S- TZS))
              +(Vl4S*PipValue*(PL17S-PL4S- TZS))
              +(Vl5S*PipValue*(PL17S-PL5S- TZS))
              +(Vl6S*PipValue*(PL17S-PL6S- TZS))
              +(Vl7S*PipValue*(PL17S-PL7S- TZS))
              +(Vl8S*PipValue*(PL17S-PL8S- TZS))
              +(Vl8S*PipValue*(PL17S-PL9S- TZS))
              +(Vl9S*PipValue*(PL17S-PL9S- TZS))
              +(Vl10S*PipValue*(PL17S-PL10S- TZS))
              +(Vl11S*PipValue*(PL17S-PL11S- TZS))
              +(Vl12S*PipValue*(PL17S-PL12S- TZS))
              +(Vl13S*PipValue*(PL17S-PL13S- TZS))
              +(Vl14S*PipValue*(PL17S-PL14S- TZS))
              +(Vl15S*PipValue*(PL17S-PL15S- TZS))
              +(Vl16S*PipValue*(PL17S-PL16S- TZS));
      Vl17S=NormalizeDouble(MathAbs(Loss17S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss17S=2*LotsS*PipValue*(PL17S-PL0S- TZS+step2S)
              +(Vl1S*PipValue*(PL17S-PL1S- TZS))
              +(Vl2S*PipValue*(PL17S-PL2S- TZS))
              +(Vl3S*PipValue*(PL17S-PL3S- TZS))
              +(Vl4S*PipValue*(PL17S-PL4S- TZS))
              +(Vl5S*PipValue*(PL17S-PL5S- TZS))
              +(Vl6S*PipValue*(PL17S-PL6S- TZS))
              +(Vl7S*PipValue*(PL17S-PL7S- TZS))
              +(Vl8S*PipValue*(PL17S-PL8S- TZS))
              +(Vl8S*PipValue*(PL17S-PL9S- TZS))
              +(Vl9S*PipValue*(PL17S-PL9S- TZS))
              +(Vl10S*PipValue*(PL17S-PL10S- TZS))
              +(Vl11S*PipValue*(PL17S-PL11S- TZS))
              +(Vl12S*PipValue*(PL17S-PL12S- TZS))
              +(Vl13S*PipValue*(PL17S-PL13S- TZS))
              +(Vl14S*PipValue*(PL17S-PL14S- TZS))
              +(Vl15S*PipValue*(PL17S-PL15S- TZS))
              +(Vl16S*PipValue*(PL17S-PL16S- TZS));
      Vl17S=NormalizeDouble(MathAbs(Loss17S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss17S=3*LotsS*PipValue*(PL17S-PL0S- TZS+step3S)
              +(Vl1S*PipValue*(PL17S-PL1S- TZS))
              +(Vl2S*PipValue*(PL17S-PL2S- TZS))
              +(Vl3S*PipValue*(PL17S-PL3S- TZS))
              +(Vl4S*PipValue*(PL17S-PL4S- TZS))
              +(Vl5S*PipValue*(PL17S-PL5S- TZS))
              +(Vl6S*PipValue*(PL17S-PL6S- TZS))
              +(Vl7S*PipValue*(PL17S-PL7S- TZS))
              +(Vl8S*PipValue*(PL17S-PL8S- TZS))
              +(Vl8S*PipValue*(PL17S-PL9S- TZS))
              +(Vl9S*PipValue*(PL17S-PL9S- TZS))
              +(Vl10S*PipValue*(PL17S-PL10S- TZS))
              +(Vl11S*PipValue*(PL17S-PL11S- TZS))
              +(Vl12S*PipValue*(PL17S-PL12S- TZS))
              +(Vl13S*PipValue*(PL17S-PL13S- TZS))
              +(Vl14S*PipValue*(PL17S-PL14S- TZS))
              +(Vl15S*PipValue*(PL17S-PL15S- TZS))
              +(Vl16S*PipValue*(PL17S-PL16S- TZS));

      Vl17S=NormalizeDouble(MathAbs(Loss17S)/TZS/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss17S:", Loss17S, " Vl17S:", Vl17S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V17MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss17S=LotsS*PipValue*(PL17S-PL0S- TZS16)
              +(Vl1S*PipValue*(PL17S-PL1S- TZS16))
              +(Vl2S*PipValue*(PL17S-PL2S- TZS16))
              +(Vl3S*PipValue*(PL17S-PL3S- TZS16))
              +(Vl4S*PipValue*(PL17S-PL4S- TZS16))
              +(Vl5S*PipValue*(PL17S-PL5S- TZS16))
              +(Vl6S*PipValue*(PL17S-PL6S- TZS16))
              +(Vl7S*PipValue*(PL17S-PL7S- TZS16))
              +(Vl8S*PipValue*(PL17S-PL8S- TZS16))
              +(Vl8S*PipValue*(PL17S-PL9S- TZS16))
              +(Vl9S*PipValue*(PL17S-PL9S- TZS16))
              +(Vl10S*PipValue*(PL17S-PL10S- TZS16))
              +(Vl11S*PipValue*(PL17S-PL11S- TZS16))
              +(Vl12S*PipValue*(PL17S-PL12S- TZS16))
              +(Vl13S*PipValue*(PL17S-PL13S- TZS16))
              +(Vl14S*PipValue*(PL17S-PL14S- TZS16))
              +(Vl15S*PipValue*(PL17S-PL15S- TZS16))
              +(Vl16S*PipValue*(PL17S-PL16S- TZS16));
      Vl17S=NormalizeDouble(MathAbs(Loss17S)/TZS16/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss17S=2*LotsS*PipValue*(PL17S-PL0S- TZS16+step2S)
              +(Vl1S*PipValue*(PL17S-PL1S- TZS16))
              +(Vl2S*PipValue*(PL17S-PL2S- TZS16))
              +(Vl3S*PipValue*(PL17S-PL3S- TZS16))
              +(Vl4S*PipValue*(PL17S-PL4S- TZS16))
              +(Vl5S*PipValue*(PL17S-PL5S- TZS16))
              +(Vl6S*PipValue*(PL17S-PL6S- TZS16))
              +(Vl7S*PipValue*(PL17S-PL7S- TZS16))
              +(Vl8S*PipValue*(PL17S-PL8S- TZS16))
              +(Vl8S*PipValue*(PL17S-PL9S- TZS16))
              +(Vl9S*PipValue*(PL17S-PL9S- TZS16))
              +(Vl10S*PipValue*(PL17S-PL10S- TZS16))
              +(Vl11S*PipValue*(PL17S-PL11S- TZS16))
              +(Vl12S*PipValue*(PL17S-PL12S- TZS16))
              +(Vl13S*PipValue*(PL17S-PL13S- TZS16))
              +(Vl14S*PipValue*(PL17S-PL14S- TZS16))
              +(Vl15S*PipValue*(PL17S-PL15S- TZS16))
              +(Vl16S*PipValue*(PL17S-PL16S- TZS16));
      Vl17S=NormalizeDouble(MathAbs(Loss17S)/TZS16/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss17S=3*LotsS*PipValue*(PL17S-PL0S- TZS16+step3S)
              +(Vl1S*PipValue*(PL17S-PL1S- TZS16))
              +(Vl2S*PipValue*(PL17S-PL2S- TZS16))
              +(Vl3S*PipValue*(PL17S-PL3S- TZS16))
              +(Vl4S*PipValue*(PL17S-PL4S- TZS16))
              +(Vl5S*PipValue*(PL17S-PL5S- TZS16))
              +(Vl6S*PipValue*(PL17S-PL6S- TZS16))
              +(Vl7S*PipValue*(PL17S-PL7S- TZS16))
              +(Vl8S*PipValue*(PL17S-PL8S- TZS16))
              +(Vl8S*PipValue*(PL17S-PL9S- TZS16))
              +(Vl9S*PipValue*(PL17S-PL9S- TZS16))
              +(Vl10S*PipValue*(PL17S-PL10S- TZS16))
              +(Vl11S*PipValue*(PL17S-PL11S- TZS16))
              +(Vl12S*PipValue*(PL17S-PL12S- TZS16))
              +(Vl13S*PipValue*(PL17S-PL13S- TZS16))
              +(Vl14S*PipValue*(PL17S-PL14S- TZS16))
              +(Vl15S*PipValue*(PL17S-PL15S- TZS16))
              +(Vl16S*PipValue*(PL17S-PL16S- TZS16));

      Vl17S=NormalizeDouble(MathAbs(Loss17S)/TZS16/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss17S:", Loss17S, " Vl17S:", Vl17S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V18S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss18S=LotsS*PipValue*(PL18S-PL0S- TZS)
              +(Vl1S*PipValue*(PL18S-PL1S- TZS))
              +(Vl2S*PipValue*(PL18S-PL2S- TZS))
              +(Vl3S*PipValue*(PL18S-PL3S- TZS))
              +(Vl4S*PipValue*(PL18S-PL4S- TZS))
              +(Vl5S*PipValue*(PL18S-PL5S- TZS))
              +(Vl6S*PipValue*(PL18S-PL6S- TZS))
              +(Vl7S*PipValue*(PL18S-PL7S- TZS))
              +(Vl8S*PipValue*(PL18S-PL8S- TZS))
              +(Vl8S*PipValue*(PL18S-PL9S- TZS))
              +(Vl9S*PipValue*(PL18S-PL9S- TZS))
              +(Vl10S*PipValue*(PL18S-PL10S- TZS))
              +(Vl11S*PipValue*(PL18S-PL11S- TZS))
              +(Vl12S*PipValue*(PL18S-PL12S- TZS))
              +(Vl13S*PipValue*(PL18S-PL13S- TZS))
              +(Vl14S*PipValue*(PL18S-PL14S- TZS))
              +(Vl15S*PipValue*(PL18S-PL15S- TZS))
              +(Vl16S*PipValue*(PL18S-PL16S- TZS))
              +(Vl17S*PipValue*(PL18S-PL17S- TZS));
      Vl18S=NormalizeDouble(MathAbs(Loss18S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss18S=2*LotsS*PipValue*(PL18S-PL0S- TZS+step2S)
              +(Vl1S*PipValue*(PL18S-PL1S- TZS))
              +(Vl2S*PipValue*(PL18S-PL2S- TZS))
              +(Vl3S*PipValue*(PL18S-PL3S- TZS))
              +(Vl4S*PipValue*(PL18S-PL4S- TZS))
              +(Vl5S*PipValue*(PL18S-PL5S- TZS))
              +(Vl6S*PipValue*(PL18S-PL6S- TZS))
              +(Vl7S*PipValue*(PL18S-PL7S- TZS))
              +(Vl8S*PipValue*(PL18S-PL8S- TZS))
              +(Vl8S*PipValue*(PL18S-PL9S- TZS))
              +(Vl9S*PipValue*(PL18S-PL9S- TZS))
              +(Vl10S*PipValue*(PL18S-PL10S- TZS))
              +(Vl11S*PipValue*(PL18S-PL11S- TZS))
              +(Vl12S*PipValue*(PL18S-PL12S- TZS))
              +(Vl13S*PipValue*(PL18S-PL13S- TZS))
              +(Vl14S*PipValue*(PL18S-PL14S- TZS))
              +(Vl15S*PipValue*(PL18S-PL15S- TZS))
              +(Vl16S*PipValue*(PL18S-PL16S- TZS))
              +(Vl17S*PipValue*(PL18S-PL17S- TZS));
      Vl18S=NormalizeDouble(MathAbs(Loss18S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss18S=3*LotsS*PipValue*(PL18S-PL0S- TZS+step3S)
              +(Vl1S*PipValue*(PL18S-PL1S- TZS))
              +(Vl2S*PipValue*(PL18S-PL2S- TZS))
              +(Vl3S*PipValue*(PL18S-PL3S- TZS))
              +(Vl4S*PipValue*(PL18S-PL4S- TZS))
              +(Vl5S*PipValue*(PL18S-PL5S- TZS))
              +(Vl6S*PipValue*(PL18S-PL6S- TZS))
              +(Vl7S*PipValue*(PL18S-PL7S- TZS))
              +(Vl8S*PipValue*(PL18S-PL8S- TZS))
              +(Vl8S*PipValue*(PL18S-PL9S- TZS))
              +(Vl9S*PipValue*(PL18S-PL9S- TZS))
              +(Vl10S*PipValue*(PL18S-PL10S- TZS))
              +(Vl11S*PipValue*(PL18S-PL11S- TZS))
              +(Vl12S*PipValue*(PL18S-PL12S- TZS))
              +(Vl13S*PipValue*(PL18S-PL13S- TZS))
              +(Vl14S*PipValue*(PL18S-PL14S- TZS))
              +(Vl15S*PipValue*(PL18S-PL15S- TZS))
              +(Vl16S*PipValue*(PL18S-PL16S- TZS))
              +(Vl17S*PipValue*(PL18S-PL17S- TZS));

      Vl18S=NormalizeDouble(MathAbs(Loss18S)/TZS/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss18S:", Loss18S, " Vl18S:", Vl18S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V18MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss18S=LotsS*PipValue*(PL18S-PL0S- TZS17)
              +(Vl1S*PipValue*(PL18S-PL1S- TZS17))
              +(Vl2S*PipValue*(PL18S-PL2S- TZS17))
              +(Vl3S*PipValue*(PL18S-PL3S- TZS17))
              +(Vl4S*PipValue*(PL18S-PL4S- TZS17))
              +(Vl5S*PipValue*(PL18S-PL5S- TZS17))
              +(Vl6S*PipValue*(PL18S-PL6S- TZS17))
              +(Vl7S*PipValue*(PL18S-PL7S- TZS17))
              +(Vl8S*PipValue*(PL18S-PL8S- TZS17))
              +(Vl8S*PipValue*(PL18S-PL9S- TZS17))
              +(Vl9S*PipValue*(PL18S-PL9S- TZS17))
              +(Vl10S*PipValue*(PL18S-PL10S- TZS17))
              +(Vl11S*PipValue*(PL18S-PL11S- TZS17))
              +(Vl12S*PipValue*(PL18S-PL12S- TZS17))
              +(Vl13S*PipValue*(PL18S-PL13S- TZS17))
              +(Vl14S*PipValue*(PL18S-PL14S- TZS17))
              +(Vl15S*PipValue*(PL18S-PL15S- TZS17))
              +(Vl16S*PipValue*(PL18S-PL16S- TZS17))
              +(Vl17S*PipValue*(PL18S-PL17S- TZS17));
      Vl18S=NormalizeDouble(MathAbs(Loss18S)/TZS17/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss18S=2*LotsS*PipValue*(PL18S-PL0S- TZS17+step2S)
              +(Vl1S*PipValue*(PL18S-PL1S- TZS17))
              +(Vl2S*PipValue*(PL18S-PL2S- TZS17))
              +(Vl3S*PipValue*(PL18S-PL3S- TZS17))
              +(Vl4S*PipValue*(PL18S-PL4S- TZS17))
              +(Vl5S*PipValue*(PL18S-PL5S- TZS17))
              +(Vl6S*PipValue*(PL18S-PL6S- TZS17))
              +(Vl7S*PipValue*(PL18S-PL7S- TZS17))
              +(Vl8S*PipValue*(PL18S-PL8S- TZS17))
              +(Vl8S*PipValue*(PL18S-PL9S- TZS17))
              +(Vl9S*PipValue*(PL18S-PL9S- TZS17))
              +(Vl10S*PipValue*(PL18S-PL10S- TZS17))
              +(Vl11S*PipValue*(PL18S-PL11S- TZS17))
              +(Vl12S*PipValue*(PL18S-PL12S- TZS17))
              +(Vl13S*PipValue*(PL18S-PL13S- TZS17))
              +(Vl14S*PipValue*(PL18S-PL14S- TZS17))
              +(Vl15S*PipValue*(PL18S-PL15S- TZS17))
              +(Vl16S*PipValue*(PL18S-PL16S- TZS17))
              +(Vl17S*PipValue*(PL18S-PL17S- TZS17));
      Vl18S=NormalizeDouble(MathAbs(Loss18S)/TZS17/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss18S=3*LotsS*PipValue*(PL18S-PL0S- TZS17+step3S)
              +(Vl1S*PipValue*(PL18S-PL1S- TZS17))
              +(Vl2S*PipValue*(PL18S-PL2S- TZS17))
              +(Vl3S*PipValue*(PL18S-PL3S- TZS17))
              +(Vl4S*PipValue*(PL18S-PL4S- TZS17))
              +(Vl5S*PipValue*(PL18S-PL5S- TZS17))
              +(Vl6S*PipValue*(PL18S-PL6S- TZS17))
              +(Vl7S*PipValue*(PL18S-PL7S- TZS17))
              +(Vl8S*PipValue*(PL18S-PL8S- TZS17))
              +(Vl8S*PipValue*(PL18S-PL9S- TZS17))
              +(Vl9S*PipValue*(PL18S-PL9S- TZS17))
              +(Vl10S*PipValue*(PL18S-PL10S- TZS17))
              +(Vl11S*PipValue*(PL18S-PL11S- TZS17))
              +(Vl12S*PipValue*(PL18S-PL12S- TZS17))
              +(Vl13S*PipValue*(PL18S-PL13S- TZS17))
              +(Vl14S*PipValue*(PL18S-PL14S- TZS17))
              +(Vl15S*PipValue*(PL18S-PL15S- TZS17))
              +(Vl16S*PipValue*(PL18S-PL16S- TZS17))
              +(Vl17S*PipValue*(PL18S-PL17S- TZS17));

      Vl18S=NormalizeDouble(MathAbs(Loss18S)/TZS17/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss18S:", Loss18S, " Vl18S:", Vl18S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V19S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss19S=LotsS*PipValue*(PL19S-PL0S- TZS)
              +(Vl1S*PipValue*(PL19S-PL1S- TZS))
              +(Vl2S*PipValue*(PL19S-PL2S- TZS))
              +(Vl3S*PipValue*(PL19S-PL3S- TZS))
              +(Vl4S*PipValue*(PL19S-PL4S- TZS))
              +(Vl5S*PipValue*(PL19S-PL5S- TZS))
              +(Vl6S*PipValue*(PL19S-PL6S- TZS))
              +(Vl7S*PipValue*(PL19S-PL7S- TZS))
              +(Vl8S*PipValue*(PL19S-PL8S- TZS))
              +(Vl8S*PipValue*(PL19S-PL9S- TZS))
              +(Vl9S*PipValue*(PL19S-PL9S- TZS))
              +(Vl10S*PipValue*(PL19S-PL10S- TZS))
              +(Vl11S*PipValue*(PL19S-PL11S- TZS))
              +(Vl12S*PipValue*(PL19S-PL12S- TZS))
              +(Vl13S*PipValue*(PL19S-PL13S- TZS))
              +(Vl14S*PipValue*(PL19S-PL14S- TZS))
              +(Vl15S*PipValue*(PL19S-PL15S- TZS))
              +(Vl16S*PipValue*(PL19S-PL16S- TZS))
              +(Vl17S*PipValue*(PL19S-PL17S- TZS))
              +(Vl18S*PipValue*(PL19S-PL18S- TZS));
      Vl19S=NormalizeDouble(MathAbs(Loss19S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss19S=2*LotsS*PipValue*(PL19S-PL0S- TZS+step2S)
              +(Vl1S*PipValue*(PL19S-PL1S- TZS))
              +(Vl2S*PipValue*(PL19S-PL2S- TZS))
              +(Vl3S*PipValue*(PL19S-PL3S- TZS))
              +(Vl4S*PipValue*(PL19S-PL4S- TZS))
              +(Vl5S*PipValue*(PL19S-PL5S- TZS))
              +(Vl6S*PipValue*(PL19S-PL6S- TZS))
              +(Vl7S*PipValue*(PL19S-PL7S- TZS))
              +(Vl8S*PipValue*(PL19S-PL8S- TZS))
              +(Vl8S*PipValue*(PL19S-PL9S- TZS))
              +(Vl9S*PipValue*(PL19S-PL9S- TZS))
              +(Vl10S*PipValue*(PL19S-PL10S- TZS))
              +(Vl11S*PipValue*(PL19S-PL11S- TZS))
              +(Vl12S*PipValue*(PL19S-PL12S- TZS))
              +(Vl13S*PipValue*(PL19S-PL13S- TZS))
              +(Vl14S*PipValue*(PL19S-PL14S- TZS))
              +(Vl15S*PipValue*(PL19S-PL15S- TZS))
              +(Vl16S*PipValue*(PL19S-PL16S- TZS))
              +(Vl17S*PipValue*(PL19S-PL17S- TZS))
              +(Vl18S*PipValue*(PL19S-PL18S- TZS));
      Vl19S=NormalizeDouble(MathAbs(Loss19S)/TZS/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss19S=3*LotsS*PipValue*(PL19S-PL0S- TZS+step3S)
              +(Vl1S*PipValue*(PL19S-PL1S- TZS))
              +(Vl2S*PipValue*(PL19S-PL2S- TZS))
              +(Vl3S*PipValue*(PL19S-PL3S- TZS))
              +(Vl4S*PipValue*(PL19S-PL4S- TZS))
              +(Vl5S*PipValue*(PL19S-PL5S- TZS))
              +(Vl6S*PipValue*(PL19S-PL6S- TZS))
              +(Vl7S*PipValue*(PL19S-PL7S- TZS))
              +(Vl8S*PipValue*(PL19S-PL8S- TZS))
              +(Vl8S*PipValue*(PL19S-PL9S- TZS))
              +(Vl9S*PipValue*(PL19S-PL9S- TZS))
              +(Vl10S*PipValue*(PL19S-PL10S- TZS))
              +(Vl11S*PipValue*(PL19S-PL11S- TZS))
              +(Vl12S*PipValue*(PL19S-PL12S- TZS))
              +(Vl13S*PipValue*(PL19S-PL13S- TZS))
              +(Vl14S*PipValue*(PL19S-PL14S- TZS))
              +(Vl15S*PipValue*(PL19S-PL15S- TZS))
              +(Vl16S*PipValue*(PL19S-PL16S- TZS))
              +(Vl17S*PipValue*(PL19S-PL17S- TZS))
              +(Vl18S*PipValue*(PL19S-PL18S- TZS));
      Vl19S=NormalizeDouble(MathAbs(Loss19S)/TZS/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss19S:", Loss19S, " Vl19S:", Vl19S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V19MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss19S=LotsS*PipValue*(PL19S-PL0S- TZS18)
              +(Vl1S*PipValue*(PL19S-PL1S- TZS18))
              +(Vl2S*PipValue*(PL19S-PL2S- TZS18))
              +(Vl3S*PipValue*(PL19S-PL3S- TZS18))
              +(Vl4S*PipValue*(PL19S-PL4S- TZS18))
              +(Vl5S*PipValue*(PL19S-PL5S- TZS18))
              +(Vl6S*PipValue*(PL19S-PL6S- TZS18))
              +(Vl7S*PipValue*(PL19S-PL7S- TZS18))
              +(Vl8S*PipValue*(PL19S-PL8S- TZS18))
              +(Vl8S*PipValue*(PL19S-PL9S- TZS18))
              +(Vl9S*PipValue*(PL19S-PL9S- TZS18))
              +(Vl10S*PipValue*(PL19S-PL10S- TZS18))
              +(Vl11S*PipValue*(PL19S-PL11S- TZS18))
              +(Vl12S*PipValue*(PL19S-PL12S- TZS18))
              +(Vl13S*PipValue*(PL19S-PL13S- TZS18))
              +(Vl14S*PipValue*(PL19S-PL14S- TZS18))
              +(Vl15S*PipValue*(PL19S-PL15S- TZS18))
              +(Vl16S*PipValue*(PL19S-PL16S- TZS18))
              +(Vl17S*PipValue*(PL19S-PL17S- TZS18))
              +(Vl18S*PipValue*(PL19S-PL18S- TZS18));
      Vl19S=NormalizeDouble(MathAbs(Loss19S)/TZS18/PipValue,decimalPlace);
     }
   if(CONTORS==2)
     {
      Loss19S=2*LotsS*PipValue*(PL19S-PL0S- TZS18+step2S)
              +(Vl1S*PipValue*(PL19S-PL1S- TZS18))
              +(Vl2S*PipValue*(PL19S-PL2S- TZS18))
              +(Vl3S*PipValue*(PL19S-PL3S- TZS18))
              +(Vl4S*PipValue*(PL19S-PL4S- TZS18))
              +(Vl5S*PipValue*(PL19S-PL5S- TZS18))
              +(Vl6S*PipValue*(PL19S-PL6S- TZS18))
              +(Vl7S*PipValue*(PL19S-PL7S- TZS18))
              +(Vl8S*PipValue*(PL19S-PL8S- TZS18))
              +(Vl8S*PipValue*(PL19S-PL9S- TZS18))
              +(Vl9S*PipValue*(PL19S-PL9S- TZS18))
              +(Vl10S*PipValue*(PL19S-PL10S- TZS18))
              +(Vl11S*PipValue*(PL19S-PL11S- TZS18))
              +(Vl12S*PipValue*(PL19S-PL12S- TZS18))
              +(Vl13S*PipValue*(PL19S-PL13S- TZS18))
              +(Vl14S*PipValue*(PL19S-PL14S- TZS18))
              +(Vl15S*PipValue*(PL19S-PL15S- TZS18))
              +(Vl16S*PipValue*(PL19S-PL16S- TZS18))
              +(Vl17S*PipValue*(PL19S-PL17S- TZS18))
              +(Vl18S*PipValue*(PL19S-PL18S- TZS18));
      Vl19S=NormalizeDouble(MathAbs(Loss19S)/TZS18/PipValue,decimalPlace);
     }
   if(CONTORS==3)
     {
      Loss19S=3*LotsS*PipValue*(PL19S-PL0S- TZS18+step3S)
              +(Vl1S*PipValue*(PL19S-PL1S- TZS18))
              +(Vl2S*PipValue*(PL19S-PL2S- TZS18))
              +(Vl3S*PipValue*(PL19S-PL3S- TZS18))
              +(Vl4S*PipValue*(PL19S-PL4S- TZS18))
              +(Vl5S*PipValue*(PL19S-PL5S- TZS18))
              +(Vl6S*PipValue*(PL19S-PL6S- TZS18))
              +(Vl7S*PipValue*(PL19S-PL7S- TZS18))
              +(Vl8S*PipValue*(PL19S-PL8S- TZS18))
              +(Vl8S*PipValue*(PL19S-PL9S- TZS18))
              +(Vl9S*PipValue*(PL19S-PL9S- TZS18))
              +(Vl10S*PipValue*(PL19S-PL10S- TZS18))
              +(Vl11S*PipValue*(PL19S-PL11S- TZS18))
              +(Vl12S*PipValue*(PL19S-PL12S- TZS18))
              +(Vl13S*PipValue*(PL19S-PL13S- TZS18))
              +(Vl14S*PipValue*(PL19S-PL14S- TZS18))
              +(Vl15S*PipValue*(PL19S-PL15S- TZS18))
              +(Vl16S*PipValue*(PL19S-PL16S- TZS18))
              +(Vl17S*PipValue*(PL19S-PL17S- TZS18))
              +(Vl18S*PipValue*(PL19S-PL18S- TZS18));
      Vl19S=NormalizeDouble(MathAbs(Loss19S)/TZS18/PipValue,decimalPlace);
     }
   Print("PipValue:", PipValue, " Loss19S:", Loss19S, " Vl19S:", Vl19S);
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
void Calculate_V20S()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss20S=LotsS*PipValue*(PL20S-PL0S- TZS)
              +(Vl1S*PipValue*(PL20S-PL1S- TZS))
              +(Vl2S*PipValue*(PL20S-PL2S- TZS))
              +(Vl3S*PipValue*(PL20S-PL3S- TZS))
              +(Vl4S*PipValue*(PL20S-PL4S- TZS))
              +(Vl5S*PipValue*(PL20S-PL5S- TZS))
              +(Vl6S*PipValue*(PL20S-PL6S- TZS))
              +(Vl7S*PipValue*(PL20S-PL7S- TZS))
              +(Vl8S*PipValue*(PL20S-PL8S- TZS))
              +(Vl8S*PipValue*(PL20S-PL9S- TZS))
              +(Vl9S*PipValue*(PL20S-PL9S- TZS))
              +(Vl10S*PipValue*(PL20S-PL10S- TZS))
              +(Vl11S*PipValue*(PL20S-PL11S- TZS))
              +(Vl12S*PipValue*(PL20S-PL12S- TZS))
              +(Vl13S*PipValue*(PL20S-PL13S- TZS))
              +(Vl14S*PipValue*(PL20S-PL14S- TZS))
              +(Vl15S*PipValue*(PL20S-PL15S- TZS))
              +(Vl16S*PipValue*(PL20S-PL16S- TZS))
              +(Vl17S*PipValue*(PL20S-PL17S- TZS))
              +(Vl18S*PipValue*(PL20S-PL18S- TZS))
              +(Vl19S*PipValue*(PL20S-PL19S- TZS));
      Vl20S=NormalizeDouble(MathAbs(Loss20S)/TZS/PipValue,decimalPlace);
     }

   Print("PipValue:", PipValue, " Loss20S:", Loss20S, " Vl20S:", Vl20S);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Calculate_V20MS()
  {
   double PipValue=CalculatePipValue()*LotsS;
   if(CONTORS==1)
     {
      Loss20S=LotsS*PipValue*(PL20S-PL0S- TZS19)
              +(Vl1S*PipValue*(PL20S-PL1S- TZS19))
              +(Vl2S*PipValue*(PL20S-PL2S- TZS19))
              +(Vl3S*PipValue*(PL20S-PL3S- TZS19))
              +(Vl4S*PipValue*(PL20S-PL4S- TZS19))
              +(Vl5S*PipValue*(PL20S-PL5S- TZS19))
              +(Vl6S*PipValue*(PL20S-PL6S- TZS19))
              +(Vl7S*PipValue*(PL20S-PL7S- TZS19))
              +(Vl8S*PipValue*(PL20S-PL8S- TZS19))
              +(Vl8S*PipValue*(PL20S-PL9S- TZS19))
              +(Vl9S*PipValue*(PL20S-PL9S- TZS19))
              +(Vl10S*PipValue*(PL20S-PL10S- TZS19))
              +(Vl11S*PipValue*(PL20S-PL11S- TZS19))
              +(Vl12S*PipValue*(PL20S-PL12S- TZS19))
              +(Vl13S*PipValue*(PL20S-PL13S- TZS19))
              +(Vl14S*PipValue*(PL20S-PL14S- TZS19))
              +(Vl15S*PipValue*(PL20S-PL15S- TZS19))
              +(Vl16S*PipValue*(PL20S-PL16S- TZS19))
              +(Vl17S*PipValue*(PL20S-PL17S- TZS19))
              +(Vl18S*PipValue*(PL20S-PL18S- TZS19))
              +(Vl19S*PipValue*(PL20S-PL19S- TZS19));
      Vl20S=NormalizeDouble(MathAbs(Loss20S)/TZS19/PipValue,decimalPlace);
     }

   Print("PipValue:", PipValue, " Loss20S:", Loss20S, " Vl20S:", Vl20S);
  }
//+------------------------------------------------------------------+
//funtion aditie
void CheckAddition()
  {
   if(InpNumberComplementareAddition==1)
     {
      Addition1=InpLotAddition;
      Addition2=2*InpLotAddition;
      Addition3 = 3 * InpLotAddition;
      Addition4 = 4 * InpLotAddition;
      Addition5 = 5 * InpLotAddition;
      Addition6 = 6 * InpLotAddition;
      Addition7 = 7 * InpLotAddition;
      Addition8 = 8 * InpLotAddition;
      Addition9 = 9 * InpLotAddition;
      Addition10 = 10 * InpLotAddition;
      Addition11 = 11 * InpLotAddition;
      Addition12 = 12 * InpLotAddition;
      Addition13 = 13 * InpLotAddition;
      Addition14 = 14 * InpLotAddition;
      Addition15 = 15 * InpLotAddition;
      Addition16 = 16 * InpLotAddition;
      Addition17 = 17 * InpLotAddition;
      Addition18 = 18 * InpLotAddition;
      Addition19 = 19 * InpLotAddition;
      Addition20 = 20 * InpLotAddition;
      Addition1S = InpLotAddition;
      Addition2S = 2 * InpLotAddition;
      Addition3S = 3 * InpLotAddition;
      Addition4S = 4 * InpLotAddition;
      Addition5S = 5 * InpLotAddition;
      Addition6S = 6 * InpLotAddition;
      Addition7S = 7 * InpLotAddition;
      Addition8S = 8 * InpLotAddition;
      Addition9S = 9 * InpLotAddition;
      Addition10S = 10 * InpLotAddition;
      Addition11S = 11 * InpLotAddition;
      Addition12S = 12 * InpLotAddition;
      Addition13S = 13 * InpLotAddition;
      Addition14S = 14 * InpLotAddition;
      Addition15S = 15 * InpLotAddition;
      Addition16S = 16 * InpLotAddition;
      Addition17S = 17 * InpLotAddition;
      Addition18S = 18 * InpLotAddition;
      Addition19S = 19 * InpLotAddition;
      Addition20S = 20 * InpLotAddition;


     }
   if(InpNumberComplementareAddition==2)
     {
      Addition1=0;
      Addition2 = 1 * InpLotAddition;
      Addition3 = 2 * InpLotAddition;
      Addition4 = 3 * InpLotAddition;
      Addition5 = 4 * InpLotAddition;
      Addition6 = 5 * InpLotAddition;
      Addition7 = 6 * InpLotAddition;
      Addition8 = 7 * InpLotAddition;
      Addition9 = 8 * InpLotAddition;
      Addition10 = 9 * InpLotAddition;
      Addition11 = 10 * InpLotAddition;
      Addition12 = 11 * InpLotAddition;
      Addition13 = 12 * InpLotAddition;
      Addition14 = 13 * InpLotAddition;
      Addition15 = 14 * InpLotAddition;
      Addition16 = 15 * InpLotAddition;
      Addition17 = 16 * InpLotAddition;
      Addition18 = 17 * InpLotAddition;
      Addition19 = 18 * InpLotAddition;
      Addition20 = 19 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 1 * InpLotAddition;
      Addition3S = 2 * InpLotAddition;
      Addition4S = 3 * InpLotAddition;
      Addition5S = 4 * InpLotAddition;
      Addition6S = 5 * InpLotAddition;
      Addition7S = 6 * InpLotAddition;
      Addition8S = 7 * InpLotAddition;
      Addition9S = 8 * InpLotAddition;
      Addition10S = 9 * InpLotAddition;
      Addition11S = 10 * InpLotAddition;
      Addition12S = 11 * InpLotAddition;
      Addition13S = 12 * InpLotAddition;
      Addition14S = 13 * InpLotAddition;
      Addition15S = 14 * InpLotAddition;
      Addition16S = 15 * InpLotAddition;
      Addition17S = 16 * InpLotAddition;
      Addition18S = 17 * InpLotAddition;
      Addition19S = 18 * InpLotAddition;
      Addition20S = 19 * InpLotAddition;


     }
   if(InpNumberComplementareAddition==3)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 1 * InpLotAddition;
      Addition4 = 2 * InpLotAddition;
      Addition5 = 3 * InpLotAddition;
      Addition6 = 4 * InpLotAddition;
      Addition7 = 5 * InpLotAddition;
      Addition8 = 6 * InpLotAddition;
      Addition9 = 7 * InpLotAddition;
      Addition10 = 8 * InpLotAddition;
      Addition11 = 9 * InpLotAddition;
      Addition12 = 10 * InpLotAddition;
      Addition13 = 11 * InpLotAddition;
      Addition14 = 12 * InpLotAddition;
      Addition15 = 13 * InpLotAddition;
      Addition16 = 14 * InpLotAddition;
      Addition17 = 15 * InpLotAddition;
      Addition18 = 16 * InpLotAddition;
      Addition19 = 17 * InpLotAddition;
      Addition20 = 18 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 1 * InpLotAddition;
      Addition4S = 2 * InpLotAddition;
      Addition5S = 3 * InpLotAddition;
      Addition6S = 4 * InpLotAddition;
      Addition7S = 5 * InpLotAddition;
      Addition8S = 6 * InpLotAddition;
      Addition9S = 7 * InpLotAddition;
      Addition10S = 8 * InpLotAddition;
      Addition11S = 9 * InpLotAddition;
      Addition12S = 10 * InpLotAddition;
      Addition13S = 11 * InpLotAddition;
      Addition14S = 12 * InpLotAddition;
      Addition15S = 13 * InpLotAddition;
      Addition16S = 14 * InpLotAddition;
      Addition17S = 15 * InpLotAddition;
      Addition18S = 16 * InpLotAddition;
      Addition19S = 17 * InpLotAddition;
      Addition20S = 18 * InpLotAddition;

     }
   if(InpNumberComplementareAddition==4)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 0;
      Addition4 = 1 * InpLotAddition;
      Addition5 = 2 * InpLotAddition;
      Addition6 = 3 * InpLotAddition;
      Addition7 = 4 * InpLotAddition;
      Addition8 = 5 * InpLotAddition;
      Addition9 = 6 * InpLotAddition;
      Addition10 = 7 * InpLotAddition;
      Addition11 = 8 * InpLotAddition;
      Addition12 = 9 * InpLotAddition;
      Addition13 = 10 * InpLotAddition;
      Addition14 = 11 * InpLotAddition;
      Addition15 = 12 * InpLotAddition;
      Addition16 = 13 * InpLotAddition;
      Addition17 = 14 * InpLotAddition;
      Addition18 = 15 * InpLotAddition;
      Addition19 = 16 * InpLotAddition;
      Addition20 = 17 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 0;
      Addition4S = 1 * InpLotAddition;
      Addition5S = 2 * InpLotAddition;
      Addition6S = 3 * InpLotAddition;
      Addition7S = 4 * InpLotAddition;
      Addition8S = 5 * InpLotAddition;
      Addition9S = 6 * InpLotAddition;
      Addition10S = 7 * InpLotAddition;
      Addition11S = 8 * InpLotAddition;
      Addition12S = 9 * InpLotAddition;
      Addition13S = 10 * InpLotAddition;
      Addition14S = 11 * InpLotAddition;
      Addition15S = 12 * InpLotAddition;
      Addition16S = 13 * InpLotAddition;
      Addition17S = 14 * InpLotAddition;
      Addition18S = 15 * InpLotAddition;
      Addition19S = 16 * InpLotAddition;
      Addition20S = 17 * InpLotAddition;

     }
   if(InpNumberComplementareAddition==5)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 0;
      Addition4 = 0;
      Addition5 = 1 * InpLotAddition;
      Addition6 = 2 * InpLotAddition;
      Addition7 = 3 * InpLotAddition;
      Addition8 = 4 * InpLotAddition;
      Addition9 = 5 * InpLotAddition;
      Addition10 = 6 * InpLotAddition;
      Addition11 = 7 * InpLotAddition;
      Addition12 = 8 * InpLotAddition;
      Addition13 = 9 * InpLotAddition;
      Addition14 = 10 * InpLotAddition;
      Addition15 = 11 * InpLotAddition;
      Addition16 = 12 * InpLotAddition;
      Addition17 = 13 * InpLotAddition;
      Addition18 = 14 * InpLotAddition;
      Addition19 = 15 * InpLotAddition;
      Addition20 = 16 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 0;
      Addition4S = 0;
      Addition5S = 1 * InpLotAddition;
      Addition6S = 2 * InpLotAddition;
      Addition7S = 3 * InpLotAddition;
      Addition8S = 4 * InpLotAddition;
      Addition9S = 5 * InpLotAddition;
      Addition10S = 6 * InpLotAddition;
      Addition11S = 7 * InpLotAddition;
      Addition12S = 8 * InpLotAddition;
      Addition13S = 9 * InpLotAddition;
      Addition14S = 10 * InpLotAddition;
      Addition15S = 11 * InpLotAddition;
      Addition16S = 12 * InpLotAddition;
      Addition17S = 13 * InpLotAddition;
      Addition18S = 14 * InpLotAddition;
      Addition19S = 15 * InpLotAddition;
      Addition20S = 16 * InpLotAddition;


     }
   if(InpNumberComplementareAddition==6)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 0;
      Addition4 = 0;
      Addition5 = 0;
      Addition6 = 1 * InpLotAddition;
      Addition7 = 2 * InpLotAddition;
      Addition8 = 3 * InpLotAddition;
      Addition9 = 4 * InpLotAddition;
      Addition10 = 5 * InpLotAddition;
      Addition11 = 6 * InpLotAddition;
      Addition12 = 7 * InpLotAddition;
      Addition13 = 8 * InpLotAddition;
      Addition14 = 9 * InpLotAddition;
      Addition15 = 10 * InpLotAddition;
      Addition16 = 11 * InpLotAddition;
      Addition17 = 12 * InpLotAddition;
      Addition18 = 13 * InpLotAddition;
      Addition19 = 14 * InpLotAddition;
      Addition20 = 15 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 0;
      Addition4S = 0;
      Addition5S = 0;
      Addition6S = 1 * InpLotAddition;
      Addition7S = 2 * InpLotAddition;
      Addition8S = 3 * InpLotAddition;
      Addition9S = 4 * InpLotAddition;
      Addition10S = 5 * InpLotAddition;
      Addition11S = 6 * InpLotAddition;
      Addition12S = 7 * InpLotAddition;
      Addition13S = 8 * InpLotAddition;
      Addition14S = 9 * InpLotAddition;
      Addition15S = 10 * InpLotAddition;
      Addition16S = 11 * InpLotAddition;
      Addition17S = 12 * InpLotAddition;
      Addition18S = 13 * InpLotAddition;
      Addition19S = 14 * InpLotAddition;
      Addition20S = 15 * InpLotAddition;


     }
   if(InpNumberComplementareAddition==7)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 0;
      Addition4 = 0;
      Addition5 = 0;
      Addition6 = 0;
      Addition7 = 1 * InpLotAddition;
      Addition8 = 2 * InpLotAddition;
      Addition9 = 3 * InpLotAddition;
      Addition10 = 4 * InpLotAddition;
      Addition11 = 5 * InpLotAddition;
      Addition12 = 6 * InpLotAddition;
      Addition13 = 7 * InpLotAddition;
      Addition14 = 8 * InpLotAddition;
      Addition15 = 9 * InpLotAddition;
      Addition16 = 10 * InpLotAddition;
      Addition17 = 11 * InpLotAddition;
      Addition18 = 12 * InpLotAddition;
      Addition19 = 13 * InpLotAddition;
      Addition20 = 14 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 0;
      Addition4S = 0;
      Addition5S = 0;
      Addition6S = 0;
      Addition7S = 1 * InpLotAddition;
      Addition8S = 2 * InpLotAddition;
      Addition9S = 3 * InpLotAddition;
      Addition10S = 4 * InpLotAddition;
      Addition11S = 5 * InpLotAddition;
      Addition12S = 6 * InpLotAddition;
      Addition13S = 7 * InpLotAddition;
      Addition14S = 8 * InpLotAddition;
      Addition15S = 9 * InpLotAddition;
      Addition16S = 10 * InpLotAddition;
      Addition17S = 11 * InpLotAddition;
      Addition18S = 12 * InpLotAddition;
      Addition19S = 13 * InpLotAddition;
      Addition20S = 14 * InpLotAddition;


     }
   if(InpNumberComplementareAddition==8)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 0;
      Addition4 = 0;
      Addition5 = 0;
      Addition6 = 0;
      Addition7 = 0;
      Addition8 = 1 * InpLotAddition;
      Addition9 = 2 * InpLotAddition;
      Addition10 = 3 * InpLotAddition;
      Addition11 = 4 * InpLotAddition;
      Addition12 = 5 * InpLotAddition;
      Addition13 = 6 * InpLotAddition;
      Addition14 = 7 * InpLotAddition;
      Addition15 = 8 * InpLotAddition;
      Addition16 = 9 * InpLotAddition;
      Addition17 = 10 * InpLotAddition;
      Addition18 = 11 * InpLotAddition;
      Addition19 = 12 * InpLotAddition;
      Addition20 = 13 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 0;
      Addition4S = 0;
      Addition5S = 0;
      Addition6S = 0;
      Addition7S = 0;
      Addition8S = 1 * InpLotAddition;
      Addition9S = 2 * InpLotAddition;
      Addition10S = 3 * InpLotAddition;
      Addition11S = 4 * InpLotAddition;
      Addition12S = 5 * InpLotAddition;
      Addition13S = 6 * InpLotAddition;
      Addition14S = 7 * InpLotAddition;
      Addition15S = 8 * InpLotAddition;
      Addition16S = 9 * InpLotAddition;
      Addition17S = 10 * InpLotAddition;
      Addition18S = 11 * InpLotAddition;
      Addition19S = 12 * InpLotAddition;
      Addition20S = 13 * InpLotAddition;

     }
   if(InpNumberComplementareAddition==9)
     {
      Addition1=0;
      Addition2 = 0;
      Addition3 = 0;
      Addition4 = 0;
      Addition5 = 0;
      Addition6 = 0;
      Addition7 = 0;
      Addition8 = 0;
      Addition9 = 1 * InpLotAddition;
      Addition10 = 2 * InpLotAddition;
      Addition11 = 3 * InpLotAddition;
      Addition12 = 4 * InpLotAddition;
      Addition13 = 5 * InpLotAddition;
      Addition14 = 6 * InpLotAddition;
      Addition15 = 7 * InpLotAddition;
      Addition16 = 8 * InpLotAddition;
      Addition17 = 9 * InpLotAddition;
      Addition18 = 10 * InpLotAddition;
      Addition19 = 11 * InpLotAddition;
      Addition20 = 12 * InpLotAddition;
      Addition1S = 0;
      Addition2S = 0;
      Addition3S = 0;
      Addition4S = 0;
      Addition5S = 0;
      Addition6S = 0;
      Addition7S = 0;
      Addition8S = 0;
      Addition9S = 1 * InpLotAddition;
      Addition10S = 2 * InpLotAddition;
      Addition11S = 3 * InpLotAddition;
      Addition12S = 4 * InpLotAddition;
      Addition13S = 5 * InpLotAddition;
      Addition14S = 6 * InpLotAddition;
      Addition15S = 7 * InpLotAddition;
      Addition16S = 8 * InpLotAddition;
      Addition17S = 9 * InpLotAddition;
      Addition18S = 10 * InpLotAddition;
      Addition19S = 11 * InpLotAddition;
      Addition20S = 12 * InpLotAddition;


     }

  }
//+------------------------------------------------------------------+
